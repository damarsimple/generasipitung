"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

type AggregateChat {
  _count: ChatCountAggregateOutputType
  _min: ChatMinAggregateOutputType
  _max: ChatMaxAggregateOutputType
}

type AggregateChatSession {
  _count: ChatSessionCountAggregateOutputType
  _min: ChatSessionMinAggregateOutputType
  _max: ChatSessionMaxAggregateOutputType
}

type AggregateClassroom {
  _count: ClassroomCountAggregateOutputType
  _avg: ClassroomAvgAggregateOutputType
  _sum: ClassroomSumAggregateOutputType
  _min: ClassroomMinAggregateOutputType
  _max: ClassroomMaxAggregateOutputType
}

type AggregateClassroomStudent {
  _count: ClassroomStudentCountAggregateOutputType
  _min: ClassroomStudentMinAggregateOutputType
  _max: ClassroomStudentMaxAggregateOutputType
}

type AggregateExam {
  _count: ExamCountAggregateOutputType
  _min: ExamMinAggregateOutputType
  _max: ExamMaxAggregateOutputType
}

type AggregateExamAnswer {
  _count: ExamAnswerCountAggregateOutputType
  _avg: ExamAnswerAvgAggregateOutputType
  _sum: ExamAnswerSumAggregateOutputType
  _min: ExamAnswerMinAggregateOutputType
  _max: ExamAnswerMaxAggregateOutputType
}

type AggregateExamQuestion {
  _count: ExamQuestionCountAggregateOutputType
  _min: ExamQuestionMinAggregateOutputType
  _max: ExamQuestionMaxAggregateOutputType
}

type AggregateExamSession {
  _count: ExamSessionCountAggregateOutputType
  _avg: ExamSessionAvgAggregateOutputType
  _sum: ExamSessionSumAggregateOutputType
  _min: ExamSessionMinAggregateOutputType
  _max: ExamSessionMaxAggregateOutputType
}

type AggregateIdentityFile {
  _count: IdentityFileCountAggregateOutputType
  _min: IdentityFileMinAggregateOutputType
  _max: IdentityFileMaxAggregateOutputType
}

type AggregateNotification {
  _count: NotificationCountAggregateOutputType
  _min: NotificationMinAggregateOutputType
  _max: NotificationMaxAggregateOutputType
}

type AggregateProvince {
  _count: ProvinceCountAggregateOutputType
  _min: ProvinceMinAggregateOutputType
  _max: ProvinceMaxAggregateOutputType
}

type AggregateQuestion {
  _count: QuestionCountAggregateOutputType
  _min: QuestionMinAggregateOutputType
  _max: QuestionMaxAggregateOutputType
}

type AggregateRegency {
  _count: RegencyCountAggregateOutputType
  _min: RegencyMinAggregateOutputType
  _max: RegencyMaxAggregateOutputType
}

type AggregateSchool {
  _count: SchoolCountAggregateOutputType
  _avg: SchoolAvgAggregateOutputType
  _sum: SchoolSumAggregateOutputType
  _min: SchoolMinAggregateOutputType
  _max: SchoolMaxAggregateOutputType
}

type AggregateSchoolStaff {
  _count: SchoolStaffCountAggregateOutputType
  _min: SchoolStaffMinAggregateOutputType
  _max: SchoolStaffMaxAggregateOutputType
}

type AggregateUser {
  _count: UserCountAggregateOutputType
  _avg: UserAvgAggregateOutputType
  _sum: UserSumAggregateOutputType
  _min: UserMinAggregateOutputType
  _max: UserMaxAggregateOutputType
}

type Auth {
  """JWT token"""
  token: String
  success: Boolean
  message: String
  user: User
}

type BatchPayload {
  count: Int!
}

"""BigInt custom scalar type"""
scalar BigInt

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedBoolFilter
  _max: NestedBoolFilter
}

type Chat {
  id: String!
  fromId: String!
  from: User!
  contentType: ContentType!
  content: String!
  readAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  chatSessionId: String!
  chatSession: ChatSession!
}

type ChatCountAggregateOutputType {
  id: Int!
  fromId: Int!
  contentType: Int!
  content: Int!
  readAt: Int!
  createdAt: Int!
  updatedAt: Int!
  chatSessionId: Int!
  _all: Int!
}

input ChatCountOrderByAggregateInput {
  id: SortOrder
  fromId: SortOrder
  contentType: SortOrder
  content: SortOrder
  readAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  chatSessionId: SortOrder
}

input ChatCreateInput {
  id: String
  from: UserCreateNestedOneWithoutMyChatsInput!
  contentType: ContentType!
  content: String!
  readAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  chatSession: ChatSessionCreateNestedOneWithoutChatsInput!
}

input ChatCreateManyChatSessionInput {
  id: String
  fromId: String!
  contentType: ContentType!
  content: String!
  readAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input ChatCreateManyChatSessionInputEnvelope {
  data: ChatCreateManyChatSessionInput!
  skipDuplicates: Boolean
}

input ChatCreateManyFromInput {
  id: String
  contentType: ContentType!
  content: String!
  readAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  chatSessionId: String!
}

input ChatCreateManyFromInputEnvelope {
  data: ChatCreateManyFromInput!
  skipDuplicates: Boolean
}

input ChatCreateManyInput {
  id: String
  fromId: String!
  contentType: ContentType!
  content: String!
  readAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  chatSessionId: String!
}

input ChatCreateNestedManyWithoutChatSessionInput {
  create: [ChatCreateWithoutChatSessionInput]
  connectOrCreate: [ChatCreateOrConnectWithoutChatSessionInput]
  createMany: ChatCreateManyChatSessionInputEnvelope
  connect: [ChatWhereUniqueInput]
}

input ChatCreateNestedManyWithoutFromInput {
  create: [ChatCreateWithoutFromInput]
  connectOrCreate: [ChatCreateOrConnectWithoutFromInput]
  createMany: ChatCreateManyFromInputEnvelope
  connect: [ChatWhereUniqueInput]
}

input ChatCreateOrConnectWithoutChatSessionInput {
  where: ChatWhereUniqueInput!
  create: ChatUncheckedCreateWithoutChatSessionInput!
}

input ChatCreateOrConnectWithoutFromInput {
  where: ChatWhereUniqueInput!
  create: ChatUncheckedCreateWithoutFromInput!
}

input ChatCreateWithoutChatSessionInput {
  id: String
  from: UserCreateNestedOneWithoutMyChatsInput!
  contentType: ContentType!
  content: String!
  readAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input ChatCreateWithoutFromInput {
  id: String
  contentType: ContentType!
  content: String!
  readAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  chatSession: ChatSessionCreateNestedOneWithoutChatsInput!
}

input ChatListRelationFilter {
  every: ChatWhereInput
  some: ChatWhereInput
  none: ChatWhereInput
}

type ChatMaxAggregateOutputType {
  id: String
  fromId: String
  contentType: ContentType
  content: String
  readAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  chatSessionId: String
}

input ChatMaxOrderByAggregateInput {
  id: SortOrder
  fromId: SortOrder
  contentType: SortOrder
  content: SortOrder
  readAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  chatSessionId: SortOrder
}

type ChatMinAggregateOutputType {
  id: String
  fromId: String
  contentType: ContentType
  content: String
  readAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  chatSessionId: String
}

input ChatMinOrderByAggregateInput {
  id: SortOrder
  fromId: SortOrder
  contentType: SortOrder
  content: SortOrder
  readAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  chatSessionId: SortOrder
}

input ChatOrderByRelationAggregateInput {
  _count: SortOrder
}

input ChatOrderByWithAggregationInput {
  id: SortOrder
  fromId: SortOrder
  contentType: SortOrder
  content: SortOrder
  readAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  chatSessionId: SortOrder
  _count: ChatCountOrderByAggregateInput
  _max: ChatMaxOrderByAggregateInput
  _min: ChatMinOrderByAggregateInput
}

input ChatOrderByWithRelationInput {
  id: SortOrder
  fromId: SortOrder
  from: UserOrderByWithRelationInput
  contentType: SortOrder
  content: SortOrder
  readAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  chatSessionId: SortOrder
  chatSession: ChatSessionOrderByWithRelationInput
}

enum ChatScalarFieldEnum {
  id
  fromId
  contentType
  content
  readAt
  createdAt
  updatedAt
  chatSessionId
}

input ChatScalarWhereInput {
  AND: [ChatScalarWhereInput]
  OR: [ChatScalarWhereInput]
  NOT: [ChatScalarWhereInput]
  id: StringFilter
  fromId: StringFilter
  contentType: EnumContentTypeFilter
  content: StringFilter
  readAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  chatSessionId: StringFilter
}

input ChatScalarWhereWithAggregatesInput {
  AND: [ChatScalarWhereWithAggregatesInput]
  OR: [ChatScalarWhereWithAggregatesInput]
  NOT: [ChatScalarWhereWithAggregatesInput]
  id: StringWithAggregatesFilter
  fromId: StringWithAggregatesFilter
  contentType: EnumContentTypeWithAggregatesFilter
  content: StringWithAggregatesFilter
  readAt: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  chatSessionId: StringWithAggregatesFilter
}

type ChatSession {
  id: String!
  participantsIds: [String!]!
  lastReadAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  chats(where: ChatWhereInput, orderBy: ChatOrderByWithRelationInput, cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: ChatScalarFieldEnum): [Chat!]!
  _count: ChatSessionCountOutputType!
}

type ChatSessionCountAggregateOutputType {
  id: Int!
  participantsIds: Int!
  lastReadAt: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

input ChatSessionCountOrderByAggregateInput {
  id: SortOrder
  participantsIds: SortOrder
  lastReadAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

type ChatSessionCountOutputType {
  chats: Int!
}

input ChatSessionCreateInput {
  id: String
  participantsIds: [String]
  lastReadAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  chats: ChatCreateNestedManyWithoutChatSessionInput
}

input ChatSessionCreateManyInput {
  id: String
  participantsIds: [String]
  lastReadAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input ChatSessionCreateNestedOneWithoutChatsInput {
  create: ChatSessionUncheckedCreateWithoutChatsInput
  connectOrCreate: ChatSessionCreateOrConnectWithoutChatsInput
  connect: ChatSessionWhereUniqueInput
}

input ChatSessionCreateOrConnectWithoutChatsInput {
  where: ChatSessionWhereUniqueInput!
  create: ChatSessionUncheckedCreateWithoutChatsInput!
}

input ChatSessionCreateparticipantsIdsInput {
  set: String!
}

input ChatSessionCreateWithoutChatsInput {
  id: String
  participantsIds: [String]
  lastReadAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

type ChatSessionMaxAggregateOutputType {
  id: String
  lastReadAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input ChatSessionMaxOrderByAggregateInput {
  id: SortOrder
  lastReadAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

type ChatSessionMinAggregateOutputType {
  id: String
  lastReadAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input ChatSessionMinOrderByAggregateInput {
  id: SortOrder
  lastReadAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ChatSessionOrderByWithAggregationInput {
  id: SortOrder
  participantsIds: SortOrder
  lastReadAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: ChatSessionCountOrderByAggregateInput
  _max: ChatSessionMaxOrderByAggregateInput
  _min: ChatSessionMinOrderByAggregateInput
}

input ChatSessionOrderByWithRelationInput {
  id: SortOrder
  participantsIds: SortOrder
  lastReadAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  chats: ChatOrderByRelationAggregateInput
}

input ChatSessionRelationFilter {
  is: ChatSessionWhereInput
  isNot: ChatSessionWhereInput
}

enum ChatSessionScalarFieldEnum {
  id
  participantsIds
  lastReadAt
  createdAt
  updatedAt
}

input ChatSessionScalarWhereWithAggregatesInput {
  AND: [ChatSessionScalarWhereWithAggregatesInput]
  OR: [ChatSessionScalarWhereWithAggregatesInput]
  NOT: [ChatSessionScalarWhereWithAggregatesInput]
  id: StringWithAggregatesFilter
  participantsIds: StringNullableListFilter
  lastReadAt: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input ChatSessionUncheckedCreateInput {
  id: String
  participantsIds: [String]
  lastReadAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  chats: ChatUncheckedCreateNestedManyWithoutChatSessionInput
}

input ChatSessionUncheckedCreateWithoutChatsInput {
  id: String
  participantsIds: [String]
  lastReadAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input ChatSessionUncheckedUpdateInput {
  id: StringFieldUpdateOperationsInput
  participantsIds: [String]
  lastReadAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  chats: ChatUncheckedUpdateManyWithoutChatSessionInput
}

input ChatSessionUncheckedUpdateManyInput {
  id: StringFieldUpdateOperationsInput
  participantsIds: [String]
  lastReadAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ChatSessionUncheckedUpdateWithoutChatsInput {
  id: StringFieldUpdateOperationsInput
  participantsIds: [String]
  lastReadAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ChatSessionUpdateInput {
  id: StringFieldUpdateOperationsInput
  participantsIds: [String]
  lastReadAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  chats: ChatUpdateManyWithoutChatSessionInput
}

input ChatSessionUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  participantsIds: [String]
  lastReadAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ChatSessionUpdateOneRequiredWithoutChatsInput {
  create: ChatSessionUncheckedCreateWithoutChatsInput
  connectOrCreate: ChatSessionCreateOrConnectWithoutChatsInput
  upsert: ChatSessionUpsertWithoutChatsInput
  connect: ChatSessionWhereUniqueInput
  update: ChatSessionUncheckedUpdateWithoutChatsInput
}

input ChatSessionUpdateparticipantsIdsInput {
  set: [String]
  push: [String]
}

input ChatSessionUpdateWithoutChatsInput {
  id: StringFieldUpdateOperationsInput
  participantsIds: [String]
  lastReadAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ChatSessionUpsertWithoutChatsInput {
  update: ChatSessionUncheckedUpdateWithoutChatsInput!
  create: ChatSessionUncheckedCreateWithoutChatsInput!
}

input ChatSessionWhereInput {
  AND: [ChatSessionWhereInput]
  OR: [ChatSessionWhereInput]
  NOT: [ChatSessionWhereInput]
  id: StringFilter
  participantsIds: StringNullableListFilter
  lastReadAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  chats: ChatListRelationFilter
}

input ChatSessionWhereUniqueInput {
  id: String
}

input ChatUncheckedCreateInput {
  id: String
  fromId: String!
  contentType: ContentType!
  content: String!
  readAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  chatSessionId: String!
}

input ChatUncheckedCreateNestedManyWithoutChatSessionInput {
  create: [ChatCreateWithoutChatSessionInput]
  connectOrCreate: [ChatCreateOrConnectWithoutChatSessionInput]
  createMany: ChatCreateManyChatSessionInputEnvelope
  connect: [ChatWhereUniqueInput]
}

input ChatUncheckedCreateNestedManyWithoutFromInput {
  create: [ChatCreateWithoutFromInput]
  connectOrCreate: [ChatCreateOrConnectWithoutFromInput]
  createMany: ChatCreateManyFromInputEnvelope
  connect: [ChatWhereUniqueInput]
}

input ChatUncheckedCreateWithoutChatSessionInput {
  id: String
  fromId: String!
  contentType: ContentType!
  content: String!
  readAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input ChatUncheckedCreateWithoutFromInput {
  id: String
  contentType: ContentType!
  content: String!
  readAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  chatSessionId: String!
}

input ChatUncheckedUpdateInput {
  id: StringFieldUpdateOperationsInput
  fromId: StringFieldUpdateOperationsInput
  contentType: EnumContentTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  readAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  chatSessionId: StringFieldUpdateOperationsInput
}

input ChatUncheckedUpdateManyInput {
  id: StringFieldUpdateOperationsInput
  fromId: StringFieldUpdateOperationsInput
  contentType: EnumContentTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  readAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  chatSessionId: StringFieldUpdateOperationsInput
}

input ChatUncheckedUpdateManyWithoutChatSessionInput {
  create: [ChatCreateWithoutChatSessionInput]
  connectOrCreate: [ChatCreateOrConnectWithoutChatSessionInput]
  upsert: [ChatUpsertWithWhereUniqueWithoutChatSessionInput]
  createMany: ChatCreateManyChatSessionInputEnvelope
  set: [ChatWhereUniqueInput]
  disconnect: [ChatWhereUniqueInput]
  delete: [ChatWhereUniqueInput]
  connect: [ChatWhereUniqueInput]
  update: [ChatUpdateWithWhereUniqueWithoutChatSessionInput]
  updateMany: [ChatUpdateManyWithWhereWithoutChatSessionInput]
  deleteMany: [ChatScalarWhereInput]
}

input ChatUncheckedUpdateManyWithoutChatsInput {
  id: StringFieldUpdateOperationsInput
  fromId: StringFieldUpdateOperationsInput
  contentType: EnumContentTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  readAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ChatUncheckedUpdateManyWithoutFromInput {
  create: [ChatCreateWithoutFromInput]
  connectOrCreate: [ChatCreateOrConnectWithoutFromInput]
  upsert: [ChatUpsertWithWhereUniqueWithoutFromInput]
  createMany: ChatCreateManyFromInputEnvelope
  set: [ChatWhereUniqueInput]
  disconnect: [ChatWhereUniqueInput]
  delete: [ChatWhereUniqueInput]
  connect: [ChatWhereUniqueInput]
  update: [ChatUpdateWithWhereUniqueWithoutFromInput]
  updateMany: [ChatUpdateManyWithWhereWithoutFromInput]
  deleteMany: [ChatScalarWhereInput]
}

input ChatUncheckedUpdateManyWithoutMyChatsInput {
  id: StringFieldUpdateOperationsInput
  contentType: EnumContentTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  readAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  chatSessionId: StringFieldUpdateOperationsInput
}

input ChatUncheckedUpdateWithoutChatSessionInput {
  id: StringFieldUpdateOperationsInput
  fromId: StringFieldUpdateOperationsInput
  contentType: EnumContentTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  readAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ChatUncheckedUpdateWithoutFromInput {
  id: StringFieldUpdateOperationsInput
  contentType: EnumContentTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  readAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  chatSessionId: StringFieldUpdateOperationsInput
}

input ChatUpdateInput {
  id: StringFieldUpdateOperationsInput
  from: UserUpdateOneRequiredWithoutMyChatsInput
  contentType: EnumContentTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  readAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  chatSession: ChatSessionUpdateOneRequiredWithoutChatsInput
}

input ChatUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  contentType: EnumContentTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  readAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ChatUpdateManyWithoutChatSessionInput {
  create: [ChatCreateWithoutChatSessionInput]
  connectOrCreate: [ChatCreateOrConnectWithoutChatSessionInput]
  upsert: [ChatUpsertWithWhereUniqueWithoutChatSessionInput]
  createMany: ChatCreateManyChatSessionInputEnvelope
  set: [ChatWhereUniqueInput]
  disconnect: [ChatWhereUniqueInput]
  delete: [ChatWhereUniqueInput]
  connect: [ChatWhereUniqueInput]
  update: [ChatUpdateWithWhereUniqueWithoutChatSessionInput]
  updateMany: [ChatUpdateManyWithWhereWithoutChatSessionInput]
  deleteMany: [ChatScalarWhereInput]
}

input ChatUpdateManyWithoutFromInput {
  create: [ChatCreateWithoutFromInput]
  connectOrCreate: [ChatCreateOrConnectWithoutFromInput]
  upsert: [ChatUpsertWithWhereUniqueWithoutFromInput]
  createMany: ChatCreateManyFromInputEnvelope
  set: [ChatWhereUniqueInput]
  disconnect: [ChatWhereUniqueInput]
  delete: [ChatWhereUniqueInput]
  connect: [ChatWhereUniqueInput]
  update: [ChatUpdateWithWhereUniqueWithoutFromInput]
  updateMany: [ChatUpdateManyWithWhereWithoutFromInput]
  deleteMany: [ChatScalarWhereInput]
}

input ChatUpdateManyWithWhereWithoutChatSessionInput {
  where: ChatScalarWhereInput!
  data: ChatUncheckedUpdateManyWithoutChatsInput!
}

input ChatUpdateManyWithWhereWithoutFromInput {
  where: ChatScalarWhereInput!
  data: ChatUncheckedUpdateManyWithoutMyChatsInput!
}

input ChatUpdateWithoutChatSessionInput {
  id: StringFieldUpdateOperationsInput
  from: UserUpdateOneRequiredWithoutMyChatsInput
  contentType: EnumContentTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  readAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ChatUpdateWithoutFromInput {
  id: StringFieldUpdateOperationsInput
  contentType: EnumContentTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  readAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  chatSession: ChatSessionUpdateOneRequiredWithoutChatsInput
}

input ChatUpdateWithWhereUniqueWithoutChatSessionInput {
  where: ChatWhereUniqueInput!
  data: ChatUncheckedUpdateWithoutChatSessionInput!
}

input ChatUpdateWithWhereUniqueWithoutFromInput {
  where: ChatWhereUniqueInput!
  data: ChatUncheckedUpdateWithoutFromInput!
}

input ChatUpsertWithWhereUniqueWithoutChatSessionInput {
  where: ChatWhereUniqueInput!
  update: ChatUncheckedUpdateWithoutChatSessionInput!
  create: ChatUncheckedCreateWithoutChatSessionInput!
}

input ChatUpsertWithWhereUniqueWithoutFromInput {
  where: ChatWhereUniqueInput!
  update: ChatUncheckedUpdateWithoutFromInput!
  create: ChatUncheckedCreateWithoutFromInput!
}

input ChatWhereInput {
  AND: [ChatWhereInput]
  OR: [ChatWhereInput]
  NOT: [ChatWhereInput]
  id: StringFilter
  fromId: StringFilter
  from: UserWhereInput
  contentType: EnumContentTypeFilter
  content: StringFilter
  readAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  chatSessionId: StringFilter
  chatSession: ChatSessionWhereInput
}

input ChatWhereUniqueInput {
  id: String
}

type Classroom {
  id: String!
  name: String!
  schoolId: String
  school: School
  userId: String!
  user: User!
  students(where: ClassroomStudentWhereInput, orderBy: ClassroomStudentOrderByWithRelationInput, cursor: ClassroomStudentWhereUniqueInput, take: Int, skip: Int, distinct: ClassroomStudentScalarFieldEnum): [ClassroomStudent!]!
  level: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: ClassroomCountOutputType!
}

type ClassroomAvgAggregateOutputType {
  level: Float
}

input ClassroomAvgOrderByAggregateInput {
  level: SortOrder
}

type ClassroomCountAggregateOutputType {
  id: Int!
  name: Int!
  schoolId: Int!
  userId: Int!
  level: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

input ClassroomCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  schoolId: SortOrder
  userId: SortOrder
  level: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

type ClassroomCountOutputType {
  students: Int!
}

input ClassroomCreateInput {
  id: String
  name: String!
  school: SchoolCreateNestedOneWithoutClassroomsInput
  user: UserCreateNestedOneWithoutClassroomsInput!
  students: ClassroomStudentCreateNestedManyWithoutClassroomInput
  level: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassroomCreateManyInput {
  id: String
  name: String!
  schoolId: String
  userId: String!
  level: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassroomCreateManySchoolInput {
  id: String
  name: String!
  userId: String!
  level: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassroomCreateManySchoolInputEnvelope {
  data: ClassroomCreateManySchoolInput!
  skipDuplicates: Boolean
}

input ClassroomCreateManyUserInput {
  id: String
  name: String!
  schoolId: String
  level: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassroomCreateManyUserInputEnvelope {
  data: ClassroomCreateManyUserInput!
  skipDuplicates: Boolean
}

input ClassroomCreateNestedManyWithoutSchoolInput {
  create: [ClassroomCreateWithoutSchoolInput]
  connectOrCreate: [ClassroomCreateOrConnectWithoutSchoolInput]
  createMany: ClassroomCreateManySchoolInputEnvelope
  connect: [ClassroomWhereUniqueInput]
}

input ClassroomCreateNestedManyWithoutUserInput {
  create: [ClassroomCreateWithoutUserInput]
  connectOrCreate: [ClassroomCreateOrConnectWithoutUserInput]
  createMany: ClassroomCreateManyUserInputEnvelope
  connect: [ClassroomWhereUniqueInput]
}

input ClassroomCreateNestedOneWithoutStudentsInput {
  create: ClassroomUncheckedCreateWithoutStudentsInput
  connectOrCreate: ClassroomCreateOrConnectWithoutStudentsInput
  connect: ClassroomWhereUniqueInput
}

input ClassroomCreateOrConnectWithoutSchoolInput {
  where: ClassroomWhereUniqueInput!
  create: ClassroomUncheckedCreateWithoutSchoolInput!
}

input ClassroomCreateOrConnectWithoutStudentsInput {
  where: ClassroomWhereUniqueInput!
  create: ClassroomUncheckedCreateWithoutStudentsInput!
}

input ClassroomCreateOrConnectWithoutUserInput {
  where: ClassroomWhereUniqueInput!
  create: ClassroomUncheckedCreateWithoutUserInput!
}

input ClassroomCreateWithoutSchoolInput {
  id: String
  name: String!
  user: UserCreateNestedOneWithoutClassroomsInput!
  students: ClassroomStudentCreateNestedManyWithoutClassroomInput
  level: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassroomCreateWithoutStudentsInput {
  id: String
  name: String!
  school: SchoolCreateNestedOneWithoutClassroomsInput
  user: UserCreateNestedOneWithoutClassroomsInput!
  level: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassroomCreateWithoutUserInput {
  id: String
  name: String!
  school: SchoolCreateNestedOneWithoutClassroomsInput
  students: ClassroomStudentCreateNestedManyWithoutClassroomInput
  level: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassroomListRelationFilter {
  every: ClassroomWhereInput
  some: ClassroomWhereInput
  none: ClassroomWhereInput
}

type ClassroomMaxAggregateOutputType {
  id: String
  name: String
  schoolId: String
  userId: String
  level: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassroomMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  schoolId: SortOrder
  userId: SortOrder
  level: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

type ClassroomMinAggregateOutputType {
  id: String
  name: String
  schoolId: String
  userId: String
  level: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassroomMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  schoolId: SortOrder
  userId: SortOrder
  level: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ClassroomOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClassroomOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  schoolId: SortOrder
  userId: SortOrder
  level: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: ClassroomCountOrderByAggregateInput
  _avg: ClassroomAvgOrderByAggregateInput
  _max: ClassroomMaxOrderByAggregateInput
  _min: ClassroomMinOrderByAggregateInput
  _sum: ClassroomSumOrderByAggregateInput
}

input ClassroomOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  schoolId: SortOrder
  school: SchoolOrderByWithRelationInput
  userId: SortOrder
  user: UserOrderByWithRelationInput
  students: ClassroomStudentOrderByRelationAggregateInput
  level: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ClassroomRelationFilter {
  is: ClassroomWhereInput
  isNot: ClassroomWhereInput
}

enum ClassroomScalarFieldEnum {
  id
  name
  schoolId
  userId
  level
  createdAt
  updatedAt
}

input ClassroomScalarWhereInput {
  AND: [ClassroomScalarWhereInput]
  OR: [ClassroomScalarWhereInput]
  NOT: [ClassroomScalarWhereInput]
  id: StringFilter
  name: StringFilter
  schoolId: StringNullableFilter
  userId: StringFilter
  level: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ClassroomScalarWhereWithAggregatesInput {
  AND: [ClassroomScalarWhereWithAggregatesInput]
  OR: [ClassroomScalarWhereWithAggregatesInput]
  NOT: [ClassroomScalarWhereWithAggregatesInput]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  schoolId: StringNullableWithAggregatesFilter
  userId: StringWithAggregatesFilter
  level: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type ClassroomStudent {
  id: String!
  userId: String!
  user: User!
  classroom: Classroom
  classroomId: String
  status: ClassroomStudentStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ClassroomStudentCountAggregateOutputType {
  id: Int!
  userId: Int!
  classroomId: Int!
  status: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

input ClassroomStudentCountOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
  classroomId: SortOrder
  status: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ClassroomStudentCreateInput {
  id: String
  user: UserCreateNestedOneWithoutClassroomStudentsInput!
  classroom: ClassroomCreateNestedOneWithoutStudentsInput
  status: ClassroomStudentStatus
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassroomStudentCreateManyClassroomInput {
  id: String
  userId: String!
  status: ClassroomStudentStatus
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassroomStudentCreateManyClassroomInputEnvelope {
  data: ClassroomStudentCreateManyClassroomInput!
  skipDuplicates: Boolean
}

input ClassroomStudentCreateManyInput {
  id: String
  userId: String!
  classroomId: String
  status: ClassroomStudentStatus
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassroomStudentCreateManyUserInput {
  id: String
  classroomId: String
  status: ClassroomStudentStatus
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassroomStudentCreateManyUserInputEnvelope {
  data: ClassroomStudentCreateManyUserInput!
  skipDuplicates: Boolean
}

input ClassroomStudentCreateNestedManyWithoutClassroomInput {
  create: [ClassroomStudentCreateWithoutClassroomInput]
  connectOrCreate: [ClassroomStudentCreateOrConnectWithoutClassroomInput]
  createMany: ClassroomStudentCreateManyClassroomInputEnvelope
  connect: [ClassroomStudentWhereUniqueInput]
}

input ClassroomStudentCreateNestedManyWithoutUserInput {
  create: [ClassroomStudentCreateWithoutUserInput]
  connectOrCreate: [ClassroomStudentCreateOrConnectWithoutUserInput]
  createMany: ClassroomStudentCreateManyUserInputEnvelope
  connect: [ClassroomStudentWhereUniqueInput]
}

input ClassroomStudentCreateOrConnectWithoutClassroomInput {
  where: ClassroomStudentWhereUniqueInput!
  create: ClassroomStudentUncheckedCreateWithoutClassroomInput!
}

input ClassroomStudentCreateOrConnectWithoutUserInput {
  where: ClassroomStudentWhereUniqueInput!
  create: ClassroomStudentUncheckedCreateWithoutUserInput!
}

input ClassroomStudentCreateWithoutClassroomInput {
  id: String
  user: UserCreateNestedOneWithoutClassroomStudentsInput!
  status: ClassroomStudentStatus
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassroomStudentCreateWithoutUserInput {
  id: String
  classroom: ClassroomCreateNestedOneWithoutStudentsInput
  status: ClassroomStudentStatus
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassroomStudentListRelationFilter {
  every: ClassroomStudentWhereInput
  some: ClassroomStudentWhereInput
  none: ClassroomStudentWhereInput
}

type ClassroomStudentMaxAggregateOutputType {
  id: String
  userId: String
  classroomId: String
  status: ClassroomStudentStatus
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassroomStudentMaxOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
  classroomId: SortOrder
  status: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

type ClassroomStudentMinAggregateOutputType {
  id: String
  userId: String
  classroomId: String
  status: ClassroomStudentStatus
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassroomStudentMinOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
  classroomId: SortOrder
  status: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ClassroomStudentOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClassroomStudentOrderByWithAggregationInput {
  id: SortOrder
  userId: SortOrder
  classroomId: SortOrder
  status: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: ClassroomStudentCountOrderByAggregateInput
  _max: ClassroomStudentMaxOrderByAggregateInput
  _min: ClassroomStudentMinOrderByAggregateInput
}

input ClassroomStudentOrderByWithRelationInput {
  id: SortOrder
  userId: SortOrder
  user: UserOrderByWithRelationInput
  classroom: ClassroomOrderByWithRelationInput
  classroomId: SortOrder
  status: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

enum ClassroomStudentScalarFieldEnum {
  id
  userId
  classroomId
  status
  createdAt
  updatedAt
}

input ClassroomStudentScalarWhereInput {
  AND: [ClassroomStudentScalarWhereInput]
  OR: [ClassroomStudentScalarWhereInput]
  NOT: [ClassroomStudentScalarWhereInput]
  id: StringFilter
  userId: StringFilter
  classroomId: StringNullableFilter
  status: EnumClassroomStudentStatusFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ClassroomStudentScalarWhereWithAggregatesInput {
  AND: [ClassroomStudentScalarWhereWithAggregatesInput]
  OR: [ClassroomStudentScalarWhereWithAggregatesInput]
  NOT: [ClassroomStudentScalarWhereWithAggregatesInput]
  id: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
  classroomId: StringNullableWithAggregatesFilter
  status: EnumClassroomStudentStatusWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

enum ClassroomStudentStatus {
  ACTIVE
  BANNED
}

input ClassroomStudentUncheckedCreateInput {
  id: String
  userId: String!
  classroomId: String
  status: ClassroomStudentStatus
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassroomStudentUncheckedCreateNestedManyWithoutClassroomInput {
  create: [ClassroomStudentCreateWithoutClassroomInput]
  connectOrCreate: [ClassroomStudentCreateOrConnectWithoutClassroomInput]
  createMany: ClassroomStudentCreateManyClassroomInputEnvelope
  connect: [ClassroomStudentWhereUniqueInput]
}

input ClassroomStudentUncheckedCreateNestedManyWithoutUserInput {
  create: [ClassroomStudentCreateWithoutUserInput]
  connectOrCreate: [ClassroomStudentCreateOrConnectWithoutUserInput]
  createMany: ClassroomStudentCreateManyUserInputEnvelope
  connect: [ClassroomStudentWhereUniqueInput]
}

input ClassroomStudentUncheckedCreateWithoutClassroomInput {
  id: String
  userId: String!
  status: ClassroomStudentStatus
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassroomStudentUncheckedCreateWithoutUserInput {
  id: String
  classroomId: String
  status: ClassroomStudentStatus
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassroomStudentUncheckedUpdateInput {
  id: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
  classroomId: NullableStringFieldUpdateOperationsInput
  status: EnumClassroomStudentStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomStudentUncheckedUpdateManyInput {
  id: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
  classroomId: NullableStringFieldUpdateOperationsInput
  status: EnumClassroomStudentStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomStudentUncheckedUpdateManyWithoutClassroomInput {
  create: [ClassroomStudentCreateWithoutClassroomInput]
  connectOrCreate: [ClassroomStudentCreateOrConnectWithoutClassroomInput]
  upsert: [ClassroomStudentUpsertWithWhereUniqueWithoutClassroomInput]
  createMany: ClassroomStudentCreateManyClassroomInputEnvelope
  set: [ClassroomStudentWhereUniqueInput]
  disconnect: [ClassroomStudentWhereUniqueInput]
  delete: [ClassroomStudentWhereUniqueInput]
  connect: [ClassroomStudentWhereUniqueInput]
  update: [ClassroomStudentUpdateWithWhereUniqueWithoutClassroomInput]
  updateMany: [ClassroomStudentUpdateManyWithWhereWithoutClassroomInput]
  deleteMany: [ClassroomStudentScalarWhereInput]
}

input ClassroomStudentUncheckedUpdateManyWithoutClassroomStudentsInput {
  id: StringFieldUpdateOperationsInput
  classroomId: NullableStringFieldUpdateOperationsInput
  status: EnumClassroomStudentStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomStudentUncheckedUpdateManyWithoutStudentsInput {
  id: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
  status: EnumClassroomStudentStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomStudentUncheckedUpdateManyWithoutUserInput {
  create: [ClassroomStudentCreateWithoutUserInput]
  connectOrCreate: [ClassroomStudentCreateOrConnectWithoutUserInput]
  upsert: [ClassroomStudentUpsertWithWhereUniqueWithoutUserInput]
  createMany: ClassroomStudentCreateManyUserInputEnvelope
  set: [ClassroomStudentWhereUniqueInput]
  disconnect: [ClassroomStudentWhereUniqueInput]
  delete: [ClassroomStudentWhereUniqueInput]
  connect: [ClassroomStudentWhereUniqueInput]
  update: [ClassroomStudentUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [ClassroomStudentUpdateManyWithWhereWithoutUserInput]
  deleteMany: [ClassroomStudentScalarWhereInput]
}

input ClassroomStudentUncheckedUpdateWithoutClassroomInput {
  id: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
  status: EnumClassroomStudentStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomStudentUncheckedUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  classroomId: NullableStringFieldUpdateOperationsInput
  status: EnumClassroomStudentStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomStudentUpdateInput {
  id: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutClassroomStudentsInput
  classroom: ClassroomUpdateOneWithoutStudentsInput
  status: EnumClassroomStudentStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomStudentUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  status: EnumClassroomStudentStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomStudentUpdateManyWithoutClassroomInput {
  create: [ClassroomStudentCreateWithoutClassroomInput]
  connectOrCreate: [ClassroomStudentCreateOrConnectWithoutClassroomInput]
  upsert: [ClassroomStudentUpsertWithWhereUniqueWithoutClassroomInput]
  createMany: ClassroomStudentCreateManyClassroomInputEnvelope
  set: [ClassroomStudentWhereUniqueInput]
  disconnect: [ClassroomStudentWhereUniqueInput]
  delete: [ClassroomStudentWhereUniqueInput]
  connect: [ClassroomStudentWhereUniqueInput]
  update: [ClassroomStudentUpdateWithWhereUniqueWithoutClassroomInput]
  updateMany: [ClassroomStudentUpdateManyWithWhereWithoutClassroomInput]
  deleteMany: [ClassroomStudentScalarWhereInput]
}

input ClassroomStudentUpdateManyWithoutUserInput {
  create: [ClassroomStudentCreateWithoutUserInput]
  connectOrCreate: [ClassroomStudentCreateOrConnectWithoutUserInput]
  upsert: [ClassroomStudentUpsertWithWhereUniqueWithoutUserInput]
  createMany: ClassroomStudentCreateManyUserInputEnvelope
  set: [ClassroomStudentWhereUniqueInput]
  disconnect: [ClassroomStudentWhereUniqueInput]
  delete: [ClassroomStudentWhereUniqueInput]
  connect: [ClassroomStudentWhereUniqueInput]
  update: [ClassroomStudentUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [ClassroomStudentUpdateManyWithWhereWithoutUserInput]
  deleteMany: [ClassroomStudentScalarWhereInput]
}

input ClassroomStudentUpdateManyWithWhereWithoutClassroomInput {
  where: ClassroomStudentScalarWhereInput!
  data: ClassroomStudentUncheckedUpdateManyWithoutStudentsInput!
}

input ClassroomStudentUpdateManyWithWhereWithoutUserInput {
  where: ClassroomStudentScalarWhereInput!
  data: ClassroomStudentUncheckedUpdateManyWithoutClassroomStudentsInput!
}

input ClassroomStudentUpdateWithoutClassroomInput {
  id: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutClassroomStudentsInput
  status: EnumClassroomStudentStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomStudentUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  classroom: ClassroomUpdateOneWithoutStudentsInput
  status: EnumClassroomStudentStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomStudentUpdateWithWhereUniqueWithoutClassroomInput {
  where: ClassroomStudentWhereUniqueInput!
  data: ClassroomStudentUncheckedUpdateWithoutClassroomInput!
}

input ClassroomStudentUpdateWithWhereUniqueWithoutUserInput {
  where: ClassroomStudentWhereUniqueInput!
  data: ClassroomStudentUncheckedUpdateWithoutUserInput!
}

input ClassroomStudentUpsertWithWhereUniqueWithoutClassroomInput {
  where: ClassroomStudentWhereUniqueInput!
  update: ClassroomStudentUncheckedUpdateWithoutClassroomInput!
  create: ClassroomStudentUncheckedCreateWithoutClassroomInput!
}

input ClassroomStudentUpsertWithWhereUniqueWithoutUserInput {
  where: ClassroomStudentWhereUniqueInput!
  update: ClassroomStudentUncheckedUpdateWithoutUserInput!
  create: ClassroomStudentUncheckedCreateWithoutUserInput!
}

input ClassroomStudentWhereInput {
  AND: [ClassroomStudentWhereInput]
  OR: [ClassroomStudentWhereInput]
  NOT: [ClassroomStudentWhereInput]
  id: StringFilter
  userId: StringFilter
  user: UserWhereInput
  classroom: ClassroomWhereInput
  classroomId: StringNullableFilter
  status: EnumClassroomStudentStatusFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ClassroomStudentWhereUniqueInput {
  id: String
}

type ClassroomSumAggregateOutputType {
  level: Int
}

input ClassroomSumOrderByAggregateInput {
  level: SortOrder
}

input ClassroomUncheckedCreateInput {
  id: String
  name: String!
  schoolId: String
  userId: String!
  students: ClassroomStudentUncheckedCreateNestedManyWithoutClassroomInput
  level: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassroomUncheckedCreateNestedManyWithoutSchoolInput {
  create: [ClassroomCreateWithoutSchoolInput]
  connectOrCreate: [ClassroomCreateOrConnectWithoutSchoolInput]
  createMany: ClassroomCreateManySchoolInputEnvelope
  connect: [ClassroomWhereUniqueInput]
}

input ClassroomUncheckedCreateNestedManyWithoutUserInput {
  create: [ClassroomCreateWithoutUserInput]
  connectOrCreate: [ClassroomCreateOrConnectWithoutUserInput]
  createMany: ClassroomCreateManyUserInputEnvelope
  connect: [ClassroomWhereUniqueInput]
}

input ClassroomUncheckedCreateWithoutSchoolInput {
  id: String
  name: String!
  userId: String!
  students: ClassroomStudentUncheckedCreateNestedManyWithoutClassroomInput
  level: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassroomUncheckedCreateWithoutStudentsInput {
  id: String
  name: String!
  schoolId: String
  userId: String!
  level: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassroomUncheckedCreateWithoutUserInput {
  id: String
  name: String!
  schoolId: String
  students: ClassroomStudentUncheckedCreateNestedManyWithoutClassroomInput
  level: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassroomUncheckedUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  schoolId: NullableStringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
  students: ClassroomStudentUncheckedUpdateManyWithoutClassroomInput
  level: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomUncheckedUpdateManyInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  schoolId: NullableStringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
  level: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomUncheckedUpdateManyWithoutClassroomsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  schoolId: NullableStringFieldUpdateOperationsInput
  level: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomUncheckedUpdateManyWithoutSchoolInput {
  create: [ClassroomCreateWithoutSchoolInput]
  connectOrCreate: [ClassroomCreateOrConnectWithoutSchoolInput]
  upsert: [ClassroomUpsertWithWhereUniqueWithoutSchoolInput]
  createMany: ClassroomCreateManySchoolInputEnvelope
  set: [ClassroomWhereUniqueInput]
  disconnect: [ClassroomWhereUniqueInput]
  delete: [ClassroomWhereUniqueInput]
  connect: [ClassroomWhereUniqueInput]
  update: [ClassroomUpdateWithWhereUniqueWithoutSchoolInput]
  updateMany: [ClassroomUpdateManyWithWhereWithoutSchoolInput]
  deleteMany: [ClassroomScalarWhereInput]
}

input ClassroomUncheckedUpdateManyWithoutUserInput {
  create: [ClassroomCreateWithoutUserInput]
  connectOrCreate: [ClassroomCreateOrConnectWithoutUserInput]
  upsert: [ClassroomUpsertWithWhereUniqueWithoutUserInput]
  createMany: ClassroomCreateManyUserInputEnvelope
  set: [ClassroomWhereUniqueInput]
  disconnect: [ClassroomWhereUniqueInput]
  delete: [ClassroomWhereUniqueInput]
  connect: [ClassroomWhereUniqueInput]
  update: [ClassroomUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [ClassroomUpdateManyWithWhereWithoutUserInput]
  deleteMany: [ClassroomScalarWhereInput]
}

input ClassroomUncheckedUpdateWithoutSchoolInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
  students: ClassroomStudentUncheckedUpdateManyWithoutClassroomInput
  level: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomUncheckedUpdateWithoutStudentsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  schoolId: NullableStringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
  level: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomUncheckedUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  schoolId: NullableStringFieldUpdateOperationsInput
  students: ClassroomStudentUncheckedUpdateManyWithoutClassroomInput
  level: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneWithoutClassroomsInput
  user: UserUpdateOneRequiredWithoutClassroomsInput
  students: ClassroomStudentUpdateManyWithoutClassroomInput
  level: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  level: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomUpdateManyWithoutSchoolInput {
  create: [ClassroomCreateWithoutSchoolInput]
  connectOrCreate: [ClassroomCreateOrConnectWithoutSchoolInput]
  upsert: [ClassroomUpsertWithWhereUniqueWithoutSchoolInput]
  createMany: ClassroomCreateManySchoolInputEnvelope
  set: [ClassroomWhereUniqueInput]
  disconnect: [ClassroomWhereUniqueInput]
  delete: [ClassroomWhereUniqueInput]
  connect: [ClassroomWhereUniqueInput]
  update: [ClassroomUpdateWithWhereUniqueWithoutSchoolInput]
  updateMany: [ClassroomUpdateManyWithWhereWithoutSchoolInput]
  deleteMany: [ClassroomScalarWhereInput]
}

input ClassroomUpdateManyWithoutUserInput {
  create: [ClassroomCreateWithoutUserInput]
  connectOrCreate: [ClassroomCreateOrConnectWithoutUserInput]
  upsert: [ClassroomUpsertWithWhereUniqueWithoutUserInput]
  createMany: ClassroomCreateManyUserInputEnvelope
  set: [ClassroomWhereUniqueInput]
  disconnect: [ClassroomWhereUniqueInput]
  delete: [ClassroomWhereUniqueInput]
  connect: [ClassroomWhereUniqueInput]
  update: [ClassroomUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [ClassroomUpdateManyWithWhereWithoutUserInput]
  deleteMany: [ClassroomScalarWhereInput]
}

input ClassroomUpdateManyWithWhereWithoutSchoolInput {
  where: ClassroomScalarWhereInput!
  data: ClassroomUncheckedUpdateManyWithoutClassroomsInput!
}

input ClassroomUpdateManyWithWhereWithoutUserInput {
  where: ClassroomScalarWhereInput!
  data: ClassroomUncheckedUpdateManyWithoutClassroomsInput!
}

input ClassroomUpdateOneWithoutStudentsInput {
  create: ClassroomUncheckedCreateWithoutStudentsInput
  connectOrCreate: ClassroomCreateOrConnectWithoutStudentsInput
  upsert: ClassroomUpsertWithoutStudentsInput
  disconnect: Boolean
  delete: Boolean
  connect: ClassroomWhereUniqueInput
  update: ClassroomUncheckedUpdateWithoutStudentsInput
}

input ClassroomUpdateWithoutSchoolInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutClassroomsInput
  students: ClassroomStudentUpdateManyWithoutClassroomInput
  level: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomUpdateWithoutStudentsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneWithoutClassroomsInput
  user: UserUpdateOneRequiredWithoutClassroomsInput
  level: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneWithoutClassroomsInput
  students: ClassroomStudentUpdateManyWithoutClassroomInput
  level: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomUpdateWithWhereUniqueWithoutSchoolInput {
  where: ClassroomWhereUniqueInput!
  data: ClassroomUncheckedUpdateWithoutSchoolInput!
}

input ClassroomUpdateWithWhereUniqueWithoutUserInput {
  where: ClassroomWhereUniqueInput!
  data: ClassroomUncheckedUpdateWithoutUserInput!
}

input ClassroomUpsertWithoutStudentsInput {
  update: ClassroomUncheckedUpdateWithoutStudentsInput!
  create: ClassroomUncheckedCreateWithoutStudentsInput!
}

input ClassroomUpsertWithWhereUniqueWithoutSchoolInput {
  where: ClassroomWhereUniqueInput!
  update: ClassroomUncheckedUpdateWithoutSchoolInput!
  create: ClassroomUncheckedCreateWithoutSchoolInput!
}

input ClassroomUpsertWithWhereUniqueWithoutUserInput {
  where: ClassroomWhereUniqueInput!
  update: ClassroomUncheckedUpdateWithoutUserInput!
  create: ClassroomUncheckedCreateWithoutUserInput!
}

input ClassroomWhereInput {
  AND: [ClassroomWhereInput]
  OR: [ClassroomWhereInput]
  NOT: [ClassroomWhereInput]
  id: StringFilter
  name: StringFilter
  schoolId: StringNullableFilter
  school: SchoolWhereInput
  userId: StringFilter
  user: UserWhereInput
  students: ClassroomStudentListRelationFilter
  level: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ClassroomWhereUniqueInput {
  id: String
}

enum ContentType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
}

"""Date custom scalar type"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input DateTimeNullableWithAggregatesFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedDateTimeNullableFilter
  _max: NestedDateTimeNullableFilter
}

input DateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

"""Decimal custom scalar type"""
scalar Decimal

input EnumClassroomStudentStatusFieldUpdateOperationsInput {
  set: ClassroomStudentStatus
}

input EnumClassroomStudentStatusFilter {
  equals: ClassroomStudentStatus
  in: [ClassroomStudentStatus]
  notIn: [ClassroomStudentStatus]
  not: NestedEnumClassroomStudentStatusFilter
}

input EnumClassroomStudentStatusWithAggregatesFilter {
  equals: ClassroomStudentStatus
  in: [ClassroomStudentStatus]
  notIn: [ClassroomStudentStatus]
  not: NestedEnumClassroomStudentStatusWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumClassroomStudentStatusFilter
  _max: NestedEnumClassroomStudentStatusFilter
}

input EnumContentTypeFieldUpdateOperationsInput {
  set: ContentType
}

input EnumContentTypeFilter {
  equals: ContentType
  in: [ContentType]
  notIn: [ContentType]
  not: NestedEnumContentTypeFilter
}

input EnumContentTypeWithAggregatesFilter {
  equals: ContentType
  in: [ContentType]
  notIn: [ContentType]
  not: NestedEnumContentTypeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumContentTypeFilter
  _max: NestedEnumContentTypeFilter
}

input EnumIdentityFileTypeFieldUpdateOperationsInput {
  set: IdentityFileType
}

input EnumIdentityFileTypeFilter {
  equals: IdentityFileType
  in: [IdentityFileType]
  notIn: [IdentityFileType]
  not: NestedEnumIdentityFileTypeFilter
}

input EnumIdentityFileTypeWithAggregatesFilter {
  equals: IdentityFileType
  in: [IdentityFileType]
  notIn: [IdentityFileType]
  not: NestedEnumIdentityFileTypeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumIdentityFileTypeFilter
  _max: NestedEnumIdentityFileTypeFilter
}

input EnumQuestionTypeFieldUpdateOperationsInput {
  set: QuestionType
}

input EnumQuestionTypeFilter {
  equals: QuestionType
  in: [QuestionType]
  notIn: [QuestionType]
  not: NestedEnumQuestionTypeFilter
}

input EnumQuestionTypeWithAggregatesFilter {
  equals: QuestionType
  in: [QuestionType]
  notIn: [QuestionType]
  not: NestedEnumQuestionTypeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumQuestionTypeFilter
  _max: NestedEnumQuestionTypeFilter
}

input EnumRolesFieldUpdateOperationsInput {
  set: Roles
}

input EnumRolesFilter {
  equals: Roles
  in: [Roles]
  notIn: [Roles]
  not: NestedEnumRolesFilter
}

input EnumRolesWithAggregatesFilter {
  equals: Roles
  in: [Roles]
  notIn: [Roles]
  not: NestedEnumRolesWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumRolesFilter
  _max: NestedEnumRolesFilter
}

input EnumSchoolStaffRolesNullableListFilter {
  equals: [SchoolStaffRoles]
  has: SchoolStaffRoles
  hasEvery: [SchoolStaffRoles]
  hasSome: [SchoolStaffRoles]
  isEmpty: Boolean
}

input EnumVerifyTypeNullableFilter {
  equals: VerifyType
  in: [VerifyType]
  notIn: [VerifyType]
  not: NestedEnumVerifyTypeNullableFilter
}

input EnumVerifyTypeNullableWithAggregatesFilter {
  equals: VerifyType
  in: [VerifyType]
  notIn: [VerifyType]
  not: NestedEnumVerifyTypeNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedEnumVerifyTypeNullableFilter
  _max: NestedEnumVerifyTypeNullableFilter
}

type Exam {
  id: String!
  name: String!
  userId: String!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
  examquestions(where: ExamQuestionWhereInput, orderBy: ExamQuestionOrderByWithRelationInput, cursor: ExamQuestionWhereUniqueInput, take: Int, skip: Int, distinct: ExamQuestionScalarFieldEnum): [ExamQuestion!]!
  examAnswers(where: ExamAnswerWhereInput, orderBy: ExamAnswerOrderByWithRelationInput, cursor: ExamAnswerWhereUniqueInput, take: Int, skip: Int, distinct: ExamAnswerScalarFieldEnum): [ExamAnswer!]!
  _count: ExamCountOutputType!
}

type ExamAnswer {
  id: String!
  examId: String!
  exam: Exam!
  grade: Float!
  finishCalculation: Boolean!
  examSessionId: String
  examSession: ExamSession
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ExamAnswerAvgAggregateOutputType {
  grade: Float
}

input ExamAnswerAvgOrderByAggregateInput {
  grade: SortOrder
}

type ExamAnswerCountAggregateOutputType {
  id: Int!
  examId: Int!
  grade: Int!
  finishCalculation: Int!
  examSessionId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

input ExamAnswerCountOrderByAggregateInput {
  id: SortOrder
  examId: SortOrder
  grade: SortOrder
  finishCalculation: SortOrder
  examSessionId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ExamAnswerCreateInput {
  id: String
  exam: ExamCreateNestedOneWithoutExamAnswersInput!
  grade: Float
  finishCalculation: Boolean
  examSession: ExamSessionCreateNestedOneWithoutExamAnswersInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamAnswerCreateManyExamInput {
  id: String
  grade: Float
  finishCalculation: Boolean
  examSessionId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamAnswerCreateManyExamInputEnvelope {
  data: ExamAnswerCreateManyExamInput!
  skipDuplicates: Boolean
}

input ExamAnswerCreateManyExamSessionInput {
  id: String
  examId: String!
  grade: Float
  finishCalculation: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamAnswerCreateManyExamSessionInputEnvelope {
  data: ExamAnswerCreateManyExamSessionInput!
  skipDuplicates: Boolean
}

input ExamAnswerCreateManyInput {
  id: String
  examId: String!
  grade: Float
  finishCalculation: Boolean
  examSessionId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamAnswerCreateNestedManyWithoutExamInput {
  create: [ExamAnswerCreateWithoutExamInput]
  connectOrCreate: [ExamAnswerCreateOrConnectWithoutExamInput]
  createMany: ExamAnswerCreateManyExamInputEnvelope
  connect: [ExamAnswerWhereUniqueInput]
}

input ExamAnswerCreateNestedManyWithoutExamSessionInput {
  create: [ExamAnswerCreateWithoutExamSessionInput]
  connectOrCreate: [ExamAnswerCreateOrConnectWithoutExamSessionInput]
  createMany: ExamAnswerCreateManyExamSessionInputEnvelope
  connect: [ExamAnswerWhereUniqueInput]
}

input ExamAnswerCreateOrConnectWithoutExamInput {
  where: ExamAnswerWhereUniqueInput!
  create: ExamAnswerUncheckedCreateWithoutExamInput!
}

input ExamAnswerCreateOrConnectWithoutExamSessionInput {
  where: ExamAnswerWhereUniqueInput!
  create: ExamAnswerUncheckedCreateWithoutExamSessionInput!
}

input ExamAnswerCreateWithoutExamInput {
  id: String
  grade: Float
  finishCalculation: Boolean
  examSession: ExamSessionCreateNestedOneWithoutExamAnswersInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamAnswerCreateWithoutExamSessionInput {
  id: String
  exam: ExamCreateNestedOneWithoutExamAnswersInput!
  grade: Float
  finishCalculation: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamAnswerListRelationFilter {
  every: ExamAnswerWhereInput
  some: ExamAnswerWhereInput
  none: ExamAnswerWhereInput
}

type ExamAnswerMaxAggregateOutputType {
  id: String
  examId: String
  grade: Float
  finishCalculation: Boolean
  examSessionId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamAnswerMaxOrderByAggregateInput {
  id: SortOrder
  examId: SortOrder
  grade: SortOrder
  finishCalculation: SortOrder
  examSessionId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

type ExamAnswerMinAggregateOutputType {
  id: String
  examId: String
  grade: Float
  finishCalculation: Boolean
  examSessionId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamAnswerMinOrderByAggregateInput {
  id: SortOrder
  examId: SortOrder
  grade: SortOrder
  finishCalculation: SortOrder
  examSessionId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ExamAnswerOrderByRelationAggregateInput {
  _count: SortOrder
}

input ExamAnswerOrderByWithAggregationInput {
  id: SortOrder
  examId: SortOrder
  grade: SortOrder
  finishCalculation: SortOrder
  examSessionId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: ExamAnswerCountOrderByAggregateInput
  _avg: ExamAnswerAvgOrderByAggregateInput
  _max: ExamAnswerMaxOrderByAggregateInput
  _min: ExamAnswerMinOrderByAggregateInput
  _sum: ExamAnswerSumOrderByAggregateInput
}

input ExamAnswerOrderByWithRelationInput {
  id: SortOrder
  examId: SortOrder
  exam: ExamOrderByWithRelationInput
  grade: SortOrder
  finishCalculation: SortOrder
  examSessionId: SortOrder
  examSession: ExamSessionOrderByWithRelationInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

enum ExamAnswerScalarFieldEnum {
  id
  examId
  grade
  finishCalculation
  examSessionId
  createdAt
  updatedAt
}

input ExamAnswerScalarWhereInput {
  AND: [ExamAnswerScalarWhereInput]
  OR: [ExamAnswerScalarWhereInput]
  NOT: [ExamAnswerScalarWhereInput]
  id: StringFilter
  examId: StringFilter
  grade: FloatFilter
  finishCalculation: BoolFilter
  examSessionId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ExamAnswerScalarWhereWithAggregatesInput {
  AND: [ExamAnswerScalarWhereWithAggregatesInput]
  OR: [ExamAnswerScalarWhereWithAggregatesInput]
  NOT: [ExamAnswerScalarWhereWithAggregatesInput]
  id: StringWithAggregatesFilter
  examId: StringWithAggregatesFilter
  grade: FloatWithAggregatesFilter
  finishCalculation: BoolWithAggregatesFilter
  examSessionId: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type ExamAnswerSumAggregateOutputType {
  grade: Float
}

input ExamAnswerSumOrderByAggregateInput {
  grade: SortOrder
}

input ExamAnswerUncheckedCreateInput {
  id: String
  examId: String!
  grade: Float
  finishCalculation: Boolean
  examSessionId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamAnswerUncheckedCreateNestedManyWithoutExamInput {
  create: [ExamAnswerCreateWithoutExamInput]
  connectOrCreate: [ExamAnswerCreateOrConnectWithoutExamInput]
  createMany: ExamAnswerCreateManyExamInputEnvelope
  connect: [ExamAnswerWhereUniqueInput]
}

input ExamAnswerUncheckedCreateNestedManyWithoutExamSessionInput {
  create: [ExamAnswerCreateWithoutExamSessionInput]
  connectOrCreate: [ExamAnswerCreateOrConnectWithoutExamSessionInput]
  createMany: ExamAnswerCreateManyExamSessionInputEnvelope
  connect: [ExamAnswerWhereUniqueInput]
}

input ExamAnswerUncheckedCreateWithoutExamInput {
  id: String
  grade: Float
  finishCalculation: Boolean
  examSessionId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamAnswerUncheckedCreateWithoutExamSessionInput {
  id: String
  examId: String!
  grade: Float
  finishCalculation: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamAnswerUncheckedUpdateInput {
  id: StringFieldUpdateOperationsInput
  examId: StringFieldUpdateOperationsInput
  grade: FloatFieldUpdateOperationsInput
  finishCalculation: BoolFieldUpdateOperationsInput
  examSessionId: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ExamAnswerUncheckedUpdateManyInput {
  id: StringFieldUpdateOperationsInput
  examId: StringFieldUpdateOperationsInput
  grade: FloatFieldUpdateOperationsInput
  finishCalculation: BoolFieldUpdateOperationsInput
  examSessionId: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ExamAnswerUncheckedUpdateManyWithoutExamAnswersInput {
  id: StringFieldUpdateOperationsInput
  grade: FloatFieldUpdateOperationsInput
  finishCalculation: BoolFieldUpdateOperationsInput
  examSessionId: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ExamAnswerUncheckedUpdateManyWithoutExamInput {
  create: [ExamAnswerCreateWithoutExamInput]
  connectOrCreate: [ExamAnswerCreateOrConnectWithoutExamInput]
  upsert: [ExamAnswerUpsertWithWhereUniqueWithoutExamInput]
  createMany: ExamAnswerCreateManyExamInputEnvelope
  set: [ExamAnswerWhereUniqueInput]
  disconnect: [ExamAnswerWhereUniqueInput]
  delete: [ExamAnswerWhereUniqueInput]
  connect: [ExamAnswerWhereUniqueInput]
  update: [ExamAnswerUpdateWithWhereUniqueWithoutExamInput]
  updateMany: [ExamAnswerUpdateManyWithWhereWithoutExamInput]
  deleteMany: [ExamAnswerScalarWhereInput]
}

input ExamAnswerUncheckedUpdateManyWithoutExamSessionInput {
  create: [ExamAnswerCreateWithoutExamSessionInput]
  connectOrCreate: [ExamAnswerCreateOrConnectWithoutExamSessionInput]
  upsert: [ExamAnswerUpsertWithWhereUniqueWithoutExamSessionInput]
  createMany: ExamAnswerCreateManyExamSessionInputEnvelope
  set: [ExamAnswerWhereUniqueInput]
  disconnect: [ExamAnswerWhereUniqueInput]
  delete: [ExamAnswerWhereUniqueInput]
  connect: [ExamAnswerWhereUniqueInput]
  update: [ExamAnswerUpdateWithWhereUniqueWithoutExamSessionInput]
  updateMany: [ExamAnswerUpdateManyWithWhereWithoutExamSessionInput]
  deleteMany: [ExamAnswerScalarWhereInput]
}

input ExamAnswerUncheckedUpdateWithoutExamInput {
  id: StringFieldUpdateOperationsInput
  grade: FloatFieldUpdateOperationsInput
  finishCalculation: BoolFieldUpdateOperationsInput
  examSessionId: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ExamAnswerUncheckedUpdateWithoutExamSessionInput {
  id: StringFieldUpdateOperationsInput
  examId: StringFieldUpdateOperationsInput
  grade: FloatFieldUpdateOperationsInput
  finishCalculation: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ExamAnswerUpdateInput {
  id: StringFieldUpdateOperationsInput
  exam: ExamUpdateOneRequiredWithoutExamAnswersInput
  grade: FloatFieldUpdateOperationsInput
  finishCalculation: BoolFieldUpdateOperationsInput
  examSession: ExamSessionUpdateOneWithoutExamAnswersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ExamAnswerUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  grade: FloatFieldUpdateOperationsInput
  finishCalculation: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ExamAnswerUpdateManyWithoutExamInput {
  create: [ExamAnswerCreateWithoutExamInput]
  connectOrCreate: [ExamAnswerCreateOrConnectWithoutExamInput]
  upsert: [ExamAnswerUpsertWithWhereUniqueWithoutExamInput]
  createMany: ExamAnswerCreateManyExamInputEnvelope
  set: [ExamAnswerWhereUniqueInput]
  disconnect: [ExamAnswerWhereUniqueInput]
  delete: [ExamAnswerWhereUniqueInput]
  connect: [ExamAnswerWhereUniqueInput]
  update: [ExamAnswerUpdateWithWhereUniqueWithoutExamInput]
  updateMany: [ExamAnswerUpdateManyWithWhereWithoutExamInput]
  deleteMany: [ExamAnswerScalarWhereInput]
}

input ExamAnswerUpdateManyWithoutExamSessionInput {
  create: [ExamAnswerCreateWithoutExamSessionInput]
  connectOrCreate: [ExamAnswerCreateOrConnectWithoutExamSessionInput]
  upsert: [ExamAnswerUpsertWithWhereUniqueWithoutExamSessionInput]
  createMany: ExamAnswerCreateManyExamSessionInputEnvelope
  set: [ExamAnswerWhereUniqueInput]
  disconnect: [ExamAnswerWhereUniqueInput]
  delete: [ExamAnswerWhereUniqueInput]
  connect: [ExamAnswerWhereUniqueInput]
  update: [ExamAnswerUpdateWithWhereUniqueWithoutExamSessionInput]
  updateMany: [ExamAnswerUpdateManyWithWhereWithoutExamSessionInput]
  deleteMany: [ExamAnswerScalarWhereInput]
}

input ExamAnswerUpdateManyWithWhereWithoutExamInput {
  where: ExamAnswerScalarWhereInput!
  data: ExamAnswerUncheckedUpdateManyWithoutExamAnswersInput!
}

input ExamAnswerUpdateManyWithWhereWithoutExamSessionInput {
  where: ExamAnswerScalarWhereInput!
  data: ExamAnswerUncheckedUpdateManyWithoutExamAnswersInput!
}

input ExamAnswerUpdateWithoutExamInput {
  id: StringFieldUpdateOperationsInput
  grade: FloatFieldUpdateOperationsInput
  finishCalculation: BoolFieldUpdateOperationsInput
  examSession: ExamSessionUpdateOneWithoutExamAnswersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ExamAnswerUpdateWithoutExamSessionInput {
  id: StringFieldUpdateOperationsInput
  exam: ExamUpdateOneRequiredWithoutExamAnswersInput
  grade: FloatFieldUpdateOperationsInput
  finishCalculation: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ExamAnswerUpdateWithWhereUniqueWithoutExamInput {
  where: ExamAnswerWhereUniqueInput!
  data: ExamAnswerUncheckedUpdateWithoutExamInput!
}

input ExamAnswerUpdateWithWhereUniqueWithoutExamSessionInput {
  where: ExamAnswerWhereUniqueInput!
  data: ExamAnswerUncheckedUpdateWithoutExamSessionInput!
}

input ExamAnswerUpsertWithWhereUniqueWithoutExamInput {
  where: ExamAnswerWhereUniqueInput!
  update: ExamAnswerUncheckedUpdateWithoutExamInput!
  create: ExamAnswerUncheckedCreateWithoutExamInput!
}

input ExamAnswerUpsertWithWhereUniqueWithoutExamSessionInput {
  where: ExamAnswerWhereUniqueInput!
  update: ExamAnswerUncheckedUpdateWithoutExamSessionInput!
  create: ExamAnswerUncheckedCreateWithoutExamSessionInput!
}

input ExamAnswerWhereInput {
  AND: [ExamAnswerWhereInput]
  OR: [ExamAnswerWhereInput]
  NOT: [ExamAnswerWhereInput]
  id: StringFilter
  examId: StringFilter
  exam: ExamWhereInput
  grade: FloatFilter
  finishCalculation: BoolFilter
  examSessionId: StringNullableFilter
  examSession: ExamSessionWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ExamAnswerWhereUniqueInput {
  id: String
}

type ExamCountAggregateOutputType {
  id: Int!
  name: Int!
  userId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

input ExamCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

type ExamCountOutputType {
  examquestions: Int!
  examAnswers: Int!
}

input ExamCreateInput {
  id: String
  name: String!
  user: UserCreateNestedOneWithoutExaminationsInput!
  createdAt: DateTime
  updatedAt: DateTime
  examquestions: ExamQuestionCreateNestedManyWithoutExamInput
  examAnswers: ExamAnswerCreateNestedManyWithoutExamInput
}

input ExamCreateManyInput {
  id: String
  name: String!
  userId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamCreateManyUserInput {
  id: String
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamCreateManyUserInputEnvelope {
  data: ExamCreateManyUserInput!
  skipDuplicates: Boolean
}

input ExamCreateNestedManyWithoutUserInput {
  create: [ExamCreateWithoutUserInput]
  connectOrCreate: [ExamCreateOrConnectWithoutUserInput]
  createMany: ExamCreateManyUserInputEnvelope
  connect: [ExamWhereUniqueInput]
}

input ExamCreateNestedOneWithoutExamAnswersInput {
  create: ExamUncheckedCreateWithoutExamAnswersInput
  connectOrCreate: ExamCreateOrConnectWithoutExamAnswersInput
  connect: ExamWhereUniqueInput
}

input ExamCreateNestedOneWithoutExamquestionsInput {
  create: ExamUncheckedCreateWithoutExamquestionsInput
  connectOrCreate: ExamCreateOrConnectWithoutExamquestionsInput
  connect: ExamWhereUniqueInput
}

input ExamCreateOrConnectWithoutExamAnswersInput {
  where: ExamWhereUniqueInput!
  create: ExamUncheckedCreateWithoutExamAnswersInput!
}

input ExamCreateOrConnectWithoutExamquestionsInput {
  where: ExamWhereUniqueInput!
  create: ExamUncheckedCreateWithoutExamquestionsInput!
}

input ExamCreateOrConnectWithoutUserInput {
  where: ExamWhereUniqueInput!
  create: ExamUncheckedCreateWithoutUserInput!
}

input ExamCreateWithoutExamAnswersInput {
  id: String
  name: String!
  user: UserCreateNestedOneWithoutExaminationsInput!
  createdAt: DateTime
  updatedAt: DateTime
  examquestions: ExamQuestionCreateNestedManyWithoutExamInput
}

input ExamCreateWithoutExamquestionsInput {
  id: String
  name: String!
  user: UserCreateNestedOneWithoutExaminationsInput!
  createdAt: DateTime
  updatedAt: DateTime
  examAnswers: ExamAnswerCreateNestedManyWithoutExamInput
}

input ExamCreateWithoutUserInput {
  id: String
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  examquestions: ExamQuestionCreateNestedManyWithoutExamInput
  examAnswers: ExamAnswerCreateNestedManyWithoutExamInput
}

input ExamListRelationFilter {
  every: ExamWhereInput
  some: ExamWhereInput
  none: ExamWhereInput
}

type ExamMaxAggregateOutputType {
  id: String
  name: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

type ExamMinAggregateOutputType {
  id: String
  name: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ExamOrderByRelationAggregateInput {
  _count: SortOrder
}

input ExamOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: ExamCountOrderByAggregateInput
  _max: ExamMaxOrderByAggregateInput
  _min: ExamMinOrderByAggregateInput
}

input ExamOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  userId: SortOrder
  user: UserOrderByWithRelationInput
  createdAt: SortOrder
  updatedAt: SortOrder
  examquestions: ExamQuestionOrderByRelationAggregateInput
  examAnswers: ExamAnswerOrderByRelationAggregateInput
}

type ExamQuestion {
  id: String!
  questionId: String!
  question: Question!
  examId: String!
  exam: Exam!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ExamQuestionCountAggregateOutputType {
  id: Int!
  questionId: Int!
  examId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

input ExamQuestionCountOrderByAggregateInput {
  id: SortOrder
  questionId: SortOrder
  examId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ExamQuestionCreateInput {
  id: String
  question: QuestionCreateNestedOneWithoutExamquestionsInput!
  exam: ExamCreateNestedOneWithoutExamquestionsInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamQuestionCreateManyExamInput {
  id: String
  questionId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamQuestionCreateManyExamInputEnvelope {
  data: ExamQuestionCreateManyExamInput!
  skipDuplicates: Boolean
}

input ExamQuestionCreateManyInput {
  id: String
  questionId: String!
  examId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamQuestionCreateManyQuestionInput {
  id: String
  examId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamQuestionCreateManyQuestionInputEnvelope {
  data: ExamQuestionCreateManyQuestionInput!
  skipDuplicates: Boolean
}

input ExamQuestionCreateNestedManyWithoutExamInput {
  create: [ExamQuestionCreateWithoutExamInput]
  connectOrCreate: [ExamQuestionCreateOrConnectWithoutExamInput]
  createMany: ExamQuestionCreateManyExamInputEnvelope
  connect: [ExamQuestionWhereUniqueInput]
}

input ExamQuestionCreateNestedManyWithoutQuestionInput {
  create: [ExamQuestionCreateWithoutQuestionInput]
  connectOrCreate: [ExamQuestionCreateOrConnectWithoutQuestionInput]
  createMany: ExamQuestionCreateManyQuestionInputEnvelope
  connect: [ExamQuestionWhereUniqueInput]
}

input ExamQuestionCreateOrConnectWithoutExamInput {
  where: ExamQuestionWhereUniqueInput!
  create: ExamQuestionUncheckedCreateWithoutExamInput!
}

input ExamQuestionCreateOrConnectWithoutQuestionInput {
  where: ExamQuestionWhereUniqueInput!
  create: ExamQuestionUncheckedCreateWithoutQuestionInput!
}

input ExamQuestionCreateWithoutExamInput {
  id: String
  question: QuestionCreateNestedOneWithoutExamquestionsInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamQuestionCreateWithoutQuestionInput {
  id: String
  exam: ExamCreateNestedOneWithoutExamquestionsInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamQuestionListRelationFilter {
  every: ExamQuestionWhereInput
  some: ExamQuestionWhereInput
  none: ExamQuestionWhereInput
}

type ExamQuestionMaxAggregateOutputType {
  id: String
  questionId: String
  examId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamQuestionMaxOrderByAggregateInput {
  id: SortOrder
  questionId: SortOrder
  examId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

type ExamQuestionMinAggregateOutputType {
  id: String
  questionId: String
  examId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamQuestionMinOrderByAggregateInput {
  id: SortOrder
  questionId: SortOrder
  examId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ExamQuestionOrderByRelationAggregateInput {
  _count: SortOrder
}

input ExamQuestionOrderByWithAggregationInput {
  id: SortOrder
  questionId: SortOrder
  examId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: ExamQuestionCountOrderByAggregateInput
  _max: ExamQuestionMaxOrderByAggregateInput
  _min: ExamQuestionMinOrderByAggregateInput
}

input ExamQuestionOrderByWithRelationInput {
  id: SortOrder
  questionId: SortOrder
  question: QuestionOrderByWithRelationInput
  examId: SortOrder
  exam: ExamOrderByWithRelationInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

enum ExamQuestionScalarFieldEnum {
  id
  questionId
  examId
  createdAt
  updatedAt
}

input ExamQuestionScalarWhereInput {
  AND: [ExamQuestionScalarWhereInput]
  OR: [ExamQuestionScalarWhereInput]
  NOT: [ExamQuestionScalarWhereInput]
  id: StringFilter
  questionId: StringFilter
  examId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ExamQuestionScalarWhereWithAggregatesInput {
  AND: [ExamQuestionScalarWhereWithAggregatesInput]
  OR: [ExamQuestionScalarWhereWithAggregatesInput]
  NOT: [ExamQuestionScalarWhereWithAggregatesInput]
  id: StringWithAggregatesFilter
  questionId: StringWithAggregatesFilter
  examId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input ExamQuestionUncheckedCreateInput {
  id: String
  questionId: String!
  examId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamQuestionUncheckedCreateNestedManyWithoutExamInput {
  create: [ExamQuestionCreateWithoutExamInput]
  connectOrCreate: [ExamQuestionCreateOrConnectWithoutExamInput]
  createMany: ExamQuestionCreateManyExamInputEnvelope
  connect: [ExamQuestionWhereUniqueInput]
}

input ExamQuestionUncheckedCreateNestedManyWithoutQuestionInput {
  create: [ExamQuestionCreateWithoutQuestionInput]
  connectOrCreate: [ExamQuestionCreateOrConnectWithoutQuestionInput]
  createMany: ExamQuestionCreateManyQuestionInputEnvelope
  connect: [ExamQuestionWhereUniqueInput]
}

input ExamQuestionUncheckedCreateWithoutExamInput {
  id: String
  questionId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamQuestionUncheckedCreateWithoutQuestionInput {
  id: String
  examId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input ExamQuestionUncheckedUpdateInput {
  id: StringFieldUpdateOperationsInput
  questionId: StringFieldUpdateOperationsInput
  examId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ExamQuestionUncheckedUpdateManyInput {
  id: StringFieldUpdateOperationsInput
  questionId: StringFieldUpdateOperationsInput
  examId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ExamQuestionUncheckedUpdateManyWithoutExamInput {
  create: [ExamQuestionCreateWithoutExamInput]
  connectOrCreate: [ExamQuestionCreateOrConnectWithoutExamInput]
  upsert: [ExamQuestionUpsertWithWhereUniqueWithoutExamInput]
  createMany: ExamQuestionCreateManyExamInputEnvelope
  set: [ExamQuestionWhereUniqueInput]
  disconnect: [ExamQuestionWhereUniqueInput]
  delete: [ExamQuestionWhereUniqueInput]
  connect: [ExamQuestionWhereUniqueInput]
  update: [ExamQuestionUpdateWithWhereUniqueWithoutExamInput]
  updateMany: [ExamQuestionUpdateManyWithWhereWithoutExamInput]
  deleteMany: [ExamQuestionScalarWhereInput]
}

input ExamQuestionUncheckedUpdateManyWithoutExamquestionsInput {
  id: StringFieldUpdateOperationsInput
  questionId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ExamQuestionUncheckedUpdateManyWithoutQuestionInput {
  create: [ExamQuestionCreateWithoutQuestionInput]
  connectOrCreate: [ExamQuestionCreateOrConnectWithoutQuestionInput]
  upsert: [ExamQuestionUpsertWithWhereUniqueWithoutQuestionInput]
  createMany: ExamQuestionCreateManyQuestionInputEnvelope
  set: [ExamQuestionWhereUniqueInput]
  disconnect: [ExamQuestionWhereUniqueInput]
  delete: [ExamQuestionWhereUniqueInput]
  connect: [ExamQuestionWhereUniqueInput]
  update: [ExamQuestionUpdateWithWhereUniqueWithoutQuestionInput]
  updateMany: [ExamQuestionUpdateManyWithWhereWithoutQuestionInput]
  deleteMany: [ExamQuestionScalarWhereInput]
}

input ExamQuestionUncheckedUpdateWithoutExamInput {
  id: StringFieldUpdateOperationsInput
  questionId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ExamQuestionUncheckedUpdateWithoutQuestionInput {
  id: StringFieldUpdateOperationsInput
  examId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ExamQuestionUpdateInput {
  id: StringFieldUpdateOperationsInput
  question: QuestionUpdateOneRequiredWithoutExamquestionsInput
  exam: ExamUpdateOneRequiredWithoutExamquestionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ExamQuestionUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ExamQuestionUpdateManyWithoutExamInput {
  create: [ExamQuestionCreateWithoutExamInput]
  connectOrCreate: [ExamQuestionCreateOrConnectWithoutExamInput]
  upsert: [ExamQuestionUpsertWithWhereUniqueWithoutExamInput]
  createMany: ExamQuestionCreateManyExamInputEnvelope
  set: [ExamQuestionWhereUniqueInput]
  disconnect: [ExamQuestionWhereUniqueInput]
  delete: [ExamQuestionWhereUniqueInput]
  connect: [ExamQuestionWhereUniqueInput]
  update: [ExamQuestionUpdateWithWhereUniqueWithoutExamInput]
  updateMany: [ExamQuestionUpdateManyWithWhereWithoutExamInput]
  deleteMany: [ExamQuestionScalarWhereInput]
}

input ExamQuestionUpdateManyWithoutQuestionInput {
  create: [ExamQuestionCreateWithoutQuestionInput]
  connectOrCreate: [ExamQuestionCreateOrConnectWithoutQuestionInput]
  upsert: [ExamQuestionUpsertWithWhereUniqueWithoutQuestionInput]
  createMany: ExamQuestionCreateManyQuestionInputEnvelope
  set: [ExamQuestionWhereUniqueInput]
  disconnect: [ExamQuestionWhereUniqueInput]
  delete: [ExamQuestionWhereUniqueInput]
  connect: [ExamQuestionWhereUniqueInput]
  update: [ExamQuestionUpdateWithWhereUniqueWithoutQuestionInput]
  updateMany: [ExamQuestionUpdateManyWithWhereWithoutQuestionInput]
  deleteMany: [ExamQuestionScalarWhereInput]
}

input ExamQuestionUpdateManyWithWhereWithoutExamInput {
  where: ExamQuestionScalarWhereInput!
  data: ExamQuestionUncheckedUpdateManyWithoutExamquestionsInput!
}

input ExamQuestionUpdateManyWithWhereWithoutQuestionInput {
  where: ExamQuestionScalarWhereInput!
  data: ExamQuestionUncheckedUpdateManyWithoutExamquestionsInput!
}

input ExamQuestionUpdateWithoutExamInput {
  id: StringFieldUpdateOperationsInput
  question: QuestionUpdateOneRequiredWithoutExamquestionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ExamQuestionUpdateWithoutQuestionInput {
  id: StringFieldUpdateOperationsInput
  exam: ExamUpdateOneRequiredWithoutExamquestionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ExamQuestionUpdateWithWhereUniqueWithoutExamInput {
  where: ExamQuestionWhereUniqueInput!
  data: ExamQuestionUncheckedUpdateWithoutExamInput!
}

input ExamQuestionUpdateWithWhereUniqueWithoutQuestionInput {
  where: ExamQuestionWhereUniqueInput!
  data: ExamQuestionUncheckedUpdateWithoutQuestionInput!
}

input ExamQuestionUpsertWithWhereUniqueWithoutExamInput {
  where: ExamQuestionWhereUniqueInput!
  update: ExamQuestionUncheckedUpdateWithoutExamInput!
  create: ExamQuestionUncheckedCreateWithoutExamInput!
}

input ExamQuestionUpsertWithWhereUniqueWithoutQuestionInput {
  where: ExamQuestionWhereUniqueInput!
  update: ExamQuestionUncheckedUpdateWithoutQuestionInput!
  create: ExamQuestionUncheckedCreateWithoutQuestionInput!
}

input ExamQuestionWhereInput {
  AND: [ExamQuestionWhereInput]
  OR: [ExamQuestionWhereInput]
  NOT: [ExamQuestionWhereInput]
  id: StringFilter
  questionId: StringFilter
  question: QuestionWhereInput
  examId: StringFilter
  exam: ExamWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ExamQuestionWhereUniqueInput {
  id: String
}

input ExamRelationFilter {
  is: ExamWhereInput
  isNot: ExamWhereInput
}

enum ExamScalarFieldEnum {
  id
  name
  userId
  createdAt
  updatedAt
}

input ExamScalarWhereInput {
  AND: [ExamScalarWhereInput]
  OR: [ExamScalarWhereInput]
  NOT: [ExamScalarWhereInput]
  id: StringFilter
  name: StringFilter
  userId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ExamScalarWhereWithAggregatesInput {
  AND: [ExamScalarWhereWithAggregatesInput]
  OR: [ExamScalarWhereWithAggregatesInput]
  NOT: [ExamScalarWhereWithAggregatesInput]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type ExamSession {
  id: String!
  name: String!
  openAt: DateTime
  closeAt: DateTime
  maxPlayer: Int
  password: String
  userId: String!
  user: User!
  examAnswers(where: ExamAnswerWhereInput, orderBy: ExamAnswerOrderByWithRelationInput, cursor: ExamAnswerWhereUniqueInput, take: Int, skip: Int, distinct: ExamAnswerScalarFieldEnum): [ExamAnswer!]!
  _count: ExamSessionCountOutputType!
}

type ExamSessionAvgAggregateOutputType {
  maxPlayer: Float
}

input ExamSessionAvgOrderByAggregateInput {
  maxPlayer: SortOrder
}

type ExamSessionCountAggregateOutputType {
  id: Int!
  name: Int!
  openAt: Int!
  closeAt: Int!
  maxPlayer: Int!
  userId: Int!
  _all: Int!
}

input ExamSessionCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  openAt: SortOrder
  closeAt: SortOrder
  maxPlayer: SortOrder
  userId: SortOrder
}

type ExamSessionCountOutputType {
  examAnswers: Int!
}

input ExamSessionCreateInput {
  id: String
  name: String!
  openAt: DateTime
  closeAt: DateTime
  maxPlayer: Int
  user: UserCreateNestedOneWithoutExamsessionsInput!
  examAnswers: ExamAnswerCreateNestedManyWithoutExamSessionInput
}

input ExamSessionCreateManyInput {
  id: String
  name: String!
  openAt: DateTime
  closeAt: DateTime
  maxPlayer: Int
  userId: String!
}

input ExamSessionCreateManyUserInput {
  id: String
  name: String!
  openAt: DateTime
  closeAt: DateTime
  maxPlayer: Int
}

input ExamSessionCreateManyUserInputEnvelope {
  data: ExamSessionCreateManyUserInput!
  skipDuplicates: Boolean
}

input ExamSessionCreateNestedManyWithoutUserInput {
  create: [ExamSessionCreateWithoutUserInput]
  connectOrCreate: [ExamSessionCreateOrConnectWithoutUserInput]
  createMany: ExamSessionCreateManyUserInputEnvelope
  connect: [ExamSessionWhereUniqueInput]
}

input ExamSessionCreateNestedOneWithoutExamAnswersInput {
  create: ExamSessionUncheckedCreateWithoutExamAnswersInput
  connectOrCreate: ExamSessionCreateOrConnectWithoutExamAnswersInput
  connect: ExamSessionWhereUniqueInput
}

input ExamSessionCreateOrConnectWithoutExamAnswersInput {
  where: ExamSessionWhereUniqueInput!
  create: ExamSessionUncheckedCreateWithoutExamAnswersInput!
}

input ExamSessionCreateOrConnectWithoutUserInput {
  where: ExamSessionWhereUniqueInput!
  create: ExamSessionUncheckedCreateWithoutUserInput!
}

input ExamSessionCreateWithoutExamAnswersInput {
  id: String
  name: String!
  openAt: DateTime
  closeAt: DateTime
  maxPlayer: Int
  user: UserCreateNestedOneWithoutExamsessionsInput!
}

input ExamSessionCreateWithoutUserInput {
  id: String
  name: String!
  openAt: DateTime
  closeAt: DateTime
  maxPlayer: Int
  examAnswers: ExamAnswerCreateNestedManyWithoutExamSessionInput
}

input ExamSessionListRelationFilter {
  every: ExamSessionWhereInput
  some: ExamSessionWhereInput
  none: ExamSessionWhereInput
}

type ExamSessionMaxAggregateOutputType {
  id: String
  name: String
  openAt: DateTime
  closeAt: DateTime
  maxPlayer: Int
  userId: String
}

input ExamSessionMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  openAt: SortOrder
  closeAt: SortOrder
  maxPlayer: SortOrder
  userId: SortOrder
}

type ExamSessionMinAggregateOutputType {
  id: String
  name: String
  openAt: DateTime
  closeAt: DateTime
  maxPlayer: Int
  userId: String
}

input ExamSessionMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  openAt: SortOrder
  closeAt: SortOrder
  maxPlayer: SortOrder
  userId: SortOrder
}

input ExamSessionOrderByRelationAggregateInput {
  _count: SortOrder
}

input ExamSessionOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  openAt: SortOrder
  closeAt: SortOrder
  maxPlayer: SortOrder
  userId: SortOrder
  _count: ExamSessionCountOrderByAggregateInput
  _avg: ExamSessionAvgOrderByAggregateInput
  _max: ExamSessionMaxOrderByAggregateInput
  _min: ExamSessionMinOrderByAggregateInput
  _sum: ExamSessionSumOrderByAggregateInput
}

input ExamSessionOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  openAt: SortOrder
  closeAt: SortOrder
  maxPlayer: SortOrder
  userId: SortOrder
  user: UserOrderByWithRelationInput
  examAnswers: ExamAnswerOrderByRelationAggregateInput
}

input ExamSessionRelationFilter {
  is: ExamSessionWhereInput
  isNot: ExamSessionWhereInput
}

enum ExamSessionScalarFieldEnum {
  id
  name
  openAt
  closeAt
  maxPlayer
  password
  userId
}

input ExamSessionScalarWhereInput {
  AND: [ExamSessionScalarWhereInput]
  OR: [ExamSessionScalarWhereInput]
  NOT: [ExamSessionScalarWhereInput]
  id: StringFilter
  name: StringFilter
  openAt: DateTimeNullableFilter
  closeAt: DateTimeNullableFilter
  maxPlayer: IntNullableFilter
  userId: StringFilter
}

input ExamSessionScalarWhereWithAggregatesInput {
  AND: [ExamSessionScalarWhereWithAggregatesInput]
  OR: [ExamSessionScalarWhereWithAggregatesInput]
  NOT: [ExamSessionScalarWhereWithAggregatesInput]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  openAt: DateTimeNullableWithAggregatesFilter
  closeAt: DateTimeNullableWithAggregatesFilter
  maxPlayer: IntNullableWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type ExamSessionSumAggregateOutputType {
  maxPlayer: Int
}

input ExamSessionSumOrderByAggregateInput {
  maxPlayer: SortOrder
}

input ExamSessionUncheckedCreateInput {
  id: String
  name: String!
  openAt: DateTime
  closeAt: DateTime
  maxPlayer: Int
  userId: String!
  examAnswers: ExamAnswerUncheckedCreateNestedManyWithoutExamSessionInput
}

input ExamSessionUncheckedCreateNestedManyWithoutUserInput {
  create: [ExamSessionCreateWithoutUserInput]
  connectOrCreate: [ExamSessionCreateOrConnectWithoutUserInput]
  createMany: ExamSessionCreateManyUserInputEnvelope
  connect: [ExamSessionWhereUniqueInput]
}

input ExamSessionUncheckedCreateWithoutExamAnswersInput {
  id: String
  name: String!
  openAt: DateTime
  closeAt: DateTime
  maxPlayer: Int
  userId: String!
}

input ExamSessionUncheckedCreateWithoutUserInput {
  id: String
  name: String!
  openAt: DateTime
  closeAt: DateTime
  maxPlayer: Int
  examAnswers: ExamAnswerUncheckedCreateNestedManyWithoutExamSessionInput
}

input ExamSessionUncheckedUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  openAt: NullableDateTimeFieldUpdateOperationsInput
  closeAt: NullableDateTimeFieldUpdateOperationsInput
  maxPlayer: NullableIntFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
  examAnswers: ExamAnswerUncheckedUpdateManyWithoutExamSessionInput
}

input ExamSessionUncheckedUpdateManyInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  openAt: NullableDateTimeFieldUpdateOperationsInput
  closeAt: NullableDateTimeFieldUpdateOperationsInput
  maxPlayer: NullableIntFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input ExamSessionUncheckedUpdateManyWithoutExamsessionsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  openAt: NullableDateTimeFieldUpdateOperationsInput
  closeAt: NullableDateTimeFieldUpdateOperationsInput
  maxPlayer: NullableIntFieldUpdateOperationsInput
}

input ExamSessionUncheckedUpdateManyWithoutUserInput {
  create: [ExamSessionCreateWithoutUserInput]
  connectOrCreate: [ExamSessionCreateOrConnectWithoutUserInput]
  upsert: [ExamSessionUpsertWithWhereUniqueWithoutUserInput]
  createMany: ExamSessionCreateManyUserInputEnvelope
  set: [ExamSessionWhereUniqueInput]
  disconnect: [ExamSessionWhereUniqueInput]
  delete: [ExamSessionWhereUniqueInput]
  connect: [ExamSessionWhereUniqueInput]
  update: [ExamSessionUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [ExamSessionUpdateManyWithWhereWithoutUserInput]
  deleteMany: [ExamSessionScalarWhereInput]
}

input ExamSessionUncheckedUpdateWithoutExamAnswersInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  openAt: NullableDateTimeFieldUpdateOperationsInput
  closeAt: NullableDateTimeFieldUpdateOperationsInput
  maxPlayer: NullableIntFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input ExamSessionUncheckedUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  openAt: NullableDateTimeFieldUpdateOperationsInput
  closeAt: NullableDateTimeFieldUpdateOperationsInput
  maxPlayer: NullableIntFieldUpdateOperationsInput
  examAnswers: ExamAnswerUncheckedUpdateManyWithoutExamSessionInput
}

input ExamSessionUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  openAt: NullableDateTimeFieldUpdateOperationsInput
  closeAt: NullableDateTimeFieldUpdateOperationsInput
  maxPlayer: NullableIntFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutExamsessionsInput
  examAnswers: ExamAnswerUpdateManyWithoutExamSessionInput
}

input ExamSessionUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  openAt: NullableDateTimeFieldUpdateOperationsInput
  closeAt: NullableDateTimeFieldUpdateOperationsInput
  maxPlayer: NullableIntFieldUpdateOperationsInput
}

input ExamSessionUpdateManyWithoutUserInput {
  create: [ExamSessionCreateWithoutUserInput]
  connectOrCreate: [ExamSessionCreateOrConnectWithoutUserInput]
  upsert: [ExamSessionUpsertWithWhereUniqueWithoutUserInput]
  createMany: ExamSessionCreateManyUserInputEnvelope
  set: [ExamSessionWhereUniqueInput]
  disconnect: [ExamSessionWhereUniqueInput]
  delete: [ExamSessionWhereUniqueInput]
  connect: [ExamSessionWhereUniqueInput]
  update: [ExamSessionUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [ExamSessionUpdateManyWithWhereWithoutUserInput]
  deleteMany: [ExamSessionScalarWhereInput]
}

input ExamSessionUpdateManyWithWhereWithoutUserInput {
  where: ExamSessionScalarWhereInput!
  data: ExamSessionUncheckedUpdateManyWithoutExamsessionsInput!
}

input ExamSessionUpdateOneWithoutExamAnswersInput {
  create: ExamSessionUncheckedCreateWithoutExamAnswersInput
  connectOrCreate: ExamSessionCreateOrConnectWithoutExamAnswersInput
  upsert: ExamSessionUpsertWithoutExamAnswersInput
  disconnect: Boolean
  delete: Boolean
  connect: ExamSessionWhereUniqueInput
  update: ExamSessionUncheckedUpdateWithoutExamAnswersInput
}

input ExamSessionUpdateWithoutExamAnswersInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  openAt: NullableDateTimeFieldUpdateOperationsInput
  closeAt: NullableDateTimeFieldUpdateOperationsInput
  maxPlayer: NullableIntFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutExamsessionsInput
}

input ExamSessionUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  openAt: NullableDateTimeFieldUpdateOperationsInput
  closeAt: NullableDateTimeFieldUpdateOperationsInput
  maxPlayer: NullableIntFieldUpdateOperationsInput
  examAnswers: ExamAnswerUpdateManyWithoutExamSessionInput
}

input ExamSessionUpdateWithWhereUniqueWithoutUserInput {
  where: ExamSessionWhereUniqueInput!
  data: ExamSessionUncheckedUpdateWithoutUserInput!
}

input ExamSessionUpsertWithoutExamAnswersInput {
  update: ExamSessionUncheckedUpdateWithoutExamAnswersInput!
  create: ExamSessionUncheckedCreateWithoutExamAnswersInput!
}

input ExamSessionUpsertWithWhereUniqueWithoutUserInput {
  where: ExamSessionWhereUniqueInput!
  update: ExamSessionUncheckedUpdateWithoutUserInput!
  create: ExamSessionUncheckedCreateWithoutUserInput!
}

input ExamSessionWhereInput {
  AND: [ExamSessionWhereInput]
  OR: [ExamSessionWhereInput]
  NOT: [ExamSessionWhereInput]
  id: StringFilter
  name: StringFilter
  openAt: DateTimeNullableFilter
  closeAt: DateTimeNullableFilter
  maxPlayer: IntNullableFilter
  userId: StringFilter
  user: UserWhereInput
  examAnswers: ExamAnswerListRelationFilter
}

input ExamSessionWhereUniqueInput {
  id: String
}

input ExamUncheckedCreateInput {
  id: String
  name: String!
  userId: String!
  createdAt: DateTime
  updatedAt: DateTime
  examquestions: ExamQuestionUncheckedCreateNestedManyWithoutExamInput
  examAnswers: ExamAnswerUncheckedCreateNestedManyWithoutExamInput
}

input ExamUncheckedCreateNestedManyWithoutUserInput {
  create: [ExamCreateWithoutUserInput]
  connectOrCreate: [ExamCreateOrConnectWithoutUserInput]
  createMany: ExamCreateManyUserInputEnvelope
  connect: [ExamWhereUniqueInput]
}

input ExamUncheckedCreateWithoutExamAnswersInput {
  id: String
  name: String!
  userId: String!
  createdAt: DateTime
  updatedAt: DateTime
  examquestions: ExamQuestionUncheckedCreateNestedManyWithoutExamInput
}

input ExamUncheckedCreateWithoutExamquestionsInput {
  id: String
  name: String!
  userId: String!
  createdAt: DateTime
  updatedAt: DateTime
  examAnswers: ExamAnswerUncheckedCreateNestedManyWithoutExamInput
}

input ExamUncheckedCreateWithoutUserInput {
  id: String
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  examquestions: ExamQuestionUncheckedCreateNestedManyWithoutExamInput
  examAnswers: ExamAnswerUncheckedCreateNestedManyWithoutExamInput
}

input ExamUncheckedUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  examquestions: ExamQuestionUncheckedUpdateManyWithoutExamInput
  examAnswers: ExamAnswerUncheckedUpdateManyWithoutExamInput
}

input ExamUncheckedUpdateManyInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ExamUncheckedUpdateManyWithoutExaminationsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ExamUncheckedUpdateManyWithoutUserInput {
  create: [ExamCreateWithoutUserInput]
  connectOrCreate: [ExamCreateOrConnectWithoutUserInput]
  upsert: [ExamUpsertWithWhereUniqueWithoutUserInput]
  createMany: ExamCreateManyUserInputEnvelope
  set: [ExamWhereUniqueInput]
  disconnect: [ExamWhereUniqueInput]
  delete: [ExamWhereUniqueInput]
  connect: [ExamWhereUniqueInput]
  update: [ExamUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [ExamUpdateManyWithWhereWithoutUserInput]
  deleteMany: [ExamScalarWhereInput]
}

input ExamUncheckedUpdateWithoutExamAnswersInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  examquestions: ExamQuestionUncheckedUpdateManyWithoutExamInput
}

input ExamUncheckedUpdateWithoutExamquestionsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  examAnswers: ExamAnswerUncheckedUpdateManyWithoutExamInput
}

input ExamUncheckedUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  examquestions: ExamQuestionUncheckedUpdateManyWithoutExamInput
  examAnswers: ExamAnswerUncheckedUpdateManyWithoutExamInput
}

input ExamUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutExaminationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  examquestions: ExamQuestionUpdateManyWithoutExamInput
  examAnswers: ExamAnswerUpdateManyWithoutExamInput
}

input ExamUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ExamUpdateManyWithoutUserInput {
  create: [ExamCreateWithoutUserInput]
  connectOrCreate: [ExamCreateOrConnectWithoutUserInput]
  upsert: [ExamUpsertWithWhereUniqueWithoutUserInput]
  createMany: ExamCreateManyUserInputEnvelope
  set: [ExamWhereUniqueInput]
  disconnect: [ExamWhereUniqueInput]
  delete: [ExamWhereUniqueInput]
  connect: [ExamWhereUniqueInput]
  update: [ExamUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [ExamUpdateManyWithWhereWithoutUserInput]
  deleteMany: [ExamScalarWhereInput]
}

input ExamUpdateManyWithWhereWithoutUserInput {
  where: ExamScalarWhereInput!
  data: ExamUncheckedUpdateManyWithoutExaminationsInput!
}

input ExamUpdateOneRequiredWithoutExamAnswersInput {
  create: ExamUncheckedCreateWithoutExamAnswersInput
  connectOrCreate: ExamCreateOrConnectWithoutExamAnswersInput
  upsert: ExamUpsertWithoutExamAnswersInput
  connect: ExamWhereUniqueInput
  update: ExamUncheckedUpdateWithoutExamAnswersInput
}

input ExamUpdateOneRequiredWithoutExamquestionsInput {
  create: ExamUncheckedCreateWithoutExamquestionsInput
  connectOrCreate: ExamCreateOrConnectWithoutExamquestionsInput
  upsert: ExamUpsertWithoutExamquestionsInput
  connect: ExamWhereUniqueInput
  update: ExamUncheckedUpdateWithoutExamquestionsInput
}

input ExamUpdateWithoutExamAnswersInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutExaminationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  examquestions: ExamQuestionUpdateManyWithoutExamInput
}

input ExamUpdateWithoutExamquestionsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutExaminationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  examAnswers: ExamAnswerUpdateManyWithoutExamInput
}

input ExamUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  examquestions: ExamQuestionUpdateManyWithoutExamInput
  examAnswers: ExamAnswerUpdateManyWithoutExamInput
}

input ExamUpdateWithWhereUniqueWithoutUserInput {
  where: ExamWhereUniqueInput!
  data: ExamUncheckedUpdateWithoutUserInput!
}

input ExamUpsertWithoutExamAnswersInput {
  update: ExamUncheckedUpdateWithoutExamAnswersInput!
  create: ExamUncheckedCreateWithoutExamAnswersInput!
}

input ExamUpsertWithoutExamquestionsInput {
  update: ExamUncheckedUpdateWithoutExamquestionsInput!
  create: ExamUncheckedCreateWithoutExamquestionsInput!
}

input ExamUpsertWithWhereUniqueWithoutUserInput {
  where: ExamWhereUniqueInput!
  update: ExamUncheckedUpdateWithoutUserInput!
  create: ExamUncheckedCreateWithoutUserInput!
}

input ExamWhereInput {
  AND: [ExamWhereInput]
  OR: [ExamWhereInput]
  NOT: [ExamWhereInput]
  id: StringFilter
  name: StringFilter
  userId: StringFilter
  user: UserWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  examquestions: ExamQuestionListRelationFilter
  examAnswers: ExamAnswerListRelationFilter
}

input ExamWhereUniqueInput {
  id: String
}

input FloatFieldUpdateOperationsInput {
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input FloatFilter {
  equals: Float
  in: [Float]
  notIn: [Float]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input FloatWithAggregatesFilter {
  equals: Float
  in: [Float]
  notIn: [Float]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedFloatFilter
  _min: NestedFloatFilter
  _max: NestedFloatFilter
}

type IdentityFile {
  id: String!
  name: String!
  url: String!
  type: IdentityFileType!
  number: String!
  userId: String!
  user: User!
}

type IdentityFileCountAggregateOutputType {
  id: Int!
  name: Int!
  url: Int!
  type: Int!
  number: Int!
  userId: Int!
  _all: Int!
}

input IdentityFileCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  url: SortOrder
  type: SortOrder
  number: SortOrder
  userId: SortOrder
}

input IdentityFileCreateInput {
  id: String
  name: String!
  url: String!
  type: IdentityFileType!
  number: String!
  user: UserCreateNestedOneWithoutIdentityFilesInput!
}

input IdentityFileCreateManyInput {
  id: String
  name: String!
  url: String!
  type: IdentityFileType!
  number: String!
  userId: String!
}

input IdentityFileCreateManyUserInput {
  id: String
  name: String!
  url: String!
  type: IdentityFileType!
  number: String!
}

input IdentityFileCreateManyUserInputEnvelope {
  data: IdentityFileCreateManyUserInput!
  skipDuplicates: Boolean
}

input IdentityFileCreateNestedManyWithoutUserInput {
  create: [IdentityFileCreateWithoutUserInput]
  connectOrCreate: [IdentityFileCreateOrConnectWithoutUserInput]
  createMany: IdentityFileCreateManyUserInputEnvelope
  connect: [IdentityFileWhereUniqueInput]
}

input IdentityFileCreateOrConnectWithoutUserInput {
  where: IdentityFileWhereUniqueInput!
  create: IdentityFileUncheckedCreateWithoutUserInput!
}

input IdentityFileCreateWithoutUserInput {
  id: String
  name: String!
  url: String!
  type: IdentityFileType!
  number: String!
}

input IdentityFileListRelationFilter {
  every: IdentityFileWhereInput
  some: IdentityFileWhereInput
  none: IdentityFileWhereInput
}

type IdentityFileMaxAggregateOutputType {
  id: String
  name: String
  url: String
  type: IdentityFileType
  number: String
  userId: String
}

input IdentityFileMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  url: SortOrder
  type: SortOrder
  number: SortOrder
  userId: SortOrder
}

type IdentityFileMinAggregateOutputType {
  id: String
  name: String
  url: String
  type: IdentityFileType
  number: String
  userId: String
}

input IdentityFileMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  url: SortOrder
  type: SortOrder
  number: SortOrder
  userId: SortOrder
}

input IdentityFileOrderByRelationAggregateInput {
  _count: SortOrder
}

input IdentityFileOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  url: SortOrder
  type: SortOrder
  number: SortOrder
  userId: SortOrder
  _count: IdentityFileCountOrderByAggregateInput
  _max: IdentityFileMaxOrderByAggregateInput
  _min: IdentityFileMinOrderByAggregateInput
}

input IdentityFileOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  url: SortOrder
  type: SortOrder
  number: SortOrder
  userId: SortOrder
  user: UserOrderByWithRelationInput
}

enum IdentityFileScalarFieldEnum {
  id
  name
  url
  type
  number
  userId
}

input IdentityFileScalarWhereInput {
  AND: [IdentityFileScalarWhereInput]
  OR: [IdentityFileScalarWhereInput]
  NOT: [IdentityFileScalarWhereInput]
  id: StringFilter
  name: StringFilter
  url: StringFilter
  type: EnumIdentityFileTypeFilter
  number: StringFilter
  userId: StringFilter
}

input IdentityFileScalarWhereWithAggregatesInput {
  AND: [IdentityFileScalarWhereWithAggregatesInput]
  OR: [IdentityFileScalarWhereWithAggregatesInput]
  NOT: [IdentityFileScalarWhereWithAggregatesInput]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  url: StringWithAggregatesFilter
  type: EnumIdentityFileTypeWithAggregatesFilter
  number: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

enum IdentityFileType {
  KTP
  KK
  SIM
  PASSPORT
  OTHER
}

input IdentityFileUncheckedCreateInput {
  id: String
  name: String!
  url: String!
  type: IdentityFileType!
  number: String!
  userId: String!
}

input IdentityFileUncheckedCreateNestedManyWithoutUserInput {
  create: [IdentityFileCreateWithoutUserInput]
  connectOrCreate: [IdentityFileCreateOrConnectWithoutUserInput]
  createMany: IdentityFileCreateManyUserInputEnvelope
  connect: [IdentityFileWhereUniqueInput]
}

input IdentityFileUncheckedCreateWithoutUserInput {
  id: String
  name: String!
  url: String!
  type: IdentityFileType!
  number: String!
}

input IdentityFileUncheckedUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  type: EnumIdentityFileTypeFieldUpdateOperationsInput
  number: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input IdentityFileUncheckedUpdateManyInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  type: EnumIdentityFileTypeFieldUpdateOperationsInput
  number: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input IdentityFileUncheckedUpdateManyWithoutIdentityFilesInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  type: EnumIdentityFileTypeFieldUpdateOperationsInput
  number: StringFieldUpdateOperationsInput
}

input IdentityFileUncheckedUpdateManyWithoutUserInput {
  create: [IdentityFileCreateWithoutUserInput]
  connectOrCreate: [IdentityFileCreateOrConnectWithoutUserInput]
  upsert: [IdentityFileUpsertWithWhereUniqueWithoutUserInput]
  createMany: IdentityFileCreateManyUserInputEnvelope
  set: [IdentityFileWhereUniqueInput]
  disconnect: [IdentityFileWhereUniqueInput]
  delete: [IdentityFileWhereUniqueInput]
  connect: [IdentityFileWhereUniqueInput]
  update: [IdentityFileUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [IdentityFileUpdateManyWithWhereWithoutUserInput]
  deleteMany: [IdentityFileScalarWhereInput]
}

input IdentityFileUncheckedUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  type: EnumIdentityFileTypeFieldUpdateOperationsInput
  number: StringFieldUpdateOperationsInput
}

input IdentityFileUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  type: EnumIdentityFileTypeFieldUpdateOperationsInput
  number: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutIdentityFilesInput
}

input IdentityFileUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  type: EnumIdentityFileTypeFieldUpdateOperationsInput
  number: StringFieldUpdateOperationsInput
}

input IdentityFileUpdateManyWithoutUserInput {
  create: [IdentityFileCreateWithoutUserInput]
  connectOrCreate: [IdentityFileCreateOrConnectWithoutUserInput]
  upsert: [IdentityFileUpsertWithWhereUniqueWithoutUserInput]
  createMany: IdentityFileCreateManyUserInputEnvelope
  set: [IdentityFileWhereUniqueInput]
  disconnect: [IdentityFileWhereUniqueInput]
  delete: [IdentityFileWhereUniqueInput]
  connect: [IdentityFileWhereUniqueInput]
  update: [IdentityFileUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [IdentityFileUpdateManyWithWhereWithoutUserInput]
  deleteMany: [IdentityFileScalarWhereInput]
}

input IdentityFileUpdateManyWithWhereWithoutUserInput {
  where: IdentityFileScalarWhereInput!
  data: IdentityFileUncheckedUpdateManyWithoutIdentityFilesInput!
}

input IdentityFileUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  type: EnumIdentityFileTypeFieldUpdateOperationsInput
  number: StringFieldUpdateOperationsInput
}

input IdentityFileUpdateWithWhereUniqueWithoutUserInput {
  where: IdentityFileWhereUniqueInput!
  data: IdentityFileUncheckedUpdateWithoutUserInput!
}

input IdentityFileUpsertWithWhereUniqueWithoutUserInput {
  where: IdentityFileWhereUniqueInput!
  update: IdentityFileUncheckedUpdateWithoutUserInput!
  create: IdentityFileUncheckedCreateWithoutUserInput!
}

input IdentityFileWhereInput {
  AND: [IdentityFileWhereInput]
  OR: [IdentityFileWhereInput]
  NOT: [IdentityFileWhereInput]
  id: StringFilter
  name: StringFilter
  url: StringFilter
  type: EnumIdentityFileTypeFilter
  number: StringFilter
  userId: StringFilter
  user: UserWhereInput
}

input IdentityFileWhereUniqueInput {
  id: String
}

input IntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input IntFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input IntNullableListFilter {
  equals: [Int]
  has: Int
  hasEvery: [Int]
  hasSome: [Int]
  isEmpty: Boolean
}

input IntNullableWithAggregatesFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _avg: NestedFloatNullableFilter
  _sum: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _max: NestedIntNullableFilter
}

input IntWithAggregatesFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedIntFilter
  _min: NestedIntFilter
  _max: NestedIntFilter
}

"""Json custom scalar type"""
scalar Json

type Mutation {
  createOneQuestion(data: QuestionCreateInput!): Question!
  updateOneQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question!
  upsertOneQuestion(where: QuestionWhereUniqueInput!, create: QuestionCreateInput!, update: QuestionUpdateInput!): Question!
  deleteOneQuestion(where: QuestionWhereUniqueInput!): Question
  updateManyQuestion(data: QuestionUpdateManyMutationInput!, where: QuestionWhereInput): BatchPayload!
  deleteManyQuestion(where: QuestionWhereInput): BatchPayload!
  createOneExamAnswer(data: ExamAnswerCreateInput!): ExamAnswer!
  updateOneExamAnswer(data: ExamAnswerUpdateInput!, where: ExamAnswerWhereUniqueInput!): ExamAnswer!
  upsertOneExamAnswer(where: ExamAnswerWhereUniqueInput!, create: ExamAnswerCreateInput!, update: ExamAnswerUpdateInput!): ExamAnswer!
  deleteOneExamAnswer(where: ExamAnswerWhereUniqueInput!): ExamAnswer
  updateManyExamAnswer(data: ExamAnswerUpdateManyMutationInput!, where: ExamAnswerWhereInput): BatchPayload!
  deleteManyExamAnswer(where: ExamAnswerWhereInput): BatchPayload!
  createOneExamQuestion(data: ExamQuestionCreateInput!): ExamQuestion!
  updateOneExamQuestion(data: ExamQuestionUpdateInput!, where: ExamQuestionWhereUniqueInput!): ExamQuestion!
  upsertOneExamQuestion(where: ExamQuestionWhereUniqueInput!, create: ExamQuestionCreateInput!, update: ExamQuestionUpdateInput!): ExamQuestion!
  deleteOneExamQuestion(where: ExamQuestionWhereUniqueInput!): ExamQuestion
  updateManyExamQuestion(data: ExamQuestionUpdateManyMutationInput!, where: ExamQuestionWhereInput): BatchPayload!
  deleteManyExamQuestion(where: ExamQuestionWhereInput): BatchPayload!
  createOneExamSession(data: ExamSessionCreateInput!): ExamSession!
  updateOneExamSession(data: ExamSessionUpdateInput!, where: ExamSessionWhereUniqueInput!): ExamSession!
  upsertOneExamSession(where: ExamSessionWhereUniqueInput!, create: ExamSessionCreateInput!, update: ExamSessionUpdateInput!): ExamSession!
  deleteOneExamSession(where: ExamSessionWhereUniqueInput!): ExamSession
  updateManyExamSession(data: ExamSessionUpdateManyMutationInput!, where: ExamSessionWhereInput): BatchPayload!
  deleteManyExamSession(where: ExamSessionWhereInput): BatchPayload!
  createOneExam(data: ExamCreateInput!): Exam!
  updateOneExam(data: ExamUpdateInput!, where: ExamWhereUniqueInput!): Exam!
  upsertOneExam(where: ExamWhereUniqueInput!, create: ExamCreateInput!, update: ExamUpdateInput!): Exam!
  deleteOneExam(where: ExamWhereUniqueInput!): Exam
  updateManyExam(data: ExamUpdateManyMutationInput!, where: ExamWhereInput): BatchPayload!
  deleteManyExam(where: ExamWhereInput): BatchPayload!
  createOneChat(data: ChatCreateInput!): Chat!
  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat!
  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat!
  deleteOneChat(where: ChatWhereUniqueInput!): Chat
  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): BatchPayload!
  deleteManyChat(where: ChatWhereInput): BatchPayload!
  createOneChatSession(data: ChatSessionCreateInput!): ChatSession!
  updateOneChatSession(data: ChatSessionUpdateInput!, where: ChatSessionWhereUniqueInput!): ChatSession!
  upsertOneChatSession(where: ChatSessionWhereUniqueInput!, create: ChatSessionCreateInput!, update: ChatSessionUpdateInput!): ChatSession!
  deleteOneChatSession(where: ChatSessionWhereUniqueInput!): ChatSession
  updateManyChatSession(data: ChatSessionUpdateManyMutationInput!, where: ChatSessionWhereInput): BatchPayload!
  deleteManyChatSession(where: ChatSessionWhereInput): BatchPayload!
  createOneClassroomStudent(data: ClassroomStudentCreateInput!): ClassroomStudent!
  updateOneClassroomStudent(data: ClassroomStudentUpdateInput!, where: ClassroomStudentWhereUniqueInput!): ClassroomStudent!
  upsertOneClassroomStudent(where: ClassroomStudentWhereUniqueInput!, create: ClassroomStudentCreateInput!, update: ClassroomStudentUpdateInput!): ClassroomStudent!
  deleteOneClassroomStudent(where: ClassroomStudentWhereUniqueInput!): ClassroomStudent
  updateManyClassroomStudent(data: ClassroomStudentUpdateManyMutationInput!, where: ClassroomStudentWhereInput): BatchPayload!
  deleteManyClassroomStudent(where: ClassroomStudentWhereInput): BatchPayload!
  createOneClassroom(data: ClassroomCreateInput!): Classroom!
  updateOneClassroom(data: ClassroomUpdateInput!, where: ClassroomWhereUniqueInput!): Classroom!
  upsertOneClassroom(where: ClassroomWhereUniqueInput!, create: ClassroomCreateInput!, update: ClassroomUpdateInput!): Classroom!
  deleteOneClassroom(where: ClassroomWhereUniqueInput!): Classroom
  updateManyClassroom(data: ClassroomUpdateManyMutationInput!, where: ClassroomWhereInput): BatchPayload!
  deleteManyClassroom(where: ClassroomWhereInput): BatchPayload!
  createOneSchoolStaff(data: SchoolStaffCreateInput!): SchoolStaff!
  updateOneSchoolStaff(data: SchoolStaffUpdateInput!, where: SchoolStaffWhereUniqueInput!): SchoolStaff!
  upsertOneSchoolStaff(where: SchoolStaffWhereUniqueInput!, create: SchoolStaffCreateInput!, update: SchoolStaffUpdateInput!): SchoolStaff!
  deleteOneSchoolStaff(where: SchoolStaffWhereUniqueInput!): SchoolStaff
  updateManySchoolStaff(data: SchoolStaffUpdateManyMutationInput!, where: SchoolStaffWhereInput): BatchPayload!
  deleteManySchoolStaff(where: SchoolStaffWhereInput): BatchPayload!
  createOneSchool(data: SchoolCreateInput!): School!
  updateOneSchool(data: SchoolUpdateInput!, where: SchoolWhereUniqueInput!): School!
  upsertOneSchool(where: SchoolWhereUniqueInput!, create: SchoolCreateInput!, update: SchoolUpdateInput!): School!
  deleteOneSchool(where: SchoolWhereUniqueInput!): School
  updateManySchool(data: SchoolUpdateManyMutationInput!, where: SchoolWhereInput): BatchPayload!
  deleteManySchool(where: SchoolWhereInput): BatchPayload!
  createOneNotification(data: NotificationCreateInput!): Notification!
  updateOneNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification!
  upsertOneNotification(where: NotificationWhereUniqueInput!, create: NotificationCreateInput!, update: NotificationUpdateInput!): Notification!
  deleteOneNotification(where: NotificationWhereUniqueInput!): Notification
  updateManyNotification(data: NotificationUpdateManyMutationInput!, where: NotificationWhereInput): BatchPayload!
  deleteManyNotification(where: NotificationWhereInput): BatchPayload!
  createOneUser(data: UserCreateInput!): User!
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  createOneIdentityFile(data: IdentityFileCreateInput!): IdentityFile!
  updateOneIdentityFile(data: IdentityFileUpdateInput!, where: IdentityFileWhereUniqueInput!): IdentityFile!
  upsertOneIdentityFile(where: IdentityFileWhereUniqueInput!, create: IdentityFileCreateInput!, update: IdentityFileUpdateInput!): IdentityFile!
  deleteOneIdentityFile(where: IdentityFileWhereUniqueInput!): IdentityFile
  updateManyIdentityFile(data: IdentityFileUpdateManyMutationInput!, where: IdentityFileWhereInput): BatchPayload!
  deleteManyIdentityFile(where: IdentityFileWhereInput): BatchPayload!
  createOneRegency(data: RegencyCreateInput!): Regency!
  updateOneRegency(data: RegencyUpdateInput!, where: RegencyWhereUniqueInput!): Regency!
  upsertOneRegency(where: RegencyWhereUniqueInput!, create: RegencyCreateInput!, update: RegencyUpdateInput!): Regency!
  deleteOneRegency(where: RegencyWhereUniqueInput!): Regency
  updateManyRegency(data: RegencyUpdateManyMutationInput!, where: RegencyWhereInput): BatchPayload!
  deleteManyRegency(where: RegencyWhereInput): BatchPayload!
  createOneProvince(data: ProvinceCreateInput!): Province!
  updateOneProvince(data: ProvinceUpdateInput!, where: ProvinceWhereUniqueInput!): Province!
  upsertOneProvince(where: ProvinceWhereUniqueInput!, create: ProvinceCreateInput!, update: ProvinceUpdateInput!): Province!
  deleteOneProvince(where: ProvinceWhereUniqueInput!): Province
  updateManyProvince(data: ProvinceUpdateManyMutationInput!, where: ProvinceWhereInput): BatchPayload!
  deleteManyProvince(where: ProvinceWhereInput): BatchPayload!
  confirmVerification(type: VerifyType!, key: String!): VerificationResponse
  resendVerification(type: VerifyType!): VerificationResponse
  register(email: String!, password: String!, name: String!, phoneNumber: String!, address: String, provinceId: String!, regencyId: String!, role: Roles!, nrg: String, nisn: String, schoolId: String): Auth
  validate(email: String!): Auth
  login(email: String!, password: String!): Auth
  createNewSession(to: String!): ChatSession
  sendChat(to: String!, content: String!, type: ContentType!, file: Upload): Chat
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedBoolFilter
  _max: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableWithAggregatesFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedDateTimeNullableFilter
  _max: NestedDateTimeNullableFilter
}

input NestedDateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

input NestedEnumClassroomStudentStatusFilter {
  equals: ClassroomStudentStatus
  in: [ClassroomStudentStatus]
  notIn: [ClassroomStudentStatus]
  not: NestedEnumClassroomStudentStatusFilter
}

input NestedEnumClassroomStudentStatusWithAggregatesFilter {
  equals: ClassroomStudentStatus
  in: [ClassroomStudentStatus]
  notIn: [ClassroomStudentStatus]
  not: NestedEnumClassroomStudentStatusWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumClassroomStudentStatusFilter
  _max: NestedEnumClassroomStudentStatusFilter
}

input NestedEnumContentTypeFilter {
  equals: ContentType
  in: [ContentType]
  notIn: [ContentType]
  not: NestedEnumContentTypeFilter
}

input NestedEnumContentTypeWithAggregatesFilter {
  equals: ContentType
  in: [ContentType]
  notIn: [ContentType]
  not: NestedEnumContentTypeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumContentTypeFilter
  _max: NestedEnumContentTypeFilter
}

input NestedEnumIdentityFileTypeFilter {
  equals: IdentityFileType
  in: [IdentityFileType]
  notIn: [IdentityFileType]
  not: NestedEnumIdentityFileTypeFilter
}

input NestedEnumIdentityFileTypeWithAggregatesFilter {
  equals: IdentityFileType
  in: [IdentityFileType]
  notIn: [IdentityFileType]
  not: NestedEnumIdentityFileTypeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumIdentityFileTypeFilter
  _max: NestedEnumIdentityFileTypeFilter
}

input NestedEnumQuestionTypeFilter {
  equals: QuestionType
  in: [QuestionType]
  notIn: [QuestionType]
  not: NestedEnumQuestionTypeFilter
}

input NestedEnumQuestionTypeWithAggregatesFilter {
  equals: QuestionType
  in: [QuestionType]
  notIn: [QuestionType]
  not: NestedEnumQuestionTypeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumQuestionTypeFilter
  _max: NestedEnumQuestionTypeFilter
}

input NestedEnumRolesFilter {
  equals: Roles
  in: [Roles]
  notIn: [Roles]
  not: NestedEnumRolesFilter
}

input NestedEnumRolesWithAggregatesFilter {
  equals: Roles
  in: [Roles]
  notIn: [Roles]
  not: NestedEnumRolesWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumRolesFilter
  _max: NestedEnumRolesFilter
}

input NestedEnumVerifyTypeNullableFilter {
  equals: VerifyType
  in: [VerifyType]
  notIn: [VerifyType]
  not: NestedEnumVerifyTypeNullableFilter
}

input NestedEnumVerifyTypeNullableWithAggregatesFilter {
  equals: VerifyType
  in: [VerifyType]
  notIn: [VerifyType]
  not: NestedEnumVerifyTypeNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedEnumVerifyTypeNullableFilter
  _max: NestedEnumVerifyTypeNullableFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float]
  notIn: [Float]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedFloatNullableFilter {
  equals: Float
  in: [Float]
  notIn: [Float]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatNullableFilter
}

input NestedFloatWithAggregatesFilter {
  equals: Float
  in: [Float]
  notIn: [Float]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedFloatFilter
  _min: NestedFloatFilter
  _max: NestedFloatFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableWithAggregatesFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _avg: NestedFloatNullableFilter
  _sum: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _max: NestedIntNullableFilter
}

input NestedIntWithAggregatesFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedIntFilter
  _min: NestedIntFilter
  _max: NestedIntFilter
}

input NestedStringFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableWithAggregatesFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
}

input NestedStringWithAggregatesFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

type Notification {
  id: String!
  picturePath: String
  title: String!
  message: String!
  isRead: Boolean!
  followUpContext: String
  followUpData: String
  userId: String!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type NotificationCountAggregateOutputType {
  id: Int!
  picturePath: Int!
  title: Int!
  message: Int!
  isRead: Int!
  followUpContext: Int!
  followUpData: Int!
  userId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

input NotificationCountOrderByAggregateInput {
  id: SortOrder
  picturePath: SortOrder
  title: SortOrder
  message: SortOrder
  isRead: SortOrder
  followUpContext: SortOrder
  followUpData: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input NotificationCreateInput {
  id: String
  picturePath: String
  title: String!
  message: String!
  isRead: Boolean
  followUpContext: String
  followUpData: String
  user: UserCreateNestedOneWithoutNotificationsInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input NotificationCreateManyInput {
  id: String
  picturePath: String
  title: String!
  message: String!
  isRead: Boolean
  followUpContext: String
  followUpData: String
  userId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input NotificationCreateManyUserInput {
  id: String
  picturePath: String
  title: String!
  message: String!
  isRead: Boolean
  followUpContext: String
  followUpData: String
  createdAt: DateTime
  updatedAt: DateTime
}

input NotificationCreateManyUserInputEnvelope {
  data: NotificationCreateManyUserInput!
  skipDuplicates: Boolean
}

input NotificationCreateNestedManyWithoutUserInput {
  create: [NotificationCreateWithoutUserInput]
  connectOrCreate: [NotificationCreateOrConnectWithoutUserInput]
  createMany: NotificationCreateManyUserInputEnvelope
  connect: [NotificationWhereUniqueInput]
}

input NotificationCreateOrConnectWithoutUserInput {
  where: NotificationWhereUniqueInput!
  create: NotificationUncheckedCreateWithoutUserInput!
}

input NotificationCreateWithoutUserInput {
  id: String
  picturePath: String
  title: String!
  message: String!
  isRead: Boolean
  followUpContext: String
  followUpData: String
  createdAt: DateTime
  updatedAt: DateTime
}

input NotificationListRelationFilter {
  every: NotificationWhereInput
  some: NotificationWhereInput
  none: NotificationWhereInput
}

type NotificationMaxAggregateOutputType {
  id: String
  picturePath: String
  title: String
  message: String
  isRead: Boolean
  followUpContext: String
  followUpData: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input NotificationMaxOrderByAggregateInput {
  id: SortOrder
  picturePath: SortOrder
  title: SortOrder
  message: SortOrder
  isRead: SortOrder
  followUpContext: SortOrder
  followUpData: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

type NotificationMinAggregateOutputType {
  id: String
  picturePath: String
  title: String
  message: String
  isRead: Boolean
  followUpContext: String
  followUpData: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input NotificationMinOrderByAggregateInput {
  id: SortOrder
  picturePath: SortOrder
  title: SortOrder
  message: SortOrder
  isRead: SortOrder
  followUpContext: SortOrder
  followUpData: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input NotificationOrderByRelationAggregateInput {
  _count: SortOrder
}

input NotificationOrderByWithAggregationInput {
  id: SortOrder
  picturePath: SortOrder
  title: SortOrder
  message: SortOrder
  isRead: SortOrder
  followUpContext: SortOrder
  followUpData: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: NotificationCountOrderByAggregateInput
  _max: NotificationMaxOrderByAggregateInput
  _min: NotificationMinOrderByAggregateInput
}

input NotificationOrderByWithRelationInput {
  id: SortOrder
  picturePath: SortOrder
  title: SortOrder
  message: SortOrder
  isRead: SortOrder
  followUpContext: SortOrder
  followUpData: SortOrder
  userId: SortOrder
  user: UserOrderByWithRelationInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

enum NotificationScalarFieldEnum {
  id
  picturePath
  title
  message
  isRead
  followUpContext
  followUpData
  userId
  createdAt
  updatedAt
}

input NotificationScalarWhereInput {
  AND: [NotificationScalarWhereInput]
  OR: [NotificationScalarWhereInput]
  NOT: [NotificationScalarWhereInput]
  id: StringFilter
  picturePath: StringNullableFilter
  title: StringFilter
  message: StringFilter
  isRead: BoolFilter
  followUpContext: StringNullableFilter
  followUpData: StringNullableFilter
  userId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input NotificationScalarWhereWithAggregatesInput {
  AND: [NotificationScalarWhereWithAggregatesInput]
  OR: [NotificationScalarWhereWithAggregatesInput]
  NOT: [NotificationScalarWhereWithAggregatesInput]
  id: StringWithAggregatesFilter
  picturePath: StringNullableWithAggregatesFilter
  title: StringWithAggregatesFilter
  message: StringWithAggregatesFilter
  isRead: BoolWithAggregatesFilter
  followUpContext: StringNullableWithAggregatesFilter
  followUpData: StringNullableWithAggregatesFilter
  userId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input NotificationUncheckedCreateInput {
  id: String
  picturePath: String
  title: String!
  message: String!
  isRead: Boolean
  followUpContext: String
  followUpData: String
  userId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input NotificationUncheckedCreateNestedManyWithoutUserInput {
  create: [NotificationCreateWithoutUserInput]
  connectOrCreate: [NotificationCreateOrConnectWithoutUserInput]
  createMany: NotificationCreateManyUserInputEnvelope
  connect: [NotificationWhereUniqueInput]
}

input NotificationUncheckedCreateWithoutUserInput {
  id: String
  picturePath: String
  title: String!
  message: String!
  isRead: Boolean
  followUpContext: String
  followUpData: String
  createdAt: DateTime
  updatedAt: DateTime
}

input NotificationUncheckedUpdateInput {
  id: StringFieldUpdateOperationsInput
  picturePath: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  isRead: BoolFieldUpdateOperationsInput
  followUpContext: NullableStringFieldUpdateOperationsInput
  followUpData: NullableStringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NotificationUncheckedUpdateManyInput {
  id: StringFieldUpdateOperationsInput
  picturePath: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  isRead: BoolFieldUpdateOperationsInput
  followUpContext: NullableStringFieldUpdateOperationsInput
  followUpData: NullableStringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NotificationUncheckedUpdateManyWithoutNotificationsInput {
  id: StringFieldUpdateOperationsInput
  picturePath: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  isRead: BoolFieldUpdateOperationsInput
  followUpContext: NullableStringFieldUpdateOperationsInput
  followUpData: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NotificationUncheckedUpdateManyWithoutUserInput {
  create: [NotificationCreateWithoutUserInput]
  connectOrCreate: [NotificationCreateOrConnectWithoutUserInput]
  upsert: [NotificationUpsertWithWhereUniqueWithoutUserInput]
  createMany: NotificationCreateManyUserInputEnvelope
  set: [NotificationWhereUniqueInput]
  disconnect: [NotificationWhereUniqueInput]
  delete: [NotificationWhereUniqueInput]
  connect: [NotificationWhereUniqueInput]
  update: [NotificationUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [NotificationUpdateManyWithWhereWithoutUserInput]
  deleteMany: [NotificationScalarWhereInput]
}

input NotificationUncheckedUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  picturePath: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  isRead: BoolFieldUpdateOperationsInput
  followUpContext: NullableStringFieldUpdateOperationsInput
  followUpData: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NotificationUpdateInput {
  id: StringFieldUpdateOperationsInput
  picturePath: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  isRead: BoolFieldUpdateOperationsInput
  followUpContext: NullableStringFieldUpdateOperationsInput
  followUpData: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutNotificationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NotificationUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  picturePath: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  isRead: BoolFieldUpdateOperationsInput
  followUpContext: NullableStringFieldUpdateOperationsInput
  followUpData: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NotificationUpdateManyWithoutUserInput {
  create: [NotificationCreateWithoutUserInput]
  connectOrCreate: [NotificationCreateOrConnectWithoutUserInput]
  upsert: [NotificationUpsertWithWhereUniqueWithoutUserInput]
  createMany: NotificationCreateManyUserInputEnvelope
  set: [NotificationWhereUniqueInput]
  disconnect: [NotificationWhereUniqueInput]
  delete: [NotificationWhereUniqueInput]
  connect: [NotificationWhereUniqueInput]
  update: [NotificationUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [NotificationUpdateManyWithWhereWithoutUserInput]
  deleteMany: [NotificationScalarWhereInput]
}

input NotificationUpdateManyWithWhereWithoutUserInput {
  where: NotificationScalarWhereInput!
  data: NotificationUncheckedUpdateManyWithoutNotificationsInput!
}

input NotificationUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  picturePath: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  isRead: BoolFieldUpdateOperationsInput
  followUpContext: NullableStringFieldUpdateOperationsInput
  followUpData: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NotificationUpdateWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput!
  data: NotificationUncheckedUpdateWithoutUserInput!
}

input NotificationUpsertWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput!
  update: NotificationUncheckedUpdateWithoutUserInput!
  create: NotificationUncheckedCreateWithoutUserInput!
}

input NotificationWhereInput {
  AND: [NotificationWhereInput]
  OR: [NotificationWhereInput]
  NOT: [NotificationWhereInput]
  id: StringFilter
  picturePath: StringNullableFilter
  title: StringFilter
  message: StringFilter
  isRead: BoolFilter
  followUpContext: StringNullableFilter
  followUpData: StringNullableFilter
  userId: StringFilter
  user: UserWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input NotificationWhereUniqueInput {
  id: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableEnumVerifyTypeFieldUpdateOperationsInput {
  set: VerifyType
}

input NullableIntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Province {
  id: String!
  name: String!
  regencies(where: RegencyWhereInput, orderBy: RegencyOrderByWithRelationInput, cursor: RegencyWhereUniqueInput, take: Int, skip: Int, distinct: RegencyScalarFieldEnum): [Regency!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  users(where: UserWhereInput, orderBy: UserOrderByWithRelationInput, cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: UserScalarFieldEnum): [User!]!
  School(where: SchoolWhereInput, orderBy: SchoolOrderByWithRelationInput, cursor: SchoolWhereUniqueInput, take: Int, skip: Int, distinct: SchoolScalarFieldEnum): [School!]!
  _count: ProvinceCountOutputType!
}

type ProvinceCountAggregateOutputType {
  id: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

input ProvinceCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

type ProvinceCountOutputType {
  regencies: Int!
  users: Int!
  School: Int!
}

input ProvinceCreateInput {
  id: String
  name: String!
  regencies: RegencyCreateNestedManyWithoutProvinceInput
  createdAt: DateTime
  updatedAt: DateTime
  users: UserCreateNestedManyWithoutProvinceInput
  School: SchoolCreateNestedManyWithoutProvinceInput
}

input ProvinceCreateManyInput {
  id: String
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input ProvinceCreateNestedOneWithoutRegenciesInput {
  create: ProvinceUncheckedCreateWithoutRegenciesInput
  connectOrCreate: ProvinceCreateOrConnectWithoutRegenciesInput
  connect: ProvinceWhereUniqueInput
}

input ProvinceCreateNestedOneWithoutSchoolInput {
  create: ProvinceUncheckedCreateWithoutSchoolInput
  connectOrCreate: ProvinceCreateOrConnectWithoutSchoolInput
  connect: ProvinceWhereUniqueInput
}

input ProvinceCreateNestedOneWithoutUsersInput {
  create: ProvinceUncheckedCreateWithoutUsersInput
  connectOrCreate: ProvinceCreateOrConnectWithoutUsersInput
  connect: ProvinceWhereUniqueInput
}

input ProvinceCreateOrConnectWithoutRegenciesInput {
  where: ProvinceWhereUniqueInput!
  create: ProvinceUncheckedCreateWithoutRegenciesInput!
}

input ProvinceCreateOrConnectWithoutSchoolInput {
  where: ProvinceWhereUniqueInput!
  create: ProvinceUncheckedCreateWithoutSchoolInput!
}

input ProvinceCreateOrConnectWithoutUsersInput {
  where: ProvinceWhereUniqueInput!
  create: ProvinceUncheckedCreateWithoutUsersInput!
}

input ProvinceCreateWithoutRegenciesInput {
  id: String
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  users: UserCreateNestedManyWithoutProvinceInput
  School: SchoolCreateNestedManyWithoutProvinceInput
}

input ProvinceCreateWithoutSchoolInput {
  id: String
  name: String!
  regencies: RegencyCreateNestedManyWithoutProvinceInput
  createdAt: DateTime
  updatedAt: DateTime
  users: UserCreateNestedManyWithoutProvinceInput
}

input ProvinceCreateWithoutUsersInput {
  id: String
  name: String!
  regencies: RegencyCreateNestedManyWithoutProvinceInput
  createdAt: DateTime
  updatedAt: DateTime
  School: SchoolCreateNestedManyWithoutProvinceInput
}

type ProvinceMaxAggregateOutputType {
  id: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ProvinceMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

type ProvinceMinAggregateOutputType {
  id: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ProvinceMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ProvinceOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: ProvinceCountOrderByAggregateInput
  _max: ProvinceMaxOrderByAggregateInput
  _min: ProvinceMinOrderByAggregateInput
}

input ProvinceOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  regencies: RegencyOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
  users: UserOrderByRelationAggregateInput
  School: SchoolOrderByRelationAggregateInput
}

input ProvinceRelationFilter {
  is: ProvinceWhereInput
  isNot: ProvinceWhereInput
}

enum ProvinceScalarFieldEnum {
  id
  name
  createdAt
  updatedAt
}

input ProvinceScalarWhereWithAggregatesInput {
  AND: [ProvinceScalarWhereWithAggregatesInput]
  OR: [ProvinceScalarWhereWithAggregatesInput]
  NOT: [ProvinceScalarWhereWithAggregatesInput]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input ProvinceUncheckedCreateInput {
  id: String
  name: String!
  regencies: RegencyUncheckedCreateNestedManyWithoutProvinceInput
  createdAt: DateTime
  updatedAt: DateTime
  users: UserUncheckedCreateNestedManyWithoutProvinceInput
  School: SchoolUncheckedCreateNestedManyWithoutProvinceInput
}

input ProvinceUncheckedCreateWithoutRegenciesInput {
  id: String
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  users: UserUncheckedCreateNestedManyWithoutProvinceInput
  School: SchoolUncheckedCreateNestedManyWithoutProvinceInput
}

input ProvinceUncheckedCreateWithoutSchoolInput {
  id: String
  name: String!
  regencies: RegencyUncheckedCreateNestedManyWithoutProvinceInput
  createdAt: DateTime
  updatedAt: DateTime
  users: UserUncheckedCreateNestedManyWithoutProvinceInput
}

input ProvinceUncheckedCreateWithoutUsersInput {
  id: String
  name: String!
  regencies: RegencyUncheckedCreateNestedManyWithoutProvinceInput
  createdAt: DateTime
  updatedAt: DateTime
  School: SchoolUncheckedCreateNestedManyWithoutProvinceInput
}

input ProvinceUncheckedUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  regencies: RegencyUncheckedUpdateManyWithoutProvinceInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  users: UserUncheckedUpdateManyWithoutProvinceInput
  School: SchoolUncheckedUpdateManyWithoutProvinceInput
}

input ProvinceUncheckedUpdateManyInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProvinceUncheckedUpdateWithoutRegenciesInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  users: UserUncheckedUpdateManyWithoutProvinceInput
  School: SchoolUncheckedUpdateManyWithoutProvinceInput
}

input ProvinceUncheckedUpdateWithoutSchoolInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  regencies: RegencyUncheckedUpdateManyWithoutProvinceInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  users: UserUncheckedUpdateManyWithoutProvinceInput
}

input ProvinceUncheckedUpdateWithoutUsersInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  regencies: RegencyUncheckedUpdateManyWithoutProvinceInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  School: SchoolUncheckedUpdateManyWithoutProvinceInput
}

input ProvinceUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  regencies: RegencyUpdateManyWithoutProvinceInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  users: UserUpdateManyWithoutProvinceInput
  School: SchoolUpdateManyWithoutProvinceInput
}

input ProvinceUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProvinceUpdateOneRequiredWithoutRegenciesInput {
  create: ProvinceUncheckedCreateWithoutRegenciesInput
  connectOrCreate: ProvinceCreateOrConnectWithoutRegenciesInput
  upsert: ProvinceUpsertWithoutRegenciesInput
  connect: ProvinceWhereUniqueInput
  update: ProvinceUncheckedUpdateWithoutRegenciesInput
}

input ProvinceUpdateOneRequiredWithoutSchoolInput {
  create: ProvinceUncheckedCreateWithoutSchoolInput
  connectOrCreate: ProvinceCreateOrConnectWithoutSchoolInput
  upsert: ProvinceUpsertWithoutSchoolInput
  connect: ProvinceWhereUniqueInput
  update: ProvinceUncheckedUpdateWithoutSchoolInput
}

input ProvinceUpdateOneRequiredWithoutUsersInput {
  create: ProvinceUncheckedCreateWithoutUsersInput
  connectOrCreate: ProvinceCreateOrConnectWithoutUsersInput
  upsert: ProvinceUpsertWithoutUsersInput
  connect: ProvinceWhereUniqueInput
  update: ProvinceUncheckedUpdateWithoutUsersInput
}

input ProvinceUpdateWithoutRegenciesInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  users: UserUpdateManyWithoutProvinceInput
  School: SchoolUpdateManyWithoutProvinceInput
}

input ProvinceUpdateWithoutSchoolInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  regencies: RegencyUpdateManyWithoutProvinceInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  users: UserUpdateManyWithoutProvinceInput
}

input ProvinceUpdateWithoutUsersInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  regencies: RegencyUpdateManyWithoutProvinceInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  School: SchoolUpdateManyWithoutProvinceInput
}

input ProvinceUpsertWithoutRegenciesInput {
  update: ProvinceUncheckedUpdateWithoutRegenciesInput!
  create: ProvinceUncheckedCreateWithoutRegenciesInput!
}

input ProvinceUpsertWithoutSchoolInput {
  update: ProvinceUncheckedUpdateWithoutSchoolInput!
  create: ProvinceUncheckedCreateWithoutSchoolInput!
}

input ProvinceUpsertWithoutUsersInput {
  update: ProvinceUncheckedUpdateWithoutUsersInput!
  create: ProvinceUncheckedCreateWithoutUsersInput!
}

input ProvinceWhereInput {
  AND: [ProvinceWhereInput]
  OR: [ProvinceWhereInput]
  NOT: [ProvinceWhereInput]
  id: StringFilter
  name: StringFilter
  regencies: RegencyListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  users: UserListRelationFilter
  School: SchoolListRelationFilter
}

input ProvinceWhereUniqueInput {
  id: String
}

type Query {
  findUniqueQuestion(where: QuestionWhereUniqueInput!): Question
  findFirstQuestion(where: QuestionWhereInput, orderBy: [QuestionOrderByWithRelationInput], cursor: QuestionWhereUniqueInput, take: Int, skip: Int, distinct: [QuestionScalarFieldEnum]): Question
  findManyQuestion(where: QuestionWhereInput, orderBy: [QuestionOrderByWithRelationInput], cursor: QuestionWhereUniqueInput, take: Int, skip: Int, distinct: [QuestionScalarFieldEnum]): [Question!]!
  findManyQuestionCount(where: QuestionWhereInput, orderBy: [QuestionOrderByWithRelationInput], cursor: QuestionWhereUniqueInput, take: Int, skip: Int, distinct: [QuestionScalarFieldEnum]): Int!
  aggregateQuestion(where: QuestionWhereInput, orderBy: [QuestionOrderByWithRelationInput], cursor: QuestionWhereUniqueInput, take: Int, skip: Int): AggregateQuestion
  findUniqueExamAnswer(where: ExamAnswerWhereUniqueInput!): ExamAnswer
  findFirstExamAnswer(where: ExamAnswerWhereInput, orderBy: [ExamAnswerOrderByWithRelationInput], cursor: ExamAnswerWhereUniqueInput, take: Int, skip: Int, distinct: [ExamAnswerScalarFieldEnum]): ExamAnswer
  findManyExamAnswer(where: ExamAnswerWhereInput, orderBy: [ExamAnswerOrderByWithRelationInput], cursor: ExamAnswerWhereUniqueInput, take: Int, skip: Int, distinct: [ExamAnswerScalarFieldEnum]): [ExamAnswer!]!
  findManyExamAnswerCount(where: ExamAnswerWhereInput, orderBy: [ExamAnswerOrderByWithRelationInput], cursor: ExamAnswerWhereUniqueInput, take: Int, skip: Int, distinct: [ExamAnswerScalarFieldEnum]): Int!
  aggregateExamAnswer(where: ExamAnswerWhereInput, orderBy: [ExamAnswerOrderByWithRelationInput], cursor: ExamAnswerWhereUniqueInput, take: Int, skip: Int): AggregateExamAnswer
  findUniqueExamQuestion(where: ExamQuestionWhereUniqueInput!): ExamQuestion
  findFirstExamQuestion(where: ExamQuestionWhereInput, orderBy: [ExamQuestionOrderByWithRelationInput], cursor: ExamQuestionWhereUniqueInput, take: Int, skip: Int, distinct: [ExamQuestionScalarFieldEnum]): ExamQuestion
  findManyExamQuestion(where: ExamQuestionWhereInput, orderBy: [ExamQuestionOrderByWithRelationInput], cursor: ExamQuestionWhereUniqueInput, take: Int, skip: Int, distinct: [ExamQuestionScalarFieldEnum]): [ExamQuestion!]!
  findManyExamQuestionCount(where: ExamQuestionWhereInput, orderBy: [ExamQuestionOrderByWithRelationInput], cursor: ExamQuestionWhereUniqueInput, take: Int, skip: Int, distinct: [ExamQuestionScalarFieldEnum]): Int!
  aggregateExamQuestion(where: ExamQuestionWhereInput, orderBy: [ExamQuestionOrderByWithRelationInput], cursor: ExamQuestionWhereUniqueInput, take: Int, skip: Int): AggregateExamQuestion
  findUniqueExamSession(where: ExamSessionWhereUniqueInput!): ExamSession
  findFirstExamSession(where: ExamSessionWhereInput, orderBy: [ExamSessionOrderByWithRelationInput], cursor: ExamSessionWhereUniqueInput, take: Int, skip: Int, distinct: [ExamSessionScalarFieldEnum]): ExamSession
  findManyExamSession(where: ExamSessionWhereInput, orderBy: [ExamSessionOrderByWithRelationInput], cursor: ExamSessionWhereUniqueInput, take: Int, skip: Int, distinct: [ExamSessionScalarFieldEnum]): [ExamSession!]!
  findManyExamSessionCount(where: ExamSessionWhereInput, orderBy: [ExamSessionOrderByWithRelationInput], cursor: ExamSessionWhereUniqueInput, take: Int, skip: Int, distinct: [ExamSessionScalarFieldEnum]): Int!
  aggregateExamSession(where: ExamSessionWhereInput, orderBy: [ExamSessionOrderByWithRelationInput], cursor: ExamSessionWhereUniqueInput, take: Int, skip: Int): AggregateExamSession
  findUniqueExam(where: ExamWhereUniqueInput!): Exam
  findFirstExam(where: ExamWhereInput, orderBy: [ExamOrderByWithRelationInput], cursor: ExamWhereUniqueInput, take: Int, skip: Int, distinct: [ExamScalarFieldEnum]): Exam
  findManyExam(where: ExamWhereInput, orderBy: [ExamOrderByWithRelationInput], cursor: ExamWhereUniqueInput, take: Int, skip: Int, distinct: [ExamScalarFieldEnum]): [Exam!]!
  findManyExamCount(where: ExamWhereInput, orderBy: [ExamOrderByWithRelationInput], cursor: ExamWhereUniqueInput, take: Int, skip: Int, distinct: [ExamScalarFieldEnum]): Int!
  aggregateExam(where: ExamWhereInput, orderBy: [ExamOrderByWithRelationInput], cursor: ExamWhereUniqueInput, take: Int, skip: Int): AggregateExam
  findUniqueChat(where: ChatWhereUniqueInput!): Chat
  findFirstChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Chat
  findManyChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat!]!
  findManyChatCount(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Int!
  aggregateChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int): AggregateChat
  findUniqueChatSession(where: ChatSessionWhereUniqueInput!): ChatSession
  findFirstChatSession(where: ChatSessionWhereInput, orderBy: [ChatSessionOrderByWithRelationInput], cursor: ChatSessionWhereUniqueInput, take: Int, skip: Int, distinct: [ChatSessionScalarFieldEnum]): ChatSession
  findManyChatSession(where: ChatSessionWhereInput, orderBy: [ChatSessionOrderByWithRelationInput], cursor: ChatSessionWhereUniqueInput, take: Int, skip: Int, distinct: [ChatSessionScalarFieldEnum]): [ChatSession!]!
  findManyChatSessionCount(where: ChatSessionWhereInput, orderBy: [ChatSessionOrderByWithRelationInput], cursor: ChatSessionWhereUniqueInput, take: Int, skip: Int, distinct: [ChatSessionScalarFieldEnum]): Int!
  aggregateChatSession(where: ChatSessionWhereInput, orderBy: [ChatSessionOrderByWithRelationInput], cursor: ChatSessionWhereUniqueInput, take: Int, skip: Int): AggregateChatSession
  findUniqueClassroomStudent(where: ClassroomStudentWhereUniqueInput!): ClassroomStudent
  findFirstClassroomStudent(where: ClassroomStudentWhereInput, orderBy: [ClassroomStudentOrderByWithRelationInput], cursor: ClassroomStudentWhereUniqueInput, take: Int, skip: Int, distinct: [ClassroomStudentScalarFieldEnum]): ClassroomStudent
  findManyClassroomStudent(where: ClassroomStudentWhereInput, orderBy: [ClassroomStudentOrderByWithRelationInput], cursor: ClassroomStudentWhereUniqueInput, take: Int, skip: Int, distinct: [ClassroomStudentScalarFieldEnum]): [ClassroomStudent!]!
  findManyClassroomStudentCount(where: ClassroomStudentWhereInput, orderBy: [ClassroomStudentOrderByWithRelationInput], cursor: ClassroomStudentWhereUniqueInput, take: Int, skip: Int, distinct: [ClassroomStudentScalarFieldEnum]): Int!
  aggregateClassroomStudent(where: ClassroomStudentWhereInput, orderBy: [ClassroomStudentOrderByWithRelationInput], cursor: ClassroomStudentWhereUniqueInput, take: Int, skip: Int): AggregateClassroomStudent
  findUniqueClassroom(where: ClassroomWhereUniqueInput!): Classroom
  findFirstClassroom(where: ClassroomWhereInput, orderBy: [ClassroomOrderByWithRelationInput], cursor: ClassroomWhereUniqueInput, take: Int, skip: Int, distinct: [ClassroomScalarFieldEnum]): Classroom
  findManyClassroom(where: ClassroomWhereInput, orderBy: [ClassroomOrderByWithRelationInput], cursor: ClassroomWhereUniqueInput, take: Int, skip: Int, distinct: [ClassroomScalarFieldEnum]): [Classroom!]!
  findManyClassroomCount(where: ClassroomWhereInput, orderBy: [ClassroomOrderByWithRelationInput], cursor: ClassroomWhereUniqueInput, take: Int, skip: Int, distinct: [ClassroomScalarFieldEnum]): Int!
  aggregateClassroom(where: ClassroomWhereInput, orderBy: [ClassroomOrderByWithRelationInput], cursor: ClassroomWhereUniqueInput, take: Int, skip: Int): AggregateClassroom
  findUniqueSchoolStaff(where: SchoolStaffWhereUniqueInput!): SchoolStaff
  findFirstSchoolStaff(where: SchoolStaffWhereInput, orderBy: [SchoolStaffOrderByWithRelationInput], cursor: SchoolStaffWhereUniqueInput, take: Int, skip: Int, distinct: [SchoolStaffScalarFieldEnum]): SchoolStaff
  findManySchoolStaff(where: SchoolStaffWhereInput, orderBy: [SchoolStaffOrderByWithRelationInput], cursor: SchoolStaffWhereUniqueInput, take: Int, skip: Int, distinct: [SchoolStaffScalarFieldEnum]): [SchoolStaff!]!
  findManySchoolStaffCount(where: SchoolStaffWhereInput, orderBy: [SchoolStaffOrderByWithRelationInput], cursor: SchoolStaffWhereUniqueInput, take: Int, skip: Int, distinct: [SchoolStaffScalarFieldEnum]): Int!
  aggregateSchoolStaff(where: SchoolStaffWhereInput, orderBy: [SchoolStaffOrderByWithRelationInput], cursor: SchoolStaffWhereUniqueInput, take: Int, skip: Int): AggregateSchoolStaff
  findUniqueSchool(where: SchoolWhereUniqueInput!): School
  findFirstSchool(where: SchoolWhereInput, orderBy: [SchoolOrderByWithRelationInput], cursor: SchoolWhereUniqueInput, take: Int, skip: Int, distinct: [SchoolScalarFieldEnum]): School
  findManySchool(where: SchoolWhereInput, orderBy: [SchoolOrderByWithRelationInput], cursor: SchoolWhereUniqueInput, take: Int, skip: Int, distinct: [SchoolScalarFieldEnum]): [School!]!
  findManySchoolCount(where: SchoolWhereInput, orderBy: [SchoolOrderByWithRelationInput], cursor: SchoolWhereUniqueInput, take: Int, skip: Int, distinct: [SchoolScalarFieldEnum]): Int!
  aggregateSchool(where: SchoolWhereInput, orderBy: [SchoolOrderByWithRelationInput], cursor: SchoolWhereUniqueInput, take: Int, skip: Int): AggregateSchool
  findUniqueNotification(where: NotificationWhereUniqueInput!): Notification
  findFirstNotification(where: NotificationWhereInput, orderBy: [NotificationOrderByWithRelationInput], cursor: NotificationWhereUniqueInput, take: Int, skip: Int, distinct: [NotificationScalarFieldEnum]): Notification
  findManyNotification(where: NotificationWhereInput, orderBy: [NotificationOrderByWithRelationInput], cursor: NotificationWhereUniqueInput, take: Int, skip: Int, distinct: [NotificationScalarFieldEnum]): [Notification!]!
  findManyNotificationCount(where: NotificationWhereInput, orderBy: [NotificationOrderByWithRelationInput], cursor: NotificationWhereUniqueInput, take: Int, skip: Int, distinct: [NotificationScalarFieldEnum]): Int!
  aggregateNotification(where: NotificationWhereInput, orderBy: [NotificationOrderByWithRelationInput], cursor: NotificationWhereUniqueInput, take: Int, skip: Int): AggregateNotification
  findUniqueUser(where: UserWhereUniqueInput!): User
  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User
  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User!]!
  findManyUserCount(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): Int!
  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser
  findUniqueIdentityFile(where: IdentityFileWhereUniqueInput!): IdentityFile
  findFirstIdentityFile(where: IdentityFileWhereInput, orderBy: [IdentityFileOrderByWithRelationInput], cursor: IdentityFileWhereUniqueInput, take: Int, skip: Int, distinct: [IdentityFileScalarFieldEnum]): IdentityFile
  findManyIdentityFile(where: IdentityFileWhereInput, orderBy: [IdentityFileOrderByWithRelationInput], cursor: IdentityFileWhereUniqueInput, take: Int, skip: Int, distinct: [IdentityFileScalarFieldEnum]): [IdentityFile!]!
  findManyIdentityFileCount(where: IdentityFileWhereInput, orderBy: [IdentityFileOrderByWithRelationInput], cursor: IdentityFileWhereUniqueInput, take: Int, skip: Int, distinct: [IdentityFileScalarFieldEnum]): Int!
  aggregateIdentityFile(where: IdentityFileWhereInput, orderBy: [IdentityFileOrderByWithRelationInput], cursor: IdentityFileWhereUniqueInput, take: Int, skip: Int): AggregateIdentityFile
  findUniqueRegency(where: RegencyWhereUniqueInput!): Regency
  findFirstRegency(where: RegencyWhereInput, orderBy: [RegencyOrderByWithRelationInput], cursor: RegencyWhereUniqueInput, take: Int, skip: Int, distinct: [RegencyScalarFieldEnum]): Regency
  findManyRegency(where: RegencyWhereInput, orderBy: [RegencyOrderByWithRelationInput], cursor: RegencyWhereUniqueInput, take: Int, skip: Int, distinct: [RegencyScalarFieldEnum]): [Regency!]!
  findManyRegencyCount(where: RegencyWhereInput, orderBy: [RegencyOrderByWithRelationInput], cursor: RegencyWhereUniqueInput, take: Int, skip: Int, distinct: [RegencyScalarFieldEnum]): Int!
  aggregateRegency(where: RegencyWhereInput, orderBy: [RegencyOrderByWithRelationInput], cursor: RegencyWhereUniqueInput, take: Int, skip: Int): AggregateRegency
  findUniqueProvince(where: ProvinceWhereUniqueInput!): Province
  findFirstProvince(where: ProvinceWhereInput, orderBy: [ProvinceOrderByWithRelationInput], cursor: ProvinceWhereUniqueInput, take: Int, skip: Int, distinct: [ProvinceScalarFieldEnum]): Province
  findManyProvince(where: ProvinceWhereInput, orderBy: [ProvinceOrderByWithRelationInput], cursor: ProvinceWhereUniqueInput, take: Int, skip: Int, distinct: [ProvinceScalarFieldEnum]): [Province!]!
  findManyProvinceCount(where: ProvinceWhereInput, orderBy: [ProvinceOrderByWithRelationInput], cursor: ProvinceWhereUniqueInput, take: Int, skip: Int, distinct: [ProvinceScalarFieldEnum]): Int!
  aggregateProvince(where: ProvinceWhereInput, orderBy: [ProvinceOrderByWithRelationInput], cursor: ProvinceWhereUniqueInput, take: Int, skip: Int): AggregateProvince
  me: User
  findChatTarget(name: String!, take: Int = 10): [User]
}

enum QueryMode {
  default
  insensitive
}

type Question {
  id: String!
  name: String!
  type: QuestionType!
  contentType: ContentType!
  content: String!
  answerType: ContentType!
  answers: [String!]!
  userId: String!
  user: User!
  originalQuestionId: String
  originalQuestion: Question
  childrens(where: QuestionWhereInput, orderBy: QuestionOrderByWithRelationInput, cursor: QuestionWhereUniqueInput, take: Int, skip: Int, distinct: QuestionScalarFieldEnum): [Question!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  examquestions(where: ExamQuestionWhereInput, orderBy: ExamQuestionOrderByWithRelationInput, cursor: ExamQuestionWhereUniqueInput, take: Int, skip: Int, distinct: ExamQuestionScalarFieldEnum): [ExamQuestion!]!
  _count: QuestionCountOutputType!
}

type QuestionCountAggregateOutputType {
  id: Int!
  name: Int!
  type: Int!
  contentType: Int!
  content: Int!
  answerType: Int!
  answers: Int!
  userId: Int!
  originalQuestionId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

input QuestionCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  type: SortOrder
  contentType: SortOrder
  content: SortOrder
  answerType: SortOrder
  answers: SortOrder
  userId: SortOrder
  originalQuestionId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

type QuestionCountOutputType {
  childrens: Int!
  examquestions: Int!
}

input QuestionCreateanswersInput {
  set: String!
}

input QuestionCreateInput {
  id: String
  name: String!
  type: QuestionType!
  contentType: ContentType!
  content: String!
  answerType: ContentType!
  answers: [String]
  user: UserCreateNestedOneWithoutQuestionsInput!
  originalQuestion: QuestionCreateNestedOneWithoutChildrensInput
  childrens: QuestionCreateNestedManyWithoutOriginalQuestionInput
  createdAt: DateTime
  updatedAt: DateTime
  examquestions: ExamQuestionCreateNestedManyWithoutQuestionInput
}

input QuestionCreateManyInput {
  id: String
  name: String!
  type: QuestionType!
  contentType: ContentType!
  content: String!
  answerType: ContentType!
  answers: [String]
  userId: String!
  originalQuestionId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input QuestionCreateManyOriginalQuestionInput {
  id: String
  name: String!
  type: QuestionType!
  contentType: ContentType!
  content: String!
  answerType: ContentType!
  answers: [String]
  userId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input QuestionCreateManyOriginalQuestionInputEnvelope {
  data: QuestionCreateManyOriginalQuestionInput!
  skipDuplicates: Boolean
}

input QuestionCreateManyUserInput {
  id: String
  name: String!
  type: QuestionType!
  contentType: ContentType!
  content: String!
  answerType: ContentType!
  answers: [String]
  originalQuestionId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input QuestionCreateManyUserInputEnvelope {
  data: QuestionCreateManyUserInput!
  skipDuplicates: Boolean
}

input QuestionCreateNestedManyWithoutOriginalQuestionInput {
  create: [QuestionCreateWithoutOriginalQuestionInput]
  connectOrCreate: [QuestionCreateOrConnectWithoutOriginalQuestionInput]
  createMany: QuestionCreateManyOriginalQuestionInputEnvelope
  connect: [QuestionWhereUniqueInput]
}

input QuestionCreateNestedManyWithoutUserInput {
  create: [QuestionCreateWithoutUserInput]
  connectOrCreate: [QuestionCreateOrConnectWithoutUserInput]
  createMany: QuestionCreateManyUserInputEnvelope
  connect: [QuestionWhereUniqueInput]
}

input QuestionCreateNestedOneWithoutChildrensInput {
  create: QuestionUncheckedCreateWithoutChildrensInput
  connectOrCreate: QuestionCreateOrConnectWithoutChildrensInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateNestedOneWithoutExamquestionsInput {
  create: QuestionUncheckedCreateWithoutExamquestionsInput
  connectOrCreate: QuestionCreateOrConnectWithoutExamquestionsInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateOrConnectWithoutChildrensInput {
  where: QuestionWhereUniqueInput!
  create: QuestionUncheckedCreateWithoutChildrensInput!
}

input QuestionCreateOrConnectWithoutExamquestionsInput {
  where: QuestionWhereUniqueInput!
  create: QuestionUncheckedCreateWithoutExamquestionsInput!
}

input QuestionCreateOrConnectWithoutOriginalQuestionInput {
  where: QuestionWhereUniqueInput!
  create: QuestionUncheckedCreateWithoutOriginalQuestionInput!
}

input QuestionCreateOrConnectWithoutUserInput {
  where: QuestionWhereUniqueInput!
  create: QuestionUncheckedCreateWithoutUserInput!
}

input QuestionCreateWithoutChildrensInput {
  id: String
  name: String!
  type: QuestionType!
  contentType: ContentType!
  content: String!
  answerType: ContentType!
  answers: [String]
  user: UserCreateNestedOneWithoutQuestionsInput!
  originalQuestion: QuestionCreateNestedOneWithoutChildrensInput
  createdAt: DateTime
  updatedAt: DateTime
  examquestions: ExamQuestionCreateNestedManyWithoutQuestionInput
}

input QuestionCreateWithoutExamquestionsInput {
  id: String
  name: String!
  type: QuestionType!
  contentType: ContentType!
  content: String!
  answerType: ContentType!
  answers: [String]
  user: UserCreateNestedOneWithoutQuestionsInput!
  originalQuestion: QuestionCreateNestedOneWithoutChildrensInput
  childrens: QuestionCreateNestedManyWithoutOriginalQuestionInput
  createdAt: DateTime
  updatedAt: DateTime
}

input QuestionCreateWithoutOriginalQuestionInput {
  id: String
  name: String!
  type: QuestionType!
  contentType: ContentType!
  content: String!
  answerType: ContentType!
  answers: [String]
  user: UserCreateNestedOneWithoutQuestionsInput!
  childrens: QuestionCreateNestedManyWithoutOriginalQuestionInput
  createdAt: DateTime
  updatedAt: DateTime
  examquestions: ExamQuestionCreateNestedManyWithoutQuestionInput
}

input QuestionCreateWithoutUserInput {
  id: String
  name: String!
  type: QuestionType!
  contentType: ContentType!
  content: String!
  answerType: ContentType!
  answers: [String]
  originalQuestion: QuestionCreateNestedOneWithoutChildrensInput
  childrens: QuestionCreateNestedManyWithoutOriginalQuestionInput
  createdAt: DateTime
  updatedAt: DateTime
  examquestions: ExamQuestionCreateNestedManyWithoutQuestionInput
}

input QuestionListRelationFilter {
  every: QuestionWhereInput
  some: QuestionWhereInput
  none: QuestionWhereInput
}

type QuestionMaxAggregateOutputType {
  id: String
  name: String
  type: QuestionType
  contentType: ContentType
  content: String
  answerType: ContentType
  userId: String
  originalQuestionId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input QuestionMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  type: SortOrder
  contentType: SortOrder
  content: SortOrder
  answerType: SortOrder
  userId: SortOrder
  originalQuestionId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

type QuestionMinAggregateOutputType {
  id: String
  name: String
  type: QuestionType
  contentType: ContentType
  content: String
  answerType: ContentType
  userId: String
  originalQuestionId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input QuestionMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  type: SortOrder
  contentType: SortOrder
  content: SortOrder
  answerType: SortOrder
  userId: SortOrder
  originalQuestionId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input QuestionOrderByRelationAggregateInput {
  _count: SortOrder
}

input QuestionOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  type: SortOrder
  contentType: SortOrder
  content: SortOrder
  answerType: SortOrder
  answers: SortOrder
  userId: SortOrder
  originalQuestionId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: QuestionCountOrderByAggregateInput
  _max: QuestionMaxOrderByAggregateInput
  _min: QuestionMinOrderByAggregateInput
}

input QuestionOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  type: SortOrder
  contentType: SortOrder
  content: SortOrder
  answerType: SortOrder
  answers: SortOrder
  userId: SortOrder
  user: UserOrderByWithRelationInput
  originalQuestionId: SortOrder
  originalQuestion: QuestionOrderByWithRelationInput
  childrens: QuestionOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
  examquestions: ExamQuestionOrderByRelationAggregateInput
}

input QuestionRelationFilter {
  is: QuestionWhereInput
  isNot: QuestionWhereInput
}

enum QuestionScalarFieldEnum {
  id
  name
  type
  contentType
  content
  answerType
  answers
  userId
  originalQuestionId
  createdAt
  updatedAt
}

input QuestionScalarWhereInput {
  AND: [QuestionScalarWhereInput]
  OR: [QuestionScalarWhereInput]
  NOT: [QuestionScalarWhereInput]
  id: StringFilter
  name: StringFilter
  type: EnumQuestionTypeFilter
  contentType: EnumContentTypeFilter
  content: StringFilter
  answerType: EnumContentTypeFilter
  answers: StringNullableListFilter
  userId: StringFilter
  originalQuestionId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input QuestionScalarWhereWithAggregatesInput {
  AND: [QuestionScalarWhereWithAggregatesInput]
  OR: [QuestionScalarWhereWithAggregatesInput]
  NOT: [QuestionScalarWhereWithAggregatesInput]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  type: EnumQuestionTypeWithAggregatesFilter
  contentType: EnumContentTypeWithAggregatesFilter
  content: StringWithAggregatesFilter
  answerType: EnumContentTypeWithAggregatesFilter
  answers: StringNullableListFilter
  userId: StringWithAggregatesFilter
  originalQuestionId: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_OR_FALSE
  FILL_IN_THE_BLANK
  MULTIPLE_ANSWER
}

input QuestionUncheckedCreateInput {
  id: String
  name: String!
  type: QuestionType!
  contentType: ContentType!
  content: String!
  answerType: ContentType!
  answers: [String]
  userId: String!
  originalQuestionId: String
  childrens: QuestionUncheckedCreateNestedManyWithoutOriginalQuestionInput
  createdAt: DateTime
  updatedAt: DateTime
  examquestions: ExamQuestionUncheckedCreateNestedManyWithoutQuestionInput
}

input QuestionUncheckedCreateNestedManyWithoutOriginalQuestionInput {
  create: [QuestionCreateWithoutOriginalQuestionInput]
  connectOrCreate: [QuestionCreateOrConnectWithoutOriginalQuestionInput]
  createMany: QuestionCreateManyOriginalQuestionInputEnvelope
  connect: [QuestionWhereUniqueInput]
}

input QuestionUncheckedCreateNestedManyWithoutUserInput {
  create: [QuestionCreateWithoutUserInput]
  connectOrCreate: [QuestionCreateOrConnectWithoutUserInput]
  createMany: QuestionCreateManyUserInputEnvelope
  connect: [QuestionWhereUniqueInput]
}

input QuestionUncheckedCreateWithoutChildrensInput {
  id: String
  name: String!
  type: QuestionType!
  contentType: ContentType!
  content: String!
  answerType: ContentType!
  answers: [String]
  userId: String!
  originalQuestionId: String
  createdAt: DateTime
  updatedAt: DateTime
  examquestions: ExamQuestionUncheckedCreateNestedManyWithoutQuestionInput
}

input QuestionUncheckedCreateWithoutExamquestionsInput {
  id: String
  name: String!
  type: QuestionType!
  contentType: ContentType!
  content: String!
  answerType: ContentType!
  answers: [String]
  userId: String!
  originalQuestionId: String
  childrens: QuestionUncheckedCreateNestedManyWithoutOriginalQuestionInput
  createdAt: DateTime
  updatedAt: DateTime
}

input QuestionUncheckedCreateWithoutOriginalQuestionInput {
  id: String
  name: String!
  type: QuestionType!
  contentType: ContentType!
  content: String!
  answerType: ContentType!
  answers: [String]
  userId: String!
  childrens: QuestionUncheckedCreateNestedManyWithoutOriginalQuestionInput
  createdAt: DateTime
  updatedAt: DateTime
  examquestions: ExamQuestionUncheckedCreateNestedManyWithoutQuestionInput
}

input QuestionUncheckedCreateWithoutUserInput {
  id: String
  name: String!
  type: QuestionType!
  contentType: ContentType!
  content: String!
  answerType: ContentType!
  answers: [String]
  originalQuestionId: String
  childrens: QuestionUncheckedCreateNestedManyWithoutOriginalQuestionInput
  createdAt: DateTime
  updatedAt: DateTime
  examquestions: ExamQuestionUncheckedCreateNestedManyWithoutQuestionInput
}

input QuestionUncheckedUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: EnumQuestionTypeFieldUpdateOperationsInput
  contentType: EnumContentTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  answerType: EnumContentTypeFieldUpdateOperationsInput
  answers: [String]
  userId: StringFieldUpdateOperationsInput
  originalQuestionId: NullableStringFieldUpdateOperationsInput
  childrens: QuestionUncheckedUpdateManyWithoutOriginalQuestionInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  examquestions: ExamQuestionUncheckedUpdateManyWithoutQuestionInput
}

input QuestionUncheckedUpdateManyInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: EnumQuestionTypeFieldUpdateOperationsInput
  contentType: EnumContentTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  answerType: EnumContentTypeFieldUpdateOperationsInput
  answers: [String]
  userId: StringFieldUpdateOperationsInput
  originalQuestionId: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input QuestionUncheckedUpdateManyWithoutChildrensInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: EnumQuestionTypeFieldUpdateOperationsInput
  contentType: EnumContentTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  answerType: EnumContentTypeFieldUpdateOperationsInput
  answers: [String]
  userId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input QuestionUncheckedUpdateManyWithoutOriginalQuestionInput {
  create: [QuestionCreateWithoutOriginalQuestionInput]
  connectOrCreate: [QuestionCreateOrConnectWithoutOriginalQuestionInput]
  upsert: [QuestionUpsertWithWhereUniqueWithoutOriginalQuestionInput]
  createMany: QuestionCreateManyOriginalQuestionInputEnvelope
  set: [QuestionWhereUniqueInput]
  disconnect: [QuestionWhereUniqueInput]
  delete: [QuestionWhereUniqueInput]
  connect: [QuestionWhereUniqueInput]
  update: [QuestionUpdateWithWhereUniqueWithoutOriginalQuestionInput]
  updateMany: [QuestionUpdateManyWithWhereWithoutOriginalQuestionInput]
  deleteMany: [QuestionScalarWhereInput]
}

input QuestionUncheckedUpdateManyWithoutQuestionsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: EnumQuestionTypeFieldUpdateOperationsInput
  contentType: EnumContentTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  answerType: EnumContentTypeFieldUpdateOperationsInput
  answers: [String]
  originalQuestionId: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input QuestionUncheckedUpdateManyWithoutUserInput {
  create: [QuestionCreateWithoutUserInput]
  connectOrCreate: [QuestionCreateOrConnectWithoutUserInput]
  upsert: [QuestionUpsertWithWhereUniqueWithoutUserInput]
  createMany: QuestionCreateManyUserInputEnvelope
  set: [QuestionWhereUniqueInput]
  disconnect: [QuestionWhereUniqueInput]
  delete: [QuestionWhereUniqueInput]
  connect: [QuestionWhereUniqueInput]
  update: [QuestionUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [QuestionUpdateManyWithWhereWithoutUserInput]
  deleteMany: [QuestionScalarWhereInput]
}

input QuestionUncheckedUpdateWithoutChildrensInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: EnumQuestionTypeFieldUpdateOperationsInput
  contentType: EnumContentTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  answerType: EnumContentTypeFieldUpdateOperationsInput
  answers: [String]
  userId: StringFieldUpdateOperationsInput
  originalQuestionId: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  examquestions: ExamQuestionUncheckedUpdateManyWithoutQuestionInput
}

input QuestionUncheckedUpdateWithoutExamquestionsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: EnumQuestionTypeFieldUpdateOperationsInput
  contentType: EnumContentTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  answerType: EnumContentTypeFieldUpdateOperationsInput
  answers: [String]
  userId: StringFieldUpdateOperationsInput
  originalQuestionId: NullableStringFieldUpdateOperationsInput
  childrens: QuestionUncheckedUpdateManyWithoutOriginalQuestionInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input QuestionUncheckedUpdateWithoutOriginalQuestionInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: EnumQuestionTypeFieldUpdateOperationsInput
  contentType: EnumContentTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  answerType: EnumContentTypeFieldUpdateOperationsInput
  answers: [String]
  userId: StringFieldUpdateOperationsInput
  childrens: QuestionUncheckedUpdateManyWithoutOriginalQuestionInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  examquestions: ExamQuestionUncheckedUpdateManyWithoutQuestionInput
}

input QuestionUncheckedUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: EnumQuestionTypeFieldUpdateOperationsInput
  contentType: EnumContentTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  answerType: EnumContentTypeFieldUpdateOperationsInput
  answers: [String]
  originalQuestionId: NullableStringFieldUpdateOperationsInput
  childrens: QuestionUncheckedUpdateManyWithoutOriginalQuestionInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  examquestions: ExamQuestionUncheckedUpdateManyWithoutQuestionInput
}

input QuestionUpdateanswersInput {
  set: [String]
  push: [String]
}

input QuestionUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: EnumQuestionTypeFieldUpdateOperationsInput
  contentType: EnumContentTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  answerType: EnumContentTypeFieldUpdateOperationsInput
  answers: [String]
  user: UserUpdateOneRequiredWithoutQuestionsInput
  originalQuestion: QuestionUpdateOneWithoutChildrensInput
  childrens: QuestionUpdateManyWithoutOriginalQuestionInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  examquestions: ExamQuestionUpdateManyWithoutQuestionInput
}

input QuestionUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: EnumQuestionTypeFieldUpdateOperationsInput
  contentType: EnumContentTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  answerType: EnumContentTypeFieldUpdateOperationsInput
  answers: [String]
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input QuestionUpdateManyWithoutOriginalQuestionInput {
  create: [QuestionCreateWithoutOriginalQuestionInput]
  connectOrCreate: [QuestionCreateOrConnectWithoutOriginalQuestionInput]
  upsert: [QuestionUpsertWithWhereUniqueWithoutOriginalQuestionInput]
  createMany: QuestionCreateManyOriginalQuestionInputEnvelope
  set: [QuestionWhereUniqueInput]
  disconnect: [QuestionWhereUniqueInput]
  delete: [QuestionWhereUniqueInput]
  connect: [QuestionWhereUniqueInput]
  update: [QuestionUpdateWithWhereUniqueWithoutOriginalQuestionInput]
  updateMany: [QuestionUpdateManyWithWhereWithoutOriginalQuestionInput]
  deleteMany: [QuestionScalarWhereInput]
}

input QuestionUpdateManyWithoutUserInput {
  create: [QuestionCreateWithoutUserInput]
  connectOrCreate: [QuestionCreateOrConnectWithoutUserInput]
  upsert: [QuestionUpsertWithWhereUniqueWithoutUserInput]
  createMany: QuestionCreateManyUserInputEnvelope
  set: [QuestionWhereUniqueInput]
  disconnect: [QuestionWhereUniqueInput]
  delete: [QuestionWhereUniqueInput]
  connect: [QuestionWhereUniqueInput]
  update: [QuestionUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [QuestionUpdateManyWithWhereWithoutUserInput]
  deleteMany: [QuestionScalarWhereInput]
}

input QuestionUpdateManyWithWhereWithoutOriginalQuestionInput {
  where: QuestionScalarWhereInput!
  data: QuestionUncheckedUpdateManyWithoutChildrensInput!
}

input QuestionUpdateManyWithWhereWithoutUserInput {
  where: QuestionScalarWhereInput!
  data: QuestionUncheckedUpdateManyWithoutQuestionsInput!
}

input QuestionUpdateOneRequiredWithoutExamquestionsInput {
  create: QuestionUncheckedCreateWithoutExamquestionsInput
  connectOrCreate: QuestionCreateOrConnectWithoutExamquestionsInput
  upsert: QuestionUpsertWithoutExamquestionsInput
  connect: QuestionWhereUniqueInput
  update: QuestionUncheckedUpdateWithoutExamquestionsInput
}

input QuestionUpdateOneWithoutChildrensInput {
  create: QuestionUncheckedCreateWithoutChildrensInput
  connectOrCreate: QuestionCreateOrConnectWithoutChildrensInput
  upsert: QuestionUpsertWithoutChildrensInput
  disconnect: Boolean
  delete: Boolean
  connect: QuestionWhereUniqueInput
  update: QuestionUncheckedUpdateWithoutChildrensInput
}

input QuestionUpdateWithoutChildrensInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: EnumQuestionTypeFieldUpdateOperationsInput
  contentType: EnumContentTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  answerType: EnumContentTypeFieldUpdateOperationsInput
  answers: [String]
  user: UserUpdateOneRequiredWithoutQuestionsInput
  originalQuestion: QuestionUpdateOneWithoutChildrensInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  examquestions: ExamQuestionUpdateManyWithoutQuestionInput
}

input QuestionUpdateWithoutExamquestionsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: EnumQuestionTypeFieldUpdateOperationsInput
  contentType: EnumContentTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  answerType: EnumContentTypeFieldUpdateOperationsInput
  answers: [String]
  user: UserUpdateOneRequiredWithoutQuestionsInput
  originalQuestion: QuestionUpdateOneWithoutChildrensInput
  childrens: QuestionUpdateManyWithoutOriginalQuestionInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input QuestionUpdateWithoutOriginalQuestionInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: EnumQuestionTypeFieldUpdateOperationsInput
  contentType: EnumContentTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  answerType: EnumContentTypeFieldUpdateOperationsInput
  answers: [String]
  user: UserUpdateOneRequiredWithoutQuestionsInput
  childrens: QuestionUpdateManyWithoutOriginalQuestionInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  examquestions: ExamQuestionUpdateManyWithoutQuestionInput
}

input QuestionUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: EnumQuestionTypeFieldUpdateOperationsInput
  contentType: EnumContentTypeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  answerType: EnumContentTypeFieldUpdateOperationsInput
  answers: [String]
  originalQuestion: QuestionUpdateOneWithoutChildrensInput
  childrens: QuestionUpdateManyWithoutOriginalQuestionInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  examquestions: ExamQuestionUpdateManyWithoutQuestionInput
}

input QuestionUpdateWithWhereUniqueWithoutOriginalQuestionInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUncheckedUpdateWithoutOriginalQuestionInput!
}

input QuestionUpdateWithWhereUniqueWithoutUserInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUncheckedUpdateWithoutUserInput!
}

input QuestionUpsertWithoutChildrensInput {
  update: QuestionUncheckedUpdateWithoutChildrensInput!
  create: QuestionUncheckedCreateWithoutChildrensInput!
}

input QuestionUpsertWithoutExamquestionsInput {
  update: QuestionUncheckedUpdateWithoutExamquestionsInput!
  create: QuestionUncheckedCreateWithoutExamquestionsInput!
}

input QuestionUpsertWithWhereUniqueWithoutOriginalQuestionInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUncheckedUpdateWithoutOriginalQuestionInput!
  create: QuestionUncheckedCreateWithoutOriginalQuestionInput!
}

input QuestionUpsertWithWhereUniqueWithoutUserInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUncheckedUpdateWithoutUserInput!
  create: QuestionUncheckedCreateWithoutUserInput!
}

input QuestionWhereInput {
  AND: [QuestionWhereInput]
  OR: [QuestionWhereInput]
  NOT: [QuestionWhereInput]
  id: StringFilter
  name: StringFilter
  type: EnumQuestionTypeFilter
  contentType: EnumContentTypeFilter
  content: StringFilter
  answerType: EnumContentTypeFilter
  answers: StringNullableListFilter
  userId: StringFilter
  user: UserWhereInput
  originalQuestionId: StringNullableFilter
  originalQuestion: QuestionWhereInput
  childrens: QuestionListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  examquestions: ExamQuestionListRelationFilter
}

input QuestionWhereUniqueInput {
  id: String
}

type Regency {
  id: String!
  name: String!
  provinceId: String!
  province: Province!
  users(where: UserWhereInput, orderBy: UserOrderByWithRelationInput, cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: UserScalarFieldEnum): [User!]!
  School(where: SchoolWhereInput, orderBy: SchoolOrderByWithRelationInput, cursor: SchoolWhereUniqueInput, take: Int, skip: Int, distinct: SchoolScalarFieldEnum): [School!]!
  _count: RegencyCountOutputType!
}

type RegencyCountAggregateOutputType {
  id: Int!
  name: Int!
  provinceId: Int!
  _all: Int!
}

input RegencyCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  provinceId: SortOrder
}

type RegencyCountOutputType {
  users: Int!
  School: Int!
}

input RegencyCreateInput {
  id: String
  name: String!
  province: ProvinceCreateNestedOneWithoutRegenciesInput!
  users: UserCreateNestedManyWithoutRegencyInput
  School: SchoolCreateNestedManyWithoutRegencyInput
}

input RegencyCreateManyInput {
  id: String
  name: String!
  provinceId: String!
}

input RegencyCreateManyProvinceInput {
  id: String
  name: String!
}

input RegencyCreateManyProvinceInputEnvelope {
  data: RegencyCreateManyProvinceInput!
  skipDuplicates: Boolean
}

input RegencyCreateNestedManyWithoutProvinceInput {
  create: [RegencyCreateWithoutProvinceInput]
  connectOrCreate: [RegencyCreateOrConnectWithoutProvinceInput]
  createMany: RegencyCreateManyProvinceInputEnvelope
  connect: [RegencyWhereUniqueInput]
}

input RegencyCreateNestedOneWithoutSchoolInput {
  create: RegencyUncheckedCreateWithoutSchoolInput
  connectOrCreate: RegencyCreateOrConnectWithoutSchoolInput
  connect: RegencyWhereUniqueInput
}

input RegencyCreateNestedOneWithoutUsersInput {
  create: RegencyUncheckedCreateWithoutUsersInput
  connectOrCreate: RegencyCreateOrConnectWithoutUsersInput
  connect: RegencyWhereUniqueInput
}

input RegencyCreateOrConnectWithoutProvinceInput {
  where: RegencyWhereUniqueInput!
  create: RegencyUncheckedCreateWithoutProvinceInput!
}

input RegencyCreateOrConnectWithoutSchoolInput {
  where: RegencyWhereUniqueInput!
  create: RegencyUncheckedCreateWithoutSchoolInput!
}

input RegencyCreateOrConnectWithoutUsersInput {
  where: RegencyWhereUniqueInput!
  create: RegencyUncheckedCreateWithoutUsersInput!
}

input RegencyCreateWithoutProvinceInput {
  id: String
  name: String!
  users: UserCreateNestedManyWithoutRegencyInput
  School: SchoolCreateNestedManyWithoutRegencyInput
}

input RegencyCreateWithoutSchoolInput {
  id: String
  name: String!
  province: ProvinceCreateNestedOneWithoutRegenciesInput!
  users: UserCreateNestedManyWithoutRegencyInput
}

input RegencyCreateWithoutUsersInput {
  id: String
  name: String!
  province: ProvinceCreateNestedOneWithoutRegenciesInput!
  School: SchoolCreateNestedManyWithoutRegencyInput
}

input RegencyListRelationFilter {
  every: RegencyWhereInput
  some: RegencyWhereInput
  none: RegencyWhereInput
}

type RegencyMaxAggregateOutputType {
  id: String
  name: String
  provinceId: String
}

input RegencyMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  provinceId: SortOrder
}

type RegencyMinAggregateOutputType {
  id: String
  name: String
  provinceId: String
}

input RegencyMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  provinceId: SortOrder
}

input RegencyOrderByRelationAggregateInput {
  _count: SortOrder
}

input RegencyOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  provinceId: SortOrder
  _count: RegencyCountOrderByAggregateInput
  _max: RegencyMaxOrderByAggregateInput
  _min: RegencyMinOrderByAggregateInput
}

input RegencyOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  provinceId: SortOrder
  province: ProvinceOrderByWithRelationInput
  users: UserOrderByRelationAggregateInput
  School: SchoolOrderByRelationAggregateInput
}

input RegencyRelationFilter {
  is: RegencyWhereInput
  isNot: RegencyWhereInput
}

enum RegencyScalarFieldEnum {
  id
  name
  provinceId
}

input RegencyScalarWhereInput {
  AND: [RegencyScalarWhereInput]
  OR: [RegencyScalarWhereInput]
  NOT: [RegencyScalarWhereInput]
  id: StringFilter
  name: StringFilter
  provinceId: StringFilter
}

input RegencyScalarWhereWithAggregatesInput {
  AND: [RegencyScalarWhereWithAggregatesInput]
  OR: [RegencyScalarWhereWithAggregatesInput]
  NOT: [RegencyScalarWhereWithAggregatesInput]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  provinceId: StringWithAggregatesFilter
}

input RegencyUncheckedCreateInput {
  id: String
  name: String!
  provinceId: String!
  users: UserUncheckedCreateNestedManyWithoutRegencyInput
  School: SchoolUncheckedCreateNestedManyWithoutRegencyInput
}

input RegencyUncheckedCreateNestedManyWithoutProvinceInput {
  create: [RegencyCreateWithoutProvinceInput]
  connectOrCreate: [RegencyCreateOrConnectWithoutProvinceInput]
  createMany: RegencyCreateManyProvinceInputEnvelope
  connect: [RegencyWhereUniqueInput]
}

input RegencyUncheckedCreateWithoutProvinceInput {
  id: String
  name: String!
  users: UserUncheckedCreateNestedManyWithoutRegencyInput
  School: SchoolUncheckedCreateNestedManyWithoutRegencyInput
}

input RegencyUncheckedCreateWithoutSchoolInput {
  id: String
  name: String!
  provinceId: String!
  users: UserUncheckedCreateNestedManyWithoutRegencyInput
}

input RegencyUncheckedCreateWithoutUsersInput {
  id: String
  name: String!
  provinceId: String!
  School: SchoolUncheckedCreateNestedManyWithoutRegencyInput
}

input RegencyUncheckedUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  provinceId: StringFieldUpdateOperationsInput
  users: UserUncheckedUpdateManyWithoutRegencyInput
  School: SchoolUncheckedUpdateManyWithoutRegencyInput
}

input RegencyUncheckedUpdateManyInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  provinceId: StringFieldUpdateOperationsInput
}

input RegencyUncheckedUpdateManyWithoutProvinceInput {
  create: [RegencyCreateWithoutProvinceInput]
  connectOrCreate: [RegencyCreateOrConnectWithoutProvinceInput]
  upsert: [RegencyUpsertWithWhereUniqueWithoutProvinceInput]
  createMany: RegencyCreateManyProvinceInputEnvelope
  set: [RegencyWhereUniqueInput]
  disconnect: [RegencyWhereUniqueInput]
  delete: [RegencyWhereUniqueInput]
  connect: [RegencyWhereUniqueInput]
  update: [RegencyUpdateWithWhereUniqueWithoutProvinceInput]
  updateMany: [RegencyUpdateManyWithWhereWithoutProvinceInput]
  deleteMany: [RegencyScalarWhereInput]
}

input RegencyUncheckedUpdateManyWithoutRegenciesInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input RegencyUncheckedUpdateWithoutProvinceInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  users: UserUncheckedUpdateManyWithoutRegencyInput
  School: SchoolUncheckedUpdateManyWithoutRegencyInput
}

input RegencyUncheckedUpdateWithoutSchoolInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  provinceId: StringFieldUpdateOperationsInput
  users: UserUncheckedUpdateManyWithoutRegencyInput
}

input RegencyUncheckedUpdateWithoutUsersInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  provinceId: StringFieldUpdateOperationsInput
  School: SchoolUncheckedUpdateManyWithoutRegencyInput
}

input RegencyUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  province: ProvinceUpdateOneRequiredWithoutRegenciesInput
  users: UserUpdateManyWithoutRegencyInput
  School: SchoolUpdateManyWithoutRegencyInput
}

input RegencyUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input RegencyUpdateManyWithoutProvinceInput {
  create: [RegencyCreateWithoutProvinceInput]
  connectOrCreate: [RegencyCreateOrConnectWithoutProvinceInput]
  upsert: [RegencyUpsertWithWhereUniqueWithoutProvinceInput]
  createMany: RegencyCreateManyProvinceInputEnvelope
  set: [RegencyWhereUniqueInput]
  disconnect: [RegencyWhereUniqueInput]
  delete: [RegencyWhereUniqueInput]
  connect: [RegencyWhereUniqueInput]
  update: [RegencyUpdateWithWhereUniqueWithoutProvinceInput]
  updateMany: [RegencyUpdateManyWithWhereWithoutProvinceInput]
  deleteMany: [RegencyScalarWhereInput]
}

input RegencyUpdateManyWithWhereWithoutProvinceInput {
  where: RegencyScalarWhereInput!
  data: RegencyUncheckedUpdateManyWithoutRegenciesInput!
}

input RegencyUpdateOneRequiredWithoutSchoolInput {
  create: RegencyUncheckedCreateWithoutSchoolInput
  connectOrCreate: RegencyCreateOrConnectWithoutSchoolInput
  upsert: RegencyUpsertWithoutSchoolInput
  connect: RegencyWhereUniqueInput
  update: RegencyUncheckedUpdateWithoutSchoolInput
}

input RegencyUpdateOneRequiredWithoutUsersInput {
  create: RegencyUncheckedCreateWithoutUsersInput
  connectOrCreate: RegencyCreateOrConnectWithoutUsersInput
  upsert: RegencyUpsertWithoutUsersInput
  connect: RegencyWhereUniqueInput
  update: RegencyUncheckedUpdateWithoutUsersInput
}

input RegencyUpdateWithoutProvinceInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  users: UserUpdateManyWithoutRegencyInput
  School: SchoolUpdateManyWithoutRegencyInput
}

input RegencyUpdateWithoutSchoolInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  province: ProvinceUpdateOneRequiredWithoutRegenciesInput
  users: UserUpdateManyWithoutRegencyInput
}

input RegencyUpdateWithoutUsersInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  province: ProvinceUpdateOneRequiredWithoutRegenciesInput
  School: SchoolUpdateManyWithoutRegencyInput
}

input RegencyUpdateWithWhereUniqueWithoutProvinceInput {
  where: RegencyWhereUniqueInput!
  data: RegencyUncheckedUpdateWithoutProvinceInput!
}

input RegencyUpsertWithoutSchoolInput {
  update: RegencyUncheckedUpdateWithoutSchoolInput!
  create: RegencyUncheckedCreateWithoutSchoolInput!
}

input RegencyUpsertWithoutUsersInput {
  update: RegencyUncheckedUpdateWithoutUsersInput!
  create: RegencyUncheckedCreateWithoutUsersInput!
}

input RegencyUpsertWithWhereUniqueWithoutProvinceInput {
  where: RegencyWhereUniqueInput!
  update: RegencyUncheckedUpdateWithoutProvinceInput!
  create: RegencyUncheckedCreateWithoutProvinceInput!
}

input RegencyWhereInput {
  AND: [RegencyWhereInput]
  OR: [RegencyWhereInput]
  NOT: [RegencyWhereInput]
  id: StringFilter
  name: StringFilter
  provinceId: StringFilter
  province: ProvinceWhereInput
  users: UserListRelationFilter
  School: SchoolListRelationFilter
}

input RegencyWhereUniqueInput {
  id: String
}

enum Roles {
  STUDENT
  TEACHER
  PARENT
}

type School {
  id: String!
  name: String!
  npsn: String
  createdAt: DateTime!
  updatedAt: DateTime!
  classrooms(where: ClassroomWhereInput, orderBy: ClassroomOrderByWithRelationInput, cursor: ClassroomWhereUniqueInput, take: Int, skip: Int, distinct: ClassroomScalarFieldEnum): [Classroom!]!
  levels: [Int!]!
  type: String!
  address: String
  logoPath: String
  bannerPath: String
  provinceId: String!
  province: Province!
  regencyId: String!
  regency: Regency!
  schoolStaffs(where: SchoolStaffWhereInput, orderBy: SchoolStaffOrderByWithRelationInput, cursor: SchoolStaffWhereUniqueInput, take: Int, skip: Int, distinct: SchoolStaffScalarFieldEnum): [SchoolStaff!]!
  students(where: UserWhereInput, orderBy: UserOrderByWithRelationInput, cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: UserScalarFieldEnum): [User!]!
  _count: SchoolCountOutputType!
}

type SchoolAvgAggregateOutputType {
  levels: Float
}

input SchoolAvgOrderByAggregateInput {
  levels: SortOrder
}

type SchoolCountAggregateOutputType {
  id: Int!
  name: Int!
  npsn: Int!
  createdAt: Int!
  updatedAt: Int!
  levels: Int!
  type: Int!
  address: Int!
  logoPath: Int!
  bannerPath: Int!
  provinceId: Int!
  regencyId: Int!
  _all: Int!
}

input SchoolCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  npsn: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  levels: SortOrder
  type: SortOrder
  address: SortOrder
  logoPath: SortOrder
  bannerPath: SortOrder
  provinceId: SortOrder
  regencyId: SortOrder
}

type SchoolCountOutputType {
  classrooms: Int!
  schoolStaffs: Int!
  students: Int!
}

input SchoolCreateInput {
  id: String
  name: String!
  npsn: String
  createdAt: DateTime
  updatedAt: DateTime
  classrooms: ClassroomCreateNestedManyWithoutSchoolInput
  levels: [Int]
  type: String!
  address: String
  logoPath: String
  bannerPath: String
  province: ProvinceCreateNestedOneWithoutSchoolInput!
  regency: RegencyCreateNestedOneWithoutSchoolInput!
  schoolStaffs: SchoolStaffCreateNestedManyWithoutSchoolInput
  students: UserCreateNestedManyWithoutSchoolInput
}

input SchoolCreatelevelsInput {
  set: Int!
}

input SchoolCreateManyInput {
  id: String
  name: String!
  npsn: String
  createdAt: DateTime
  updatedAt: DateTime
  levels: [Int]
  type: String!
  address: String
  logoPath: String
  bannerPath: String
  provinceId: String!
  regencyId: String!
}

input SchoolCreateManyProvinceInput {
  id: String
  name: String!
  npsn: String
  createdAt: DateTime
  updatedAt: DateTime
  levels: [Int]
  type: String!
  address: String
  logoPath: String
  bannerPath: String
  regencyId: String!
}

input SchoolCreateManyProvinceInputEnvelope {
  data: SchoolCreateManyProvinceInput!
  skipDuplicates: Boolean
}

input SchoolCreateManyRegencyInput {
  id: String
  name: String!
  npsn: String
  createdAt: DateTime
  updatedAt: DateTime
  levels: [Int]
  type: String!
  address: String
  logoPath: String
  bannerPath: String
  provinceId: String!
}

input SchoolCreateManyRegencyInputEnvelope {
  data: SchoolCreateManyRegencyInput!
  skipDuplicates: Boolean
}

input SchoolCreateNestedManyWithoutProvinceInput {
  create: [SchoolCreateWithoutProvinceInput]
  connectOrCreate: [SchoolCreateOrConnectWithoutProvinceInput]
  createMany: SchoolCreateManyProvinceInputEnvelope
  connect: [SchoolWhereUniqueInput]
}

input SchoolCreateNestedManyWithoutRegencyInput {
  create: [SchoolCreateWithoutRegencyInput]
  connectOrCreate: [SchoolCreateOrConnectWithoutRegencyInput]
  createMany: SchoolCreateManyRegencyInputEnvelope
  connect: [SchoolWhereUniqueInput]
}

input SchoolCreateNestedOneWithoutClassroomsInput {
  create: SchoolUncheckedCreateWithoutClassroomsInput
  connectOrCreate: SchoolCreateOrConnectWithoutClassroomsInput
  connect: SchoolWhereUniqueInput
}

input SchoolCreateNestedOneWithoutSchoolStaffsInput {
  create: SchoolUncheckedCreateWithoutSchoolStaffsInput
  connectOrCreate: SchoolCreateOrConnectWithoutSchoolStaffsInput
  connect: SchoolWhereUniqueInput
}

input SchoolCreateNestedOneWithoutStudentsInput {
  create: SchoolUncheckedCreateWithoutStudentsInput
  connectOrCreate: SchoolCreateOrConnectWithoutStudentsInput
  connect: SchoolWhereUniqueInput
}

input SchoolCreateOrConnectWithoutClassroomsInput {
  where: SchoolWhereUniqueInput!
  create: SchoolUncheckedCreateWithoutClassroomsInput!
}

input SchoolCreateOrConnectWithoutProvinceInput {
  where: SchoolWhereUniqueInput!
  create: SchoolUncheckedCreateWithoutProvinceInput!
}

input SchoolCreateOrConnectWithoutRegencyInput {
  where: SchoolWhereUniqueInput!
  create: SchoolUncheckedCreateWithoutRegencyInput!
}

input SchoolCreateOrConnectWithoutSchoolStaffsInput {
  where: SchoolWhereUniqueInput!
  create: SchoolUncheckedCreateWithoutSchoolStaffsInput!
}

input SchoolCreateOrConnectWithoutStudentsInput {
  where: SchoolWhereUniqueInput!
  create: SchoolUncheckedCreateWithoutStudentsInput!
}

input SchoolCreateWithoutClassroomsInput {
  id: String
  name: String!
  npsn: String
  createdAt: DateTime
  updatedAt: DateTime
  levels: [Int]
  type: String!
  address: String
  logoPath: String
  bannerPath: String
  province: ProvinceCreateNestedOneWithoutSchoolInput!
  regency: RegencyCreateNestedOneWithoutSchoolInput!
  schoolStaffs: SchoolStaffCreateNestedManyWithoutSchoolInput
  students: UserCreateNestedManyWithoutSchoolInput
}

input SchoolCreateWithoutProvinceInput {
  id: String
  name: String!
  npsn: String
  createdAt: DateTime
  updatedAt: DateTime
  classrooms: ClassroomCreateNestedManyWithoutSchoolInput
  levels: [Int]
  type: String!
  address: String
  logoPath: String
  bannerPath: String
  regency: RegencyCreateNestedOneWithoutSchoolInput!
  schoolStaffs: SchoolStaffCreateNestedManyWithoutSchoolInput
  students: UserCreateNestedManyWithoutSchoolInput
}

input SchoolCreateWithoutRegencyInput {
  id: String
  name: String!
  npsn: String
  createdAt: DateTime
  updatedAt: DateTime
  classrooms: ClassroomCreateNestedManyWithoutSchoolInput
  levels: [Int]
  type: String!
  address: String
  logoPath: String
  bannerPath: String
  province: ProvinceCreateNestedOneWithoutSchoolInput!
  schoolStaffs: SchoolStaffCreateNestedManyWithoutSchoolInput
  students: UserCreateNestedManyWithoutSchoolInput
}

input SchoolCreateWithoutSchoolStaffsInput {
  id: String
  name: String!
  npsn: String
  createdAt: DateTime
  updatedAt: DateTime
  classrooms: ClassroomCreateNestedManyWithoutSchoolInput
  levels: [Int]
  type: String!
  address: String
  logoPath: String
  bannerPath: String
  province: ProvinceCreateNestedOneWithoutSchoolInput!
  regency: RegencyCreateNestedOneWithoutSchoolInput!
  students: UserCreateNestedManyWithoutSchoolInput
}

input SchoolCreateWithoutStudentsInput {
  id: String
  name: String!
  npsn: String
  createdAt: DateTime
  updatedAt: DateTime
  classrooms: ClassroomCreateNestedManyWithoutSchoolInput
  levels: [Int]
  type: String!
  address: String
  logoPath: String
  bannerPath: String
  province: ProvinceCreateNestedOneWithoutSchoolInput!
  regency: RegencyCreateNestedOneWithoutSchoolInput!
  schoolStaffs: SchoolStaffCreateNestedManyWithoutSchoolInput
}

input SchoolListRelationFilter {
  every: SchoolWhereInput
  some: SchoolWhereInput
  none: SchoolWhereInput
}

type SchoolMaxAggregateOutputType {
  id: String
  name: String
  npsn: String
  createdAt: DateTime
  updatedAt: DateTime
  type: String
  address: String
  logoPath: String
  bannerPath: String
  provinceId: String
  regencyId: String
}

input SchoolMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  npsn: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  type: SortOrder
  address: SortOrder
  logoPath: SortOrder
  bannerPath: SortOrder
  provinceId: SortOrder
  regencyId: SortOrder
}

type SchoolMinAggregateOutputType {
  id: String
  name: String
  npsn: String
  createdAt: DateTime
  updatedAt: DateTime
  type: String
  address: String
  logoPath: String
  bannerPath: String
  provinceId: String
  regencyId: String
}

input SchoolMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  npsn: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  type: SortOrder
  address: SortOrder
  logoPath: SortOrder
  bannerPath: SortOrder
  provinceId: SortOrder
  regencyId: SortOrder
}

input SchoolOrderByRelationAggregateInput {
  _count: SortOrder
}

input SchoolOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  npsn: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  levels: SortOrder
  type: SortOrder
  address: SortOrder
  logoPath: SortOrder
  bannerPath: SortOrder
  provinceId: SortOrder
  regencyId: SortOrder
  _count: SchoolCountOrderByAggregateInput
  _avg: SchoolAvgOrderByAggregateInput
  _max: SchoolMaxOrderByAggregateInput
  _min: SchoolMinOrderByAggregateInput
  _sum: SchoolSumOrderByAggregateInput
}

input SchoolOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  npsn: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  classrooms: ClassroomOrderByRelationAggregateInput
  levels: SortOrder
  type: SortOrder
  address: SortOrder
  logoPath: SortOrder
  bannerPath: SortOrder
  provinceId: SortOrder
  province: ProvinceOrderByWithRelationInput
  regencyId: SortOrder
  regency: RegencyOrderByWithRelationInput
  schoolStaffs: SchoolStaffOrderByRelationAggregateInput
  students: UserOrderByRelationAggregateInput
}

input SchoolRelationFilter {
  is: SchoolWhereInput
  isNot: SchoolWhereInput
}

enum SchoolScalarFieldEnum {
  id
  name
  npsn
  createdAt
  updatedAt
  levels
  type
  address
  logoPath
  bannerPath
  provinceId
  regencyId
}

input SchoolScalarWhereInput {
  AND: [SchoolScalarWhereInput]
  OR: [SchoolScalarWhereInput]
  NOT: [SchoolScalarWhereInput]
  id: StringFilter
  name: StringFilter
  npsn: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  levels: IntNullableListFilter
  type: StringFilter
  address: StringNullableFilter
  logoPath: StringNullableFilter
  bannerPath: StringNullableFilter
  provinceId: StringFilter
  regencyId: StringFilter
}

input SchoolScalarWhereWithAggregatesInput {
  AND: [SchoolScalarWhereWithAggregatesInput]
  OR: [SchoolScalarWhereWithAggregatesInput]
  NOT: [SchoolScalarWhereWithAggregatesInput]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  npsn: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  levels: IntNullableListFilter
  type: StringWithAggregatesFilter
  address: StringNullableWithAggregatesFilter
  logoPath: StringNullableWithAggregatesFilter
  bannerPath: StringNullableWithAggregatesFilter
  provinceId: StringWithAggregatesFilter
  regencyId: StringWithAggregatesFilter
}

type SchoolStaff {
  id: String!
  schoolId: String!
  school: School!
  userId: String!
  user: User!
  roles: [SchoolStaffRoles!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SchoolStaffCountAggregateOutputType {
  id: Int!
  schoolId: Int!
  userId: Int!
  roles: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

input SchoolStaffCountOrderByAggregateInput {
  id: SortOrder
  schoolId: SortOrder
  userId: SortOrder
  roles: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input SchoolStaffCreateInput {
  id: String
  school: SchoolCreateNestedOneWithoutSchoolStaffsInput!
  user: UserCreateNestedOneWithoutSchoolStaffsInput!
  roles: [SchoolStaffRoles]
  createdAt: DateTime
  updatedAt: DateTime
}

input SchoolStaffCreateManyInput {
  id: String
  schoolId: String!
  userId: String!
  roles: [SchoolStaffRoles]
  createdAt: DateTime
  updatedAt: DateTime
}

input SchoolStaffCreateManySchoolInput {
  id: String
  userId: String!
  roles: [SchoolStaffRoles]
  createdAt: DateTime
  updatedAt: DateTime
}

input SchoolStaffCreateManySchoolInputEnvelope {
  data: SchoolStaffCreateManySchoolInput!
  skipDuplicates: Boolean
}

input SchoolStaffCreateManyUserInput {
  id: String
  schoolId: String!
  roles: [SchoolStaffRoles]
  createdAt: DateTime
  updatedAt: DateTime
}

input SchoolStaffCreateManyUserInputEnvelope {
  data: SchoolStaffCreateManyUserInput!
  skipDuplicates: Boolean
}

input SchoolStaffCreateNestedManyWithoutSchoolInput {
  create: [SchoolStaffCreateWithoutSchoolInput]
  connectOrCreate: [SchoolStaffCreateOrConnectWithoutSchoolInput]
  createMany: SchoolStaffCreateManySchoolInputEnvelope
  connect: [SchoolStaffWhereUniqueInput]
}

input SchoolStaffCreateNestedManyWithoutUserInput {
  create: [SchoolStaffCreateWithoutUserInput]
  connectOrCreate: [SchoolStaffCreateOrConnectWithoutUserInput]
  createMany: SchoolStaffCreateManyUserInputEnvelope
  connect: [SchoolStaffWhereUniqueInput]
}

input SchoolStaffCreateOrConnectWithoutSchoolInput {
  where: SchoolStaffWhereUniqueInput!
  create: SchoolStaffUncheckedCreateWithoutSchoolInput!
}

input SchoolStaffCreateOrConnectWithoutUserInput {
  where: SchoolStaffWhereUniqueInput!
  create: SchoolStaffUncheckedCreateWithoutUserInput!
}

input SchoolStaffCreaterolesInput {
  set: SchoolStaffRoles!
}

input SchoolStaffCreateWithoutSchoolInput {
  id: String
  user: UserCreateNestedOneWithoutSchoolStaffsInput!
  roles: [SchoolStaffRoles]
  createdAt: DateTime
  updatedAt: DateTime
}

input SchoolStaffCreateWithoutUserInput {
  id: String
  school: SchoolCreateNestedOneWithoutSchoolStaffsInput!
  roles: [SchoolStaffRoles]
  createdAt: DateTime
  updatedAt: DateTime
}

input SchoolStaffListRelationFilter {
  every: SchoolStaffWhereInput
  some: SchoolStaffWhereInput
  none: SchoolStaffWhereInput
}

type SchoolStaffMaxAggregateOutputType {
  id: String
  schoolId: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input SchoolStaffMaxOrderByAggregateInput {
  id: SortOrder
  schoolId: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

type SchoolStaffMinAggregateOutputType {
  id: String
  schoolId: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input SchoolStaffMinOrderByAggregateInput {
  id: SortOrder
  schoolId: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input SchoolStaffOrderByRelationAggregateInput {
  _count: SortOrder
}

input SchoolStaffOrderByWithAggregationInput {
  id: SortOrder
  schoolId: SortOrder
  userId: SortOrder
  roles: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: SchoolStaffCountOrderByAggregateInput
  _max: SchoolStaffMaxOrderByAggregateInput
  _min: SchoolStaffMinOrderByAggregateInput
}

input SchoolStaffOrderByWithRelationInput {
  id: SortOrder
  schoolId: SortOrder
  school: SchoolOrderByWithRelationInput
  userId: SortOrder
  user: UserOrderByWithRelationInput
  roles: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

enum SchoolStaffRoles {
  TEACHER
  HEADMASTER
}

enum SchoolStaffScalarFieldEnum {
  id
  schoolId
  userId
  roles
  createdAt
  updatedAt
}

input SchoolStaffScalarWhereInput {
  AND: [SchoolStaffScalarWhereInput]
  OR: [SchoolStaffScalarWhereInput]
  NOT: [SchoolStaffScalarWhereInput]
  id: StringFilter
  schoolId: StringFilter
  userId: StringFilter
  roles: EnumSchoolStaffRolesNullableListFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input SchoolStaffScalarWhereWithAggregatesInput {
  AND: [SchoolStaffScalarWhereWithAggregatesInput]
  OR: [SchoolStaffScalarWhereWithAggregatesInput]
  NOT: [SchoolStaffScalarWhereWithAggregatesInput]
  id: StringWithAggregatesFilter
  schoolId: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
  roles: EnumSchoolStaffRolesNullableListFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input SchoolStaffUncheckedCreateInput {
  id: String
  schoolId: String!
  userId: String!
  roles: [SchoolStaffRoles]
  createdAt: DateTime
  updatedAt: DateTime
}

input SchoolStaffUncheckedCreateNestedManyWithoutSchoolInput {
  create: [SchoolStaffCreateWithoutSchoolInput]
  connectOrCreate: [SchoolStaffCreateOrConnectWithoutSchoolInput]
  createMany: SchoolStaffCreateManySchoolInputEnvelope
  connect: [SchoolStaffWhereUniqueInput]
}

input SchoolStaffUncheckedCreateNestedManyWithoutUserInput {
  create: [SchoolStaffCreateWithoutUserInput]
  connectOrCreate: [SchoolStaffCreateOrConnectWithoutUserInput]
  createMany: SchoolStaffCreateManyUserInputEnvelope
  connect: [SchoolStaffWhereUniqueInput]
}

input SchoolStaffUncheckedCreateWithoutSchoolInput {
  id: String
  userId: String!
  roles: [SchoolStaffRoles]
  createdAt: DateTime
  updatedAt: DateTime
}

input SchoolStaffUncheckedCreateWithoutUserInput {
  id: String
  schoolId: String!
  roles: [SchoolStaffRoles]
  createdAt: DateTime
  updatedAt: DateTime
}

input SchoolStaffUncheckedUpdateInput {
  id: StringFieldUpdateOperationsInput
  schoolId: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
  roles: [SchoolStaffRoles]
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SchoolStaffUncheckedUpdateManyInput {
  id: StringFieldUpdateOperationsInput
  schoolId: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
  roles: [SchoolStaffRoles]
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SchoolStaffUncheckedUpdateManyWithoutSchoolInput {
  create: [SchoolStaffCreateWithoutSchoolInput]
  connectOrCreate: [SchoolStaffCreateOrConnectWithoutSchoolInput]
  upsert: [SchoolStaffUpsertWithWhereUniqueWithoutSchoolInput]
  createMany: SchoolStaffCreateManySchoolInputEnvelope
  set: [SchoolStaffWhereUniqueInput]
  disconnect: [SchoolStaffWhereUniqueInput]
  delete: [SchoolStaffWhereUniqueInput]
  connect: [SchoolStaffWhereUniqueInput]
  update: [SchoolStaffUpdateWithWhereUniqueWithoutSchoolInput]
  updateMany: [SchoolStaffUpdateManyWithWhereWithoutSchoolInput]
  deleteMany: [SchoolStaffScalarWhereInput]
}

input SchoolStaffUncheckedUpdateManyWithoutSchoolStaffsInput {
  id: StringFieldUpdateOperationsInput
  schoolId: StringFieldUpdateOperationsInput
  roles: [SchoolStaffRoles]
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SchoolStaffUncheckedUpdateManyWithoutUserInput {
  create: [SchoolStaffCreateWithoutUserInput]
  connectOrCreate: [SchoolStaffCreateOrConnectWithoutUserInput]
  upsert: [SchoolStaffUpsertWithWhereUniqueWithoutUserInput]
  createMany: SchoolStaffCreateManyUserInputEnvelope
  set: [SchoolStaffWhereUniqueInput]
  disconnect: [SchoolStaffWhereUniqueInput]
  delete: [SchoolStaffWhereUniqueInput]
  connect: [SchoolStaffWhereUniqueInput]
  update: [SchoolStaffUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [SchoolStaffUpdateManyWithWhereWithoutUserInput]
  deleteMany: [SchoolStaffScalarWhereInput]
}

input SchoolStaffUncheckedUpdateWithoutSchoolInput {
  id: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
  roles: [SchoolStaffRoles]
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SchoolStaffUncheckedUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  schoolId: StringFieldUpdateOperationsInput
  roles: [SchoolStaffRoles]
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SchoolStaffUpdateInput {
  id: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneRequiredWithoutSchoolStaffsInput
  user: UserUpdateOneRequiredWithoutSchoolStaffsInput
  roles: [SchoolStaffRoles]
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SchoolStaffUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  roles: [SchoolStaffRoles]
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SchoolStaffUpdateManyWithoutSchoolInput {
  create: [SchoolStaffCreateWithoutSchoolInput]
  connectOrCreate: [SchoolStaffCreateOrConnectWithoutSchoolInput]
  upsert: [SchoolStaffUpsertWithWhereUniqueWithoutSchoolInput]
  createMany: SchoolStaffCreateManySchoolInputEnvelope
  set: [SchoolStaffWhereUniqueInput]
  disconnect: [SchoolStaffWhereUniqueInput]
  delete: [SchoolStaffWhereUniqueInput]
  connect: [SchoolStaffWhereUniqueInput]
  update: [SchoolStaffUpdateWithWhereUniqueWithoutSchoolInput]
  updateMany: [SchoolStaffUpdateManyWithWhereWithoutSchoolInput]
  deleteMany: [SchoolStaffScalarWhereInput]
}

input SchoolStaffUpdateManyWithoutUserInput {
  create: [SchoolStaffCreateWithoutUserInput]
  connectOrCreate: [SchoolStaffCreateOrConnectWithoutUserInput]
  upsert: [SchoolStaffUpsertWithWhereUniqueWithoutUserInput]
  createMany: SchoolStaffCreateManyUserInputEnvelope
  set: [SchoolStaffWhereUniqueInput]
  disconnect: [SchoolStaffWhereUniqueInput]
  delete: [SchoolStaffWhereUniqueInput]
  connect: [SchoolStaffWhereUniqueInput]
  update: [SchoolStaffUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [SchoolStaffUpdateManyWithWhereWithoutUserInput]
  deleteMany: [SchoolStaffScalarWhereInput]
}

input SchoolStaffUpdateManyWithWhereWithoutSchoolInput {
  where: SchoolStaffScalarWhereInput!
  data: SchoolStaffUncheckedUpdateManyWithoutSchoolStaffsInput!
}

input SchoolStaffUpdateManyWithWhereWithoutUserInput {
  where: SchoolStaffScalarWhereInput!
  data: SchoolStaffUncheckedUpdateManyWithoutSchoolStaffsInput!
}

input SchoolStaffUpdaterolesInput {
  set: [SchoolStaffRoles]
  push: [SchoolStaffRoles]
}

input SchoolStaffUpdateWithoutSchoolInput {
  id: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutSchoolStaffsInput
  roles: [SchoolStaffRoles]
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SchoolStaffUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneRequiredWithoutSchoolStaffsInput
  roles: [SchoolStaffRoles]
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SchoolStaffUpdateWithWhereUniqueWithoutSchoolInput {
  where: SchoolStaffWhereUniqueInput!
  data: SchoolStaffUncheckedUpdateWithoutSchoolInput!
}

input SchoolStaffUpdateWithWhereUniqueWithoutUserInput {
  where: SchoolStaffWhereUniqueInput!
  data: SchoolStaffUncheckedUpdateWithoutUserInput!
}

input SchoolStaffUpsertWithWhereUniqueWithoutSchoolInput {
  where: SchoolStaffWhereUniqueInput!
  update: SchoolStaffUncheckedUpdateWithoutSchoolInput!
  create: SchoolStaffUncheckedCreateWithoutSchoolInput!
}

input SchoolStaffUpsertWithWhereUniqueWithoutUserInput {
  where: SchoolStaffWhereUniqueInput!
  update: SchoolStaffUncheckedUpdateWithoutUserInput!
  create: SchoolStaffUncheckedCreateWithoutUserInput!
}

input SchoolStaffWhereInput {
  AND: [SchoolStaffWhereInput]
  OR: [SchoolStaffWhereInput]
  NOT: [SchoolStaffWhereInput]
  id: StringFilter
  schoolId: StringFilter
  school: SchoolWhereInput
  userId: StringFilter
  user: UserWhereInput
  roles: EnumSchoolStaffRolesNullableListFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input SchoolStaffWhereUniqueInput {
  id: String
}

type SchoolSumAggregateOutputType {
  levels: Int
}

input SchoolSumOrderByAggregateInput {
  levels: SortOrder
}

input SchoolUncheckedCreateInput {
  id: String
  name: String!
  npsn: String
  createdAt: DateTime
  updatedAt: DateTime
  classrooms: ClassroomUncheckedCreateNestedManyWithoutSchoolInput
  levels: [Int]
  type: String!
  address: String
  logoPath: String
  bannerPath: String
  provinceId: String!
  regencyId: String!
  schoolStaffs: SchoolStaffUncheckedCreateNestedManyWithoutSchoolInput
  students: UserUncheckedCreateNestedManyWithoutSchoolInput
}

input SchoolUncheckedCreateNestedManyWithoutProvinceInput {
  create: [SchoolCreateWithoutProvinceInput]
  connectOrCreate: [SchoolCreateOrConnectWithoutProvinceInput]
  createMany: SchoolCreateManyProvinceInputEnvelope
  connect: [SchoolWhereUniqueInput]
}

input SchoolUncheckedCreateNestedManyWithoutRegencyInput {
  create: [SchoolCreateWithoutRegencyInput]
  connectOrCreate: [SchoolCreateOrConnectWithoutRegencyInput]
  createMany: SchoolCreateManyRegencyInputEnvelope
  connect: [SchoolWhereUniqueInput]
}

input SchoolUncheckedCreateWithoutClassroomsInput {
  id: String
  name: String!
  npsn: String
  createdAt: DateTime
  updatedAt: DateTime
  levels: [Int]
  type: String!
  address: String
  logoPath: String
  bannerPath: String
  provinceId: String!
  regencyId: String!
  schoolStaffs: SchoolStaffUncheckedCreateNestedManyWithoutSchoolInput
  students: UserUncheckedCreateNestedManyWithoutSchoolInput
}

input SchoolUncheckedCreateWithoutProvinceInput {
  id: String
  name: String!
  npsn: String
  createdAt: DateTime
  updatedAt: DateTime
  classrooms: ClassroomUncheckedCreateNestedManyWithoutSchoolInput
  levels: [Int]
  type: String!
  address: String
  logoPath: String
  bannerPath: String
  regencyId: String!
  schoolStaffs: SchoolStaffUncheckedCreateNestedManyWithoutSchoolInput
  students: UserUncheckedCreateNestedManyWithoutSchoolInput
}

input SchoolUncheckedCreateWithoutRegencyInput {
  id: String
  name: String!
  npsn: String
  createdAt: DateTime
  updatedAt: DateTime
  classrooms: ClassroomUncheckedCreateNestedManyWithoutSchoolInput
  levels: [Int]
  type: String!
  address: String
  logoPath: String
  bannerPath: String
  provinceId: String!
  schoolStaffs: SchoolStaffUncheckedCreateNestedManyWithoutSchoolInput
  students: UserUncheckedCreateNestedManyWithoutSchoolInput
}

input SchoolUncheckedCreateWithoutSchoolStaffsInput {
  id: String
  name: String!
  npsn: String
  createdAt: DateTime
  updatedAt: DateTime
  classrooms: ClassroomUncheckedCreateNestedManyWithoutSchoolInput
  levels: [Int]
  type: String!
  address: String
  logoPath: String
  bannerPath: String
  provinceId: String!
  regencyId: String!
  students: UserUncheckedCreateNestedManyWithoutSchoolInput
}

input SchoolUncheckedCreateWithoutStudentsInput {
  id: String
  name: String!
  npsn: String
  createdAt: DateTime
  updatedAt: DateTime
  classrooms: ClassroomUncheckedCreateNestedManyWithoutSchoolInput
  levels: [Int]
  type: String!
  address: String
  logoPath: String
  bannerPath: String
  provinceId: String!
  regencyId: String!
  schoolStaffs: SchoolStaffUncheckedCreateNestedManyWithoutSchoolInput
}

input SchoolUncheckedUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  npsn: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  classrooms: ClassroomUncheckedUpdateManyWithoutSchoolInput
  levels: [Int]
  type: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  logoPath: NullableStringFieldUpdateOperationsInput
  bannerPath: NullableStringFieldUpdateOperationsInput
  provinceId: StringFieldUpdateOperationsInput
  regencyId: StringFieldUpdateOperationsInput
  schoolStaffs: SchoolStaffUncheckedUpdateManyWithoutSchoolInput
  students: UserUncheckedUpdateManyWithoutSchoolInput
}

input SchoolUncheckedUpdateManyInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  npsn: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  levels: [Int]
  type: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  logoPath: NullableStringFieldUpdateOperationsInput
  bannerPath: NullableStringFieldUpdateOperationsInput
  provinceId: StringFieldUpdateOperationsInput
  regencyId: StringFieldUpdateOperationsInput
}

input SchoolUncheckedUpdateManyWithoutProvinceInput {
  create: [SchoolCreateWithoutProvinceInput]
  connectOrCreate: [SchoolCreateOrConnectWithoutProvinceInput]
  upsert: [SchoolUpsertWithWhereUniqueWithoutProvinceInput]
  createMany: SchoolCreateManyProvinceInputEnvelope
  set: [SchoolWhereUniqueInput]
  disconnect: [SchoolWhereUniqueInput]
  delete: [SchoolWhereUniqueInput]
  connect: [SchoolWhereUniqueInput]
  update: [SchoolUpdateWithWhereUniqueWithoutProvinceInput]
  updateMany: [SchoolUpdateManyWithWhereWithoutProvinceInput]
  deleteMany: [SchoolScalarWhereInput]
}

input SchoolUncheckedUpdateManyWithoutRegencyInput {
  create: [SchoolCreateWithoutRegencyInput]
  connectOrCreate: [SchoolCreateOrConnectWithoutRegencyInput]
  upsert: [SchoolUpsertWithWhereUniqueWithoutRegencyInput]
  createMany: SchoolCreateManyRegencyInputEnvelope
  set: [SchoolWhereUniqueInput]
  disconnect: [SchoolWhereUniqueInput]
  delete: [SchoolWhereUniqueInput]
  connect: [SchoolWhereUniqueInput]
  update: [SchoolUpdateWithWhereUniqueWithoutRegencyInput]
  updateMany: [SchoolUpdateManyWithWhereWithoutRegencyInput]
  deleteMany: [SchoolScalarWhereInput]
}

input SchoolUncheckedUpdateManyWithoutSchoolInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  npsn: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  levels: [Int]
  type: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  logoPath: NullableStringFieldUpdateOperationsInput
  bannerPath: NullableStringFieldUpdateOperationsInput
  regencyId: StringFieldUpdateOperationsInput
}

input SchoolUncheckedUpdateWithoutClassroomsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  npsn: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  levels: [Int]
  type: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  logoPath: NullableStringFieldUpdateOperationsInput
  bannerPath: NullableStringFieldUpdateOperationsInput
  provinceId: StringFieldUpdateOperationsInput
  regencyId: StringFieldUpdateOperationsInput
  schoolStaffs: SchoolStaffUncheckedUpdateManyWithoutSchoolInput
  students: UserUncheckedUpdateManyWithoutSchoolInput
}

input SchoolUncheckedUpdateWithoutProvinceInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  npsn: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  classrooms: ClassroomUncheckedUpdateManyWithoutSchoolInput
  levels: [Int]
  type: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  logoPath: NullableStringFieldUpdateOperationsInput
  bannerPath: NullableStringFieldUpdateOperationsInput
  regencyId: StringFieldUpdateOperationsInput
  schoolStaffs: SchoolStaffUncheckedUpdateManyWithoutSchoolInput
  students: UserUncheckedUpdateManyWithoutSchoolInput
}

input SchoolUncheckedUpdateWithoutRegencyInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  npsn: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  classrooms: ClassroomUncheckedUpdateManyWithoutSchoolInput
  levels: [Int]
  type: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  logoPath: NullableStringFieldUpdateOperationsInput
  bannerPath: NullableStringFieldUpdateOperationsInput
  provinceId: StringFieldUpdateOperationsInput
  schoolStaffs: SchoolStaffUncheckedUpdateManyWithoutSchoolInput
  students: UserUncheckedUpdateManyWithoutSchoolInput
}

input SchoolUncheckedUpdateWithoutSchoolStaffsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  npsn: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  classrooms: ClassroomUncheckedUpdateManyWithoutSchoolInput
  levels: [Int]
  type: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  logoPath: NullableStringFieldUpdateOperationsInput
  bannerPath: NullableStringFieldUpdateOperationsInput
  provinceId: StringFieldUpdateOperationsInput
  regencyId: StringFieldUpdateOperationsInput
  students: UserUncheckedUpdateManyWithoutSchoolInput
}

input SchoolUncheckedUpdateWithoutStudentsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  npsn: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  classrooms: ClassroomUncheckedUpdateManyWithoutSchoolInput
  levels: [Int]
  type: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  logoPath: NullableStringFieldUpdateOperationsInput
  bannerPath: NullableStringFieldUpdateOperationsInput
  provinceId: StringFieldUpdateOperationsInput
  regencyId: StringFieldUpdateOperationsInput
  schoolStaffs: SchoolStaffUncheckedUpdateManyWithoutSchoolInput
}

input SchoolUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  npsn: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  classrooms: ClassroomUpdateManyWithoutSchoolInput
  levels: [Int]
  type: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  logoPath: NullableStringFieldUpdateOperationsInput
  bannerPath: NullableStringFieldUpdateOperationsInput
  province: ProvinceUpdateOneRequiredWithoutSchoolInput
  regency: RegencyUpdateOneRequiredWithoutSchoolInput
  schoolStaffs: SchoolStaffUpdateManyWithoutSchoolInput
  students: UserUpdateManyWithoutSchoolInput
}

input SchoolUpdatelevelsInput {
  set: [Int]
  push: [Int]
}

input SchoolUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  npsn: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  levels: [Int]
  type: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  logoPath: NullableStringFieldUpdateOperationsInput
  bannerPath: NullableStringFieldUpdateOperationsInput
}

input SchoolUpdateManyWithoutProvinceInput {
  create: [SchoolCreateWithoutProvinceInput]
  connectOrCreate: [SchoolCreateOrConnectWithoutProvinceInput]
  upsert: [SchoolUpsertWithWhereUniqueWithoutProvinceInput]
  createMany: SchoolCreateManyProvinceInputEnvelope
  set: [SchoolWhereUniqueInput]
  disconnect: [SchoolWhereUniqueInput]
  delete: [SchoolWhereUniqueInput]
  connect: [SchoolWhereUniqueInput]
  update: [SchoolUpdateWithWhereUniqueWithoutProvinceInput]
  updateMany: [SchoolUpdateManyWithWhereWithoutProvinceInput]
  deleteMany: [SchoolScalarWhereInput]
}

input SchoolUpdateManyWithoutRegencyInput {
  create: [SchoolCreateWithoutRegencyInput]
  connectOrCreate: [SchoolCreateOrConnectWithoutRegencyInput]
  upsert: [SchoolUpsertWithWhereUniqueWithoutRegencyInput]
  createMany: SchoolCreateManyRegencyInputEnvelope
  set: [SchoolWhereUniqueInput]
  disconnect: [SchoolWhereUniqueInput]
  delete: [SchoolWhereUniqueInput]
  connect: [SchoolWhereUniqueInput]
  update: [SchoolUpdateWithWhereUniqueWithoutRegencyInput]
  updateMany: [SchoolUpdateManyWithWhereWithoutRegencyInput]
  deleteMany: [SchoolScalarWhereInput]
}

input SchoolUpdateManyWithWhereWithoutProvinceInput {
  where: SchoolScalarWhereInput!
  data: SchoolUncheckedUpdateManyWithoutSchoolInput!
}

input SchoolUpdateManyWithWhereWithoutRegencyInput {
  where: SchoolScalarWhereInput!
  data: SchoolUncheckedUpdateManyWithoutSchoolInput!
}

input SchoolUpdateOneRequiredWithoutSchoolStaffsInput {
  create: SchoolUncheckedCreateWithoutSchoolStaffsInput
  connectOrCreate: SchoolCreateOrConnectWithoutSchoolStaffsInput
  upsert: SchoolUpsertWithoutSchoolStaffsInput
  connect: SchoolWhereUniqueInput
  update: SchoolUncheckedUpdateWithoutSchoolStaffsInput
}

input SchoolUpdateOneWithoutClassroomsInput {
  create: SchoolUncheckedCreateWithoutClassroomsInput
  connectOrCreate: SchoolCreateOrConnectWithoutClassroomsInput
  upsert: SchoolUpsertWithoutClassroomsInput
  disconnect: Boolean
  delete: Boolean
  connect: SchoolWhereUniqueInput
  update: SchoolUncheckedUpdateWithoutClassroomsInput
}

input SchoolUpdateOneWithoutStudentsInput {
  create: SchoolUncheckedCreateWithoutStudentsInput
  connectOrCreate: SchoolCreateOrConnectWithoutStudentsInput
  upsert: SchoolUpsertWithoutStudentsInput
  disconnect: Boolean
  delete: Boolean
  connect: SchoolWhereUniqueInput
  update: SchoolUncheckedUpdateWithoutStudentsInput
}

input SchoolUpdateWithoutClassroomsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  npsn: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  levels: [Int]
  type: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  logoPath: NullableStringFieldUpdateOperationsInput
  bannerPath: NullableStringFieldUpdateOperationsInput
  province: ProvinceUpdateOneRequiredWithoutSchoolInput
  regency: RegencyUpdateOneRequiredWithoutSchoolInput
  schoolStaffs: SchoolStaffUpdateManyWithoutSchoolInput
  students: UserUpdateManyWithoutSchoolInput
}

input SchoolUpdateWithoutProvinceInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  npsn: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  classrooms: ClassroomUpdateManyWithoutSchoolInput
  levels: [Int]
  type: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  logoPath: NullableStringFieldUpdateOperationsInput
  bannerPath: NullableStringFieldUpdateOperationsInput
  regency: RegencyUpdateOneRequiredWithoutSchoolInput
  schoolStaffs: SchoolStaffUpdateManyWithoutSchoolInput
  students: UserUpdateManyWithoutSchoolInput
}

input SchoolUpdateWithoutRegencyInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  npsn: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  classrooms: ClassroomUpdateManyWithoutSchoolInput
  levels: [Int]
  type: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  logoPath: NullableStringFieldUpdateOperationsInput
  bannerPath: NullableStringFieldUpdateOperationsInput
  province: ProvinceUpdateOneRequiredWithoutSchoolInput
  schoolStaffs: SchoolStaffUpdateManyWithoutSchoolInput
  students: UserUpdateManyWithoutSchoolInput
}

input SchoolUpdateWithoutSchoolStaffsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  npsn: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  classrooms: ClassroomUpdateManyWithoutSchoolInput
  levels: [Int]
  type: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  logoPath: NullableStringFieldUpdateOperationsInput
  bannerPath: NullableStringFieldUpdateOperationsInput
  province: ProvinceUpdateOneRequiredWithoutSchoolInput
  regency: RegencyUpdateOneRequiredWithoutSchoolInput
  students: UserUpdateManyWithoutSchoolInput
}

input SchoolUpdateWithoutStudentsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  npsn: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  classrooms: ClassroomUpdateManyWithoutSchoolInput
  levels: [Int]
  type: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  logoPath: NullableStringFieldUpdateOperationsInput
  bannerPath: NullableStringFieldUpdateOperationsInput
  province: ProvinceUpdateOneRequiredWithoutSchoolInput
  regency: RegencyUpdateOneRequiredWithoutSchoolInput
  schoolStaffs: SchoolStaffUpdateManyWithoutSchoolInput
}

input SchoolUpdateWithWhereUniqueWithoutProvinceInput {
  where: SchoolWhereUniqueInput!
  data: SchoolUncheckedUpdateWithoutProvinceInput!
}

input SchoolUpdateWithWhereUniqueWithoutRegencyInput {
  where: SchoolWhereUniqueInput!
  data: SchoolUncheckedUpdateWithoutRegencyInput!
}

input SchoolUpsertWithoutClassroomsInput {
  update: SchoolUncheckedUpdateWithoutClassroomsInput!
  create: SchoolUncheckedCreateWithoutClassroomsInput!
}

input SchoolUpsertWithoutSchoolStaffsInput {
  update: SchoolUncheckedUpdateWithoutSchoolStaffsInput!
  create: SchoolUncheckedCreateWithoutSchoolStaffsInput!
}

input SchoolUpsertWithoutStudentsInput {
  update: SchoolUncheckedUpdateWithoutStudentsInput!
  create: SchoolUncheckedCreateWithoutStudentsInput!
}

input SchoolUpsertWithWhereUniqueWithoutProvinceInput {
  where: SchoolWhereUniqueInput!
  update: SchoolUncheckedUpdateWithoutProvinceInput!
  create: SchoolUncheckedCreateWithoutProvinceInput!
}

input SchoolUpsertWithWhereUniqueWithoutRegencyInput {
  where: SchoolWhereUniqueInput!
  update: SchoolUncheckedUpdateWithoutRegencyInput!
  create: SchoolUncheckedCreateWithoutRegencyInput!
}

input SchoolWhereInput {
  AND: [SchoolWhereInput]
  OR: [SchoolWhereInput]
  NOT: [SchoolWhereInput]
  id: StringFilter
  name: StringFilter
  npsn: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  classrooms: ClassroomListRelationFilter
  levels: IntNullableListFilter
  type: StringFilter
  address: StringNullableFilter
  logoPath: StringNullableFilter
  bannerPath: StringNullableFilter
  provinceId: StringFilter
  province: ProvinceWhereInput
  regencyId: StringFilter
  regency: RegencyWhereInput
  schoolStaffs: SchoolStaffListRelationFilter
  students: UserListRelationFilter
}

input SchoolWhereUniqueInput {
  id: String
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input StringNullableListFilter {
  equals: [String]
  has: String
  hasEvery: [String]
  hasSome: [String]
  isEmpty: Boolean
}

input StringNullableWithAggregatesFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
}

input StringWithAggregatesFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

type Subscription {
  chatSubscribe: Chat
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  id: String!
  name: String!
  email: String!
  password: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime!
  updatedAt: DateTime!
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  provinceId: String!
  province: Province!
  regencyId: String!
  regency: Regency!
  isAdmin: Boolean!
  isBimbel: Boolean!
  role: Roles!
  balance: Float!
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  identityFiles(where: IdentityFileWhereInput, orderBy: IdentityFileOrderByWithRelationInput, cursor: IdentityFileWhereUniqueInput, take: Int, skip: Int, distinct: IdentityFileScalarFieldEnum): [IdentityFile!]!
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByWithRelationInput, cursor: QuestionWhereUniqueInput, take: Int, skip: Int, distinct: QuestionScalarFieldEnum): [Question!]!
  examinations(where: ExamWhereInput, orderBy: ExamOrderByWithRelationInput, cursor: ExamWhereUniqueInput, take: Int, skip: Int, distinct: ExamScalarFieldEnum): [Exam!]!
  examsessions(where: ExamSessionWhereInput, orderBy: ExamSessionOrderByWithRelationInput, cursor: ExamSessionWhereUniqueInput, take: Int, skip: Int, distinct: ExamSessionScalarFieldEnum): [ExamSession!]!
  myChats(where: ChatWhereInput, orderBy: ChatOrderByWithRelationInput, cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: ChatScalarFieldEnum): [Chat!]!
  classrooms(where: ClassroomWhereInput, orderBy: ClassroomOrderByWithRelationInput, cursor: ClassroomWhereUniqueInput, take: Int, skip: Int, distinct: ClassroomScalarFieldEnum): [Classroom!]!
  classroomStudents(where: ClassroomStudentWhereInput, orderBy: ClassroomStudentOrderByWithRelationInput, cursor: ClassroomStudentWhereUniqueInput, take: Int, skip: Int, distinct: ClassroomStudentScalarFieldEnum): [ClassroomStudent!]!
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByWithRelationInput, cursor: NotificationWhereUniqueInput, take: Int, skip: Int, distinct: NotificationScalarFieldEnum): [Notification!]!
  schoolStaffs(where: SchoolStaffWhereInput, orderBy: SchoolStaffOrderByWithRelationInput, cursor: SchoolStaffWhereUniqueInput, take: Int, skip: Int, distinct: SchoolStaffScalarFieldEnum): [SchoolStaff!]!
  schoolId: String
  school: School
  _count: UserCountOutputType!
}

type UserAvgAggregateOutputType {
  balance: Float
}

input UserAvgOrderByAggregateInput {
  balance: SortOrder
}

type UserCountAggregateOutputType {
  id: Int!
  name: Int!
  email: Int!
  phoneNumber: Int!
  address: Int!
  profilePicturePath: Int!
  createdAt: Int!
  updatedAt: Int!
  nisn: Int!
  nrg: Int!
  verifykey: Int!
  verifyType: Int!
  provinceId: Int!
  regencyId: Int!
  isAdmin: Int!
  isBimbel: Int!
  role: Int!
  balance: Int!
  emailVerifiedAt: Int!
  phoneNumberVerifiedAt: Int!
  bimbelApprovedAt: Int!
  identityNumberVerifiedAt: Int!
  schoolId: Int!
  _all: Int!
}

input UserCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  email: SortOrder
  phoneNumber: SortOrder
  address: SortOrder
  profilePicturePath: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  nisn: SortOrder
  nrg: SortOrder
  verifykey: SortOrder
  verifyType: SortOrder
  provinceId: SortOrder
  regencyId: SortOrder
  isAdmin: SortOrder
  isBimbel: SortOrder
  role: SortOrder
  balance: SortOrder
  emailVerifiedAt: SortOrder
  phoneNumberVerifiedAt: SortOrder
  bimbelApprovedAt: SortOrder
  identityNumberVerifiedAt: SortOrder
  schoolId: SortOrder
}

type UserCountOutputType {
  identityFiles: Int!
  questions: Int!
  examinations: Int!
  examsessions: Int!
  myChats: Int!
  classrooms: Int!
  classroomStudents: Int!
  notifications: Int!
  schoolStaffs: Int!
}

input UserCreateInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  province: ProvinceCreateNestedOneWithoutUsersInput!
  regency: RegencyCreateNestedOneWithoutUsersInput!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  identityFiles: IdentityFileCreateNestedManyWithoutUserInput
  questions: QuestionCreateNestedManyWithoutUserInput
  examinations: ExamCreateNestedManyWithoutUserInput
  examsessions: ExamSessionCreateNestedManyWithoutUserInput
  myChats: ChatCreateNestedManyWithoutFromInput
  classrooms: ClassroomCreateNestedManyWithoutUserInput
  classroomStudents: ClassroomStudentCreateNestedManyWithoutUserInput
  notifications: NotificationCreateNestedManyWithoutUserInput
  schoolStaffs: SchoolStaffCreateNestedManyWithoutUserInput
  school: SchoolCreateNestedOneWithoutStudentsInput
}

input UserCreateManyInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  provinceId: String!
  regencyId: String!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  schoolId: String
}

input UserCreateManyProvinceInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  regencyId: String!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  schoolId: String
}

input UserCreateManyProvinceInputEnvelope {
  data: UserCreateManyProvinceInput!
  skipDuplicates: Boolean
}

input UserCreateManyRegencyInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  provinceId: String!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  schoolId: String
}

input UserCreateManyRegencyInputEnvelope {
  data: UserCreateManyRegencyInput!
  skipDuplicates: Boolean
}

input UserCreateManySchoolInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  provinceId: String!
  regencyId: String!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
}

input UserCreateManySchoolInputEnvelope {
  data: UserCreateManySchoolInput!
  skipDuplicates: Boolean
}

input UserCreateNestedManyWithoutProvinceInput {
  create: [UserCreateWithoutProvinceInput]
  connectOrCreate: [UserCreateOrConnectWithoutProvinceInput]
  createMany: UserCreateManyProvinceInputEnvelope
  connect: [UserWhereUniqueInput]
}

input UserCreateNestedManyWithoutRegencyInput {
  create: [UserCreateWithoutRegencyInput]
  connectOrCreate: [UserCreateOrConnectWithoutRegencyInput]
  createMany: UserCreateManyRegencyInputEnvelope
  connect: [UserWhereUniqueInput]
}

input UserCreateNestedManyWithoutSchoolInput {
  create: [UserCreateWithoutSchoolInput]
  connectOrCreate: [UserCreateOrConnectWithoutSchoolInput]
  createMany: UserCreateManySchoolInputEnvelope
  connect: [UserWhereUniqueInput]
}

input UserCreateNestedOneWithoutClassroomsInput {
  create: UserUncheckedCreateWithoutClassroomsInput
  connectOrCreate: UserCreateOrConnectWithoutClassroomsInput
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutClassroomStudentsInput {
  create: UserUncheckedCreateWithoutClassroomStudentsInput
  connectOrCreate: UserCreateOrConnectWithoutClassroomStudentsInput
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutExaminationsInput {
  create: UserUncheckedCreateWithoutExaminationsInput
  connectOrCreate: UserCreateOrConnectWithoutExaminationsInput
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutExamsessionsInput {
  create: UserUncheckedCreateWithoutExamsessionsInput
  connectOrCreate: UserCreateOrConnectWithoutExamsessionsInput
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutIdentityFilesInput {
  create: UserUncheckedCreateWithoutIdentityFilesInput
  connectOrCreate: UserCreateOrConnectWithoutIdentityFilesInput
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutMyChatsInput {
  create: UserUncheckedCreateWithoutMyChatsInput
  connectOrCreate: UserCreateOrConnectWithoutMyChatsInput
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutNotificationsInput {
  create: UserUncheckedCreateWithoutNotificationsInput
  connectOrCreate: UserCreateOrConnectWithoutNotificationsInput
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutQuestionsInput {
  create: UserUncheckedCreateWithoutQuestionsInput
  connectOrCreate: UserCreateOrConnectWithoutQuestionsInput
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutSchoolStaffsInput {
  create: UserUncheckedCreateWithoutSchoolStaffsInput
  connectOrCreate: UserCreateOrConnectWithoutSchoolStaffsInput
  connect: UserWhereUniqueInput
}

input UserCreateOrConnectWithoutClassroomsInput {
  where: UserWhereUniqueInput!
  create: UserUncheckedCreateWithoutClassroomsInput!
}

input UserCreateOrConnectWithoutClassroomStudentsInput {
  where: UserWhereUniqueInput!
  create: UserUncheckedCreateWithoutClassroomStudentsInput!
}

input UserCreateOrConnectWithoutExaminationsInput {
  where: UserWhereUniqueInput!
  create: UserUncheckedCreateWithoutExaminationsInput!
}

input UserCreateOrConnectWithoutExamsessionsInput {
  where: UserWhereUniqueInput!
  create: UserUncheckedCreateWithoutExamsessionsInput!
}

input UserCreateOrConnectWithoutIdentityFilesInput {
  where: UserWhereUniqueInput!
  create: UserUncheckedCreateWithoutIdentityFilesInput!
}

input UserCreateOrConnectWithoutMyChatsInput {
  where: UserWhereUniqueInput!
  create: UserUncheckedCreateWithoutMyChatsInput!
}

input UserCreateOrConnectWithoutNotificationsInput {
  where: UserWhereUniqueInput!
  create: UserUncheckedCreateWithoutNotificationsInput!
}

input UserCreateOrConnectWithoutProvinceInput {
  where: UserWhereUniqueInput!
  create: UserUncheckedCreateWithoutProvinceInput!
}

input UserCreateOrConnectWithoutQuestionsInput {
  where: UserWhereUniqueInput!
  create: UserUncheckedCreateWithoutQuestionsInput!
}

input UserCreateOrConnectWithoutRegencyInput {
  where: UserWhereUniqueInput!
  create: UserUncheckedCreateWithoutRegencyInput!
}

input UserCreateOrConnectWithoutSchoolInput {
  where: UserWhereUniqueInput!
  create: UserUncheckedCreateWithoutSchoolInput!
}

input UserCreateOrConnectWithoutSchoolStaffsInput {
  where: UserWhereUniqueInput!
  create: UserUncheckedCreateWithoutSchoolStaffsInput!
}

input UserCreateWithoutClassroomsInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  province: ProvinceCreateNestedOneWithoutUsersInput!
  regency: RegencyCreateNestedOneWithoutUsersInput!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  identityFiles: IdentityFileCreateNestedManyWithoutUserInput
  questions: QuestionCreateNestedManyWithoutUserInput
  examinations: ExamCreateNestedManyWithoutUserInput
  examsessions: ExamSessionCreateNestedManyWithoutUserInput
  myChats: ChatCreateNestedManyWithoutFromInput
  classroomStudents: ClassroomStudentCreateNestedManyWithoutUserInput
  notifications: NotificationCreateNestedManyWithoutUserInput
  schoolStaffs: SchoolStaffCreateNestedManyWithoutUserInput
  school: SchoolCreateNestedOneWithoutStudentsInput
}

input UserCreateWithoutClassroomStudentsInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  province: ProvinceCreateNestedOneWithoutUsersInput!
  regency: RegencyCreateNestedOneWithoutUsersInput!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  identityFiles: IdentityFileCreateNestedManyWithoutUserInput
  questions: QuestionCreateNestedManyWithoutUserInput
  examinations: ExamCreateNestedManyWithoutUserInput
  examsessions: ExamSessionCreateNestedManyWithoutUserInput
  myChats: ChatCreateNestedManyWithoutFromInput
  classrooms: ClassroomCreateNestedManyWithoutUserInput
  notifications: NotificationCreateNestedManyWithoutUserInput
  schoolStaffs: SchoolStaffCreateNestedManyWithoutUserInput
  school: SchoolCreateNestedOneWithoutStudentsInput
}

input UserCreateWithoutExaminationsInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  province: ProvinceCreateNestedOneWithoutUsersInput!
  regency: RegencyCreateNestedOneWithoutUsersInput!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  identityFiles: IdentityFileCreateNestedManyWithoutUserInput
  questions: QuestionCreateNestedManyWithoutUserInput
  examsessions: ExamSessionCreateNestedManyWithoutUserInput
  myChats: ChatCreateNestedManyWithoutFromInput
  classrooms: ClassroomCreateNestedManyWithoutUserInput
  classroomStudents: ClassroomStudentCreateNestedManyWithoutUserInput
  notifications: NotificationCreateNestedManyWithoutUserInput
  schoolStaffs: SchoolStaffCreateNestedManyWithoutUserInput
  school: SchoolCreateNestedOneWithoutStudentsInput
}

input UserCreateWithoutExamsessionsInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  province: ProvinceCreateNestedOneWithoutUsersInput!
  regency: RegencyCreateNestedOneWithoutUsersInput!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  identityFiles: IdentityFileCreateNestedManyWithoutUserInput
  questions: QuestionCreateNestedManyWithoutUserInput
  examinations: ExamCreateNestedManyWithoutUserInput
  myChats: ChatCreateNestedManyWithoutFromInput
  classrooms: ClassroomCreateNestedManyWithoutUserInput
  classroomStudents: ClassroomStudentCreateNestedManyWithoutUserInput
  notifications: NotificationCreateNestedManyWithoutUserInput
  schoolStaffs: SchoolStaffCreateNestedManyWithoutUserInput
  school: SchoolCreateNestedOneWithoutStudentsInput
}

input UserCreateWithoutIdentityFilesInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  province: ProvinceCreateNestedOneWithoutUsersInput!
  regency: RegencyCreateNestedOneWithoutUsersInput!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  questions: QuestionCreateNestedManyWithoutUserInput
  examinations: ExamCreateNestedManyWithoutUserInput
  examsessions: ExamSessionCreateNestedManyWithoutUserInput
  myChats: ChatCreateNestedManyWithoutFromInput
  classrooms: ClassroomCreateNestedManyWithoutUserInput
  classroomStudents: ClassroomStudentCreateNestedManyWithoutUserInput
  notifications: NotificationCreateNestedManyWithoutUserInput
  schoolStaffs: SchoolStaffCreateNestedManyWithoutUserInput
  school: SchoolCreateNestedOneWithoutStudentsInput
}

input UserCreateWithoutMyChatsInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  province: ProvinceCreateNestedOneWithoutUsersInput!
  regency: RegencyCreateNestedOneWithoutUsersInput!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  identityFiles: IdentityFileCreateNestedManyWithoutUserInput
  questions: QuestionCreateNestedManyWithoutUserInput
  examinations: ExamCreateNestedManyWithoutUserInput
  examsessions: ExamSessionCreateNestedManyWithoutUserInput
  classrooms: ClassroomCreateNestedManyWithoutUserInput
  classroomStudents: ClassroomStudentCreateNestedManyWithoutUserInput
  notifications: NotificationCreateNestedManyWithoutUserInput
  schoolStaffs: SchoolStaffCreateNestedManyWithoutUserInput
  school: SchoolCreateNestedOneWithoutStudentsInput
}

input UserCreateWithoutNotificationsInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  province: ProvinceCreateNestedOneWithoutUsersInput!
  regency: RegencyCreateNestedOneWithoutUsersInput!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  identityFiles: IdentityFileCreateNestedManyWithoutUserInput
  questions: QuestionCreateNestedManyWithoutUserInput
  examinations: ExamCreateNestedManyWithoutUserInput
  examsessions: ExamSessionCreateNestedManyWithoutUserInput
  myChats: ChatCreateNestedManyWithoutFromInput
  classrooms: ClassroomCreateNestedManyWithoutUserInput
  classroomStudents: ClassroomStudentCreateNestedManyWithoutUserInput
  schoolStaffs: SchoolStaffCreateNestedManyWithoutUserInput
  school: SchoolCreateNestedOneWithoutStudentsInput
}

input UserCreateWithoutProvinceInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  regency: RegencyCreateNestedOneWithoutUsersInput!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  identityFiles: IdentityFileCreateNestedManyWithoutUserInput
  questions: QuestionCreateNestedManyWithoutUserInput
  examinations: ExamCreateNestedManyWithoutUserInput
  examsessions: ExamSessionCreateNestedManyWithoutUserInput
  myChats: ChatCreateNestedManyWithoutFromInput
  classrooms: ClassroomCreateNestedManyWithoutUserInput
  classroomStudents: ClassroomStudentCreateNestedManyWithoutUserInput
  notifications: NotificationCreateNestedManyWithoutUserInput
  schoolStaffs: SchoolStaffCreateNestedManyWithoutUserInput
  school: SchoolCreateNestedOneWithoutStudentsInput
}

input UserCreateWithoutQuestionsInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  province: ProvinceCreateNestedOneWithoutUsersInput!
  regency: RegencyCreateNestedOneWithoutUsersInput!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  identityFiles: IdentityFileCreateNestedManyWithoutUserInput
  examinations: ExamCreateNestedManyWithoutUserInput
  examsessions: ExamSessionCreateNestedManyWithoutUserInput
  myChats: ChatCreateNestedManyWithoutFromInput
  classrooms: ClassroomCreateNestedManyWithoutUserInput
  classroomStudents: ClassroomStudentCreateNestedManyWithoutUserInput
  notifications: NotificationCreateNestedManyWithoutUserInput
  schoolStaffs: SchoolStaffCreateNestedManyWithoutUserInput
  school: SchoolCreateNestedOneWithoutStudentsInput
}

input UserCreateWithoutRegencyInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  province: ProvinceCreateNestedOneWithoutUsersInput!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  identityFiles: IdentityFileCreateNestedManyWithoutUserInput
  questions: QuestionCreateNestedManyWithoutUserInput
  examinations: ExamCreateNestedManyWithoutUserInput
  examsessions: ExamSessionCreateNestedManyWithoutUserInput
  myChats: ChatCreateNestedManyWithoutFromInput
  classrooms: ClassroomCreateNestedManyWithoutUserInput
  classroomStudents: ClassroomStudentCreateNestedManyWithoutUserInput
  notifications: NotificationCreateNestedManyWithoutUserInput
  schoolStaffs: SchoolStaffCreateNestedManyWithoutUserInput
  school: SchoolCreateNestedOneWithoutStudentsInput
}

input UserCreateWithoutSchoolInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  province: ProvinceCreateNestedOneWithoutUsersInput!
  regency: RegencyCreateNestedOneWithoutUsersInput!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  identityFiles: IdentityFileCreateNestedManyWithoutUserInput
  questions: QuestionCreateNestedManyWithoutUserInput
  examinations: ExamCreateNestedManyWithoutUserInput
  examsessions: ExamSessionCreateNestedManyWithoutUserInput
  myChats: ChatCreateNestedManyWithoutFromInput
  classrooms: ClassroomCreateNestedManyWithoutUserInput
  classroomStudents: ClassroomStudentCreateNestedManyWithoutUserInput
  notifications: NotificationCreateNestedManyWithoutUserInput
  schoolStaffs: SchoolStaffCreateNestedManyWithoutUserInput
}

input UserCreateWithoutSchoolStaffsInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  province: ProvinceCreateNestedOneWithoutUsersInput!
  regency: RegencyCreateNestedOneWithoutUsersInput!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  identityFiles: IdentityFileCreateNestedManyWithoutUserInput
  questions: QuestionCreateNestedManyWithoutUserInput
  examinations: ExamCreateNestedManyWithoutUserInput
  examsessions: ExamSessionCreateNestedManyWithoutUserInput
  myChats: ChatCreateNestedManyWithoutFromInput
  classrooms: ClassroomCreateNestedManyWithoutUserInput
  classroomStudents: ClassroomStudentCreateNestedManyWithoutUserInput
  notifications: NotificationCreateNestedManyWithoutUserInput
  school: SchoolCreateNestedOneWithoutStudentsInput
}

input UserListRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

type UserMaxAggregateOutputType {
  id: String
  name: String
  email: String
  phoneNumber: String
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  provinceId: String
  regencyId: String
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  schoolId: String
}

input UserMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  email: SortOrder
  phoneNumber: SortOrder
  address: SortOrder
  profilePicturePath: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  nisn: SortOrder
  nrg: SortOrder
  verifykey: SortOrder
  verifyType: SortOrder
  provinceId: SortOrder
  regencyId: SortOrder
  isAdmin: SortOrder
  isBimbel: SortOrder
  role: SortOrder
  balance: SortOrder
  emailVerifiedAt: SortOrder
  phoneNumberVerifiedAt: SortOrder
  bimbelApprovedAt: SortOrder
  identityNumberVerifiedAt: SortOrder
  schoolId: SortOrder
}

type UserMinAggregateOutputType {
  id: String
  name: String
  email: String
  phoneNumber: String
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  provinceId: String
  regencyId: String
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  schoolId: String
}

input UserMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  email: SortOrder
  phoneNumber: SortOrder
  address: SortOrder
  profilePicturePath: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  nisn: SortOrder
  nrg: SortOrder
  verifykey: SortOrder
  verifyType: SortOrder
  provinceId: SortOrder
  regencyId: SortOrder
  isAdmin: SortOrder
  isBimbel: SortOrder
  role: SortOrder
  balance: SortOrder
  emailVerifiedAt: SortOrder
  phoneNumberVerifiedAt: SortOrder
  bimbelApprovedAt: SortOrder
  identityNumberVerifiedAt: SortOrder
  schoolId: SortOrder
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  email: SortOrder
  phoneNumber: SortOrder
  address: SortOrder
  profilePicturePath: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  nisn: SortOrder
  nrg: SortOrder
  verifykey: SortOrder
  verifyType: SortOrder
  provinceId: SortOrder
  regencyId: SortOrder
  isAdmin: SortOrder
  isBimbel: SortOrder
  role: SortOrder
  balance: SortOrder
  emailVerifiedAt: SortOrder
  phoneNumberVerifiedAt: SortOrder
  bimbelApprovedAt: SortOrder
  identityNumberVerifiedAt: SortOrder
  schoolId: SortOrder
  _count: UserCountOrderByAggregateInput
  _avg: UserAvgOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  _sum: UserSumOrderByAggregateInput
}

input UserOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  email: SortOrder
  phoneNumber: SortOrder
  address: SortOrder
  profilePicturePath: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  nisn: SortOrder
  nrg: SortOrder
  verifykey: SortOrder
  verifyType: SortOrder
  provinceId: SortOrder
  province: ProvinceOrderByWithRelationInput
  regencyId: SortOrder
  regency: RegencyOrderByWithRelationInput
  isAdmin: SortOrder
  isBimbel: SortOrder
  role: SortOrder
  balance: SortOrder
  emailVerifiedAt: SortOrder
  phoneNumberVerifiedAt: SortOrder
  bimbelApprovedAt: SortOrder
  identityNumberVerifiedAt: SortOrder
  identityFiles: IdentityFileOrderByRelationAggregateInput
  questions: QuestionOrderByRelationAggregateInput
  examinations: ExamOrderByRelationAggregateInput
  examsessions: ExamSessionOrderByRelationAggregateInput
  myChats: ChatOrderByRelationAggregateInput
  classrooms: ClassroomOrderByRelationAggregateInput
  classroomStudents: ClassroomStudentOrderByRelationAggregateInput
  notifications: NotificationOrderByRelationAggregateInput
  schoolStaffs: SchoolStaffOrderByRelationAggregateInput
  schoolId: SortOrder
  school: SchoolOrderByWithRelationInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  id
  name
  email
  password
  phoneNumber
  address
  profilePicturePath
  createdAt
  updatedAt
  nisn
  nrg
  verifykey
  verifyType
  provinceId
  regencyId
  isAdmin
  isBimbel
  role
  balance
  emailVerifiedAt
  phoneNumberVerifiedAt
  bimbelApprovedAt
  identityNumberVerifiedAt
  schoolId
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput]
  OR: [UserScalarWhereInput]
  NOT: [UserScalarWhereInput]
  id: StringFilter
  name: StringFilter
  email: StringFilter
  phoneNumber: StringFilter
  address: StringNullableFilter
  profilePicturePath: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  nisn: StringNullableFilter
  nrg: StringNullableFilter
  verifykey: StringNullableFilter
  verifyType: EnumVerifyTypeNullableFilter
  provinceId: StringFilter
  regencyId: StringFilter
  isAdmin: BoolFilter
  isBimbel: BoolFilter
  role: EnumRolesFilter
  balance: FloatFilter
  emailVerifiedAt: DateTimeNullableFilter
  phoneNumberVerifiedAt: DateTimeNullableFilter
  bimbelApprovedAt: DateTimeNullableFilter
  identityNumberVerifiedAt: DateTimeNullableFilter
  schoolId: StringNullableFilter
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput]
  OR: [UserScalarWhereWithAggregatesInput]
  NOT: [UserScalarWhereWithAggregatesInput]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  email: StringWithAggregatesFilter
  phoneNumber: StringWithAggregatesFilter
  address: StringNullableWithAggregatesFilter
  profilePicturePath: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  nisn: StringNullableWithAggregatesFilter
  nrg: StringNullableWithAggregatesFilter
  verifykey: StringNullableWithAggregatesFilter
  verifyType: EnumVerifyTypeNullableWithAggregatesFilter
  provinceId: StringWithAggregatesFilter
  regencyId: StringWithAggregatesFilter
  isAdmin: BoolWithAggregatesFilter
  isBimbel: BoolWithAggregatesFilter
  role: EnumRolesWithAggregatesFilter
  balance: FloatWithAggregatesFilter
  emailVerifiedAt: DateTimeNullableWithAggregatesFilter
  phoneNumberVerifiedAt: DateTimeNullableWithAggregatesFilter
  bimbelApprovedAt: DateTimeNullableWithAggregatesFilter
  identityNumberVerifiedAt: DateTimeNullableWithAggregatesFilter
  schoolId: StringNullableWithAggregatesFilter
}

type UserSumAggregateOutputType {
  balance: Float
}

input UserSumOrderByAggregateInput {
  balance: SortOrder
}

input UserUncheckedCreateInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  provinceId: String!
  regencyId: String!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  identityFiles: IdentityFileUncheckedCreateNestedManyWithoutUserInput
  questions: QuestionUncheckedCreateNestedManyWithoutUserInput
  examinations: ExamUncheckedCreateNestedManyWithoutUserInput
  examsessions: ExamSessionUncheckedCreateNestedManyWithoutUserInput
  myChats: ChatUncheckedCreateNestedManyWithoutFromInput
  classrooms: ClassroomUncheckedCreateNestedManyWithoutUserInput
  classroomStudents: ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
  notifications: NotificationUncheckedCreateNestedManyWithoutUserInput
  schoolStaffs: SchoolStaffUncheckedCreateNestedManyWithoutUserInput
  schoolId: String
}

input UserUncheckedCreateNestedManyWithoutProvinceInput {
  create: [UserCreateWithoutProvinceInput]
  connectOrCreate: [UserCreateOrConnectWithoutProvinceInput]
  createMany: UserCreateManyProvinceInputEnvelope
  connect: [UserWhereUniqueInput]
}

input UserUncheckedCreateNestedManyWithoutRegencyInput {
  create: [UserCreateWithoutRegencyInput]
  connectOrCreate: [UserCreateOrConnectWithoutRegencyInput]
  createMany: UserCreateManyRegencyInputEnvelope
  connect: [UserWhereUniqueInput]
}

input UserUncheckedCreateNestedManyWithoutSchoolInput {
  create: [UserCreateWithoutSchoolInput]
  connectOrCreate: [UserCreateOrConnectWithoutSchoolInput]
  createMany: UserCreateManySchoolInputEnvelope
  connect: [UserWhereUniqueInput]
}

input UserUncheckedCreateWithoutClassroomsInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  provinceId: String!
  regencyId: String!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  identityFiles: IdentityFileUncheckedCreateNestedManyWithoutUserInput
  questions: QuestionUncheckedCreateNestedManyWithoutUserInput
  examinations: ExamUncheckedCreateNestedManyWithoutUserInput
  examsessions: ExamSessionUncheckedCreateNestedManyWithoutUserInput
  myChats: ChatUncheckedCreateNestedManyWithoutFromInput
  classroomStudents: ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
  notifications: NotificationUncheckedCreateNestedManyWithoutUserInput
  schoolStaffs: SchoolStaffUncheckedCreateNestedManyWithoutUserInput
  schoolId: String
}

input UserUncheckedCreateWithoutClassroomStudentsInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  provinceId: String!
  regencyId: String!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  identityFiles: IdentityFileUncheckedCreateNestedManyWithoutUserInput
  questions: QuestionUncheckedCreateNestedManyWithoutUserInput
  examinations: ExamUncheckedCreateNestedManyWithoutUserInput
  examsessions: ExamSessionUncheckedCreateNestedManyWithoutUserInput
  myChats: ChatUncheckedCreateNestedManyWithoutFromInput
  classrooms: ClassroomUncheckedCreateNestedManyWithoutUserInput
  notifications: NotificationUncheckedCreateNestedManyWithoutUserInput
  schoolStaffs: SchoolStaffUncheckedCreateNestedManyWithoutUserInput
  schoolId: String
}

input UserUncheckedCreateWithoutExaminationsInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  provinceId: String!
  regencyId: String!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  identityFiles: IdentityFileUncheckedCreateNestedManyWithoutUserInput
  questions: QuestionUncheckedCreateNestedManyWithoutUserInput
  examsessions: ExamSessionUncheckedCreateNestedManyWithoutUserInput
  myChats: ChatUncheckedCreateNestedManyWithoutFromInput
  classrooms: ClassroomUncheckedCreateNestedManyWithoutUserInput
  classroomStudents: ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
  notifications: NotificationUncheckedCreateNestedManyWithoutUserInput
  schoolStaffs: SchoolStaffUncheckedCreateNestedManyWithoutUserInput
  schoolId: String
}

input UserUncheckedCreateWithoutExamsessionsInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  provinceId: String!
  regencyId: String!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  identityFiles: IdentityFileUncheckedCreateNestedManyWithoutUserInput
  questions: QuestionUncheckedCreateNestedManyWithoutUserInput
  examinations: ExamUncheckedCreateNestedManyWithoutUserInput
  myChats: ChatUncheckedCreateNestedManyWithoutFromInput
  classrooms: ClassroomUncheckedCreateNestedManyWithoutUserInput
  classroomStudents: ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
  notifications: NotificationUncheckedCreateNestedManyWithoutUserInput
  schoolStaffs: SchoolStaffUncheckedCreateNestedManyWithoutUserInput
  schoolId: String
}

input UserUncheckedCreateWithoutIdentityFilesInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  provinceId: String!
  regencyId: String!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  questions: QuestionUncheckedCreateNestedManyWithoutUserInput
  examinations: ExamUncheckedCreateNestedManyWithoutUserInput
  examsessions: ExamSessionUncheckedCreateNestedManyWithoutUserInput
  myChats: ChatUncheckedCreateNestedManyWithoutFromInput
  classrooms: ClassroomUncheckedCreateNestedManyWithoutUserInput
  classroomStudents: ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
  notifications: NotificationUncheckedCreateNestedManyWithoutUserInput
  schoolStaffs: SchoolStaffUncheckedCreateNestedManyWithoutUserInput
  schoolId: String
}

input UserUncheckedCreateWithoutMyChatsInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  provinceId: String!
  regencyId: String!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  identityFiles: IdentityFileUncheckedCreateNestedManyWithoutUserInput
  questions: QuestionUncheckedCreateNestedManyWithoutUserInput
  examinations: ExamUncheckedCreateNestedManyWithoutUserInput
  examsessions: ExamSessionUncheckedCreateNestedManyWithoutUserInput
  classrooms: ClassroomUncheckedCreateNestedManyWithoutUserInput
  classroomStudents: ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
  notifications: NotificationUncheckedCreateNestedManyWithoutUserInput
  schoolStaffs: SchoolStaffUncheckedCreateNestedManyWithoutUserInput
  schoolId: String
}

input UserUncheckedCreateWithoutNotificationsInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  provinceId: String!
  regencyId: String!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  identityFiles: IdentityFileUncheckedCreateNestedManyWithoutUserInput
  questions: QuestionUncheckedCreateNestedManyWithoutUserInput
  examinations: ExamUncheckedCreateNestedManyWithoutUserInput
  examsessions: ExamSessionUncheckedCreateNestedManyWithoutUserInput
  myChats: ChatUncheckedCreateNestedManyWithoutFromInput
  classrooms: ClassroomUncheckedCreateNestedManyWithoutUserInput
  classroomStudents: ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
  schoolStaffs: SchoolStaffUncheckedCreateNestedManyWithoutUserInput
  schoolId: String
}

input UserUncheckedCreateWithoutProvinceInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  regencyId: String!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  identityFiles: IdentityFileUncheckedCreateNestedManyWithoutUserInput
  questions: QuestionUncheckedCreateNestedManyWithoutUserInput
  examinations: ExamUncheckedCreateNestedManyWithoutUserInput
  examsessions: ExamSessionUncheckedCreateNestedManyWithoutUserInput
  myChats: ChatUncheckedCreateNestedManyWithoutFromInput
  classrooms: ClassroomUncheckedCreateNestedManyWithoutUserInput
  classroomStudents: ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
  notifications: NotificationUncheckedCreateNestedManyWithoutUserInput
  schoolStaffs: SchoolStaffUncheckedCreateNestedManyWithoutUserInput
  schoolId: String
}

input UserUncheckedCreateWithoutQuestionsInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  provinceId: String!
  regencyId: String!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  identityFiles: IdentityFileUncheckedCreateNestedManyWithoutUserInput
  examinations: ExamUncheckedCreateNestedManyWithoutUserInput
  examsessions: ExamSessionUncheckedCreateNestedManyWithoutUserInput
  myChats: ChatUncheckedCreateNestedManyWithoutFromInput
  classrooms: ClassroomUncheckedCreateNestedManyWithoutUserInput
  classroomStudents: ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
  notifications: NotificationUncheckedCreateNestedManyWithoutUserInput
  schoolStaffs: SchoolStaffUncheckedCreateNestedManyWithoutUserInput
  schoolId: String
}

input UserUncheckedCreateWithoutRegencyInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  provinceId: String!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  identityFiles: IdentityFileUncheckedCreateNestedManyWithoutUserInput
  questions: QuestionUncheckedCreateNestedManyWithoutUserInput
  examinations: ExamUncheckedCreateNestedManyWithoutUserInput
  examsessions: ExamSessionUncheckedCreateNestedManyWithoutUserInput
  myChats: ChatUncheckedCreateNestedManyWithoutFromInput
  classrooms: ClassroomUncheckedCreateNestedManyWithoutUserInput
  classroomStudents: ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
  notifications: NotificationUncheckedCreateNestedManyWithoutUserInput
  schoolStaffs: SchoolStaffUncheckedCreateNestedManyWithoutUserInput
  schoolId: String
}

input UserUncheckedCreateWithoutSchoolInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  provinceId: String!
  regencyId: String!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  identityFiles: IdentityFileUncheckedCreateNestedManyWithoutUserInput
  questions: QuestionUncheckedCreateNestedManyWithoutUserInput
  examinations: ExamUncheckedCreateNestedManyWithoutUserInput
  examsessions: ExamSessionUncheckedCreateNestedManyWithoutUserInput
  myChats: ChatUncheckedCreateNestedManyWithoutFromInput
  classrooms: ClassroomUncheckedCreateNestedManyWithoutUserInput
  classroomStudents: ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
  notifications: NotificationUncheckedCreateNestedManyWithoutUserInput
  schoolStaffs: SchoolStaffUncheckedCreateNestedManyWithoutUserInput
}

input UserUncheckedCreateWithoutSchoolStaffsInput {
  id: String
  name: String!
  email: String!
  phoneNumber: String!
  address: String
  profilePicturePath: String
  createdAt: DateTime
  updatedAt: DateTime
  nisn: String
  nrg: String
  verifykey: String
  verifyType: VerifyType
  provinceId: String!
  regencyId: String!
  isAdmin: Boolean
  isBimbel: Boolean
  role: Roles!
  balance: Float
  emailVerifiedAt: DateTime
  phoneNumberVerifiedAt: DateTime
  bimbelApprovedAt: DateTime
  identityNumberVerifiedAt: DateTime
  identityFiles: IdentityFileUncheckedCreateNestedManyWithoutUserInput
  questions: QuestionUncheckedCreateNestedManyWithoutUserInput
  examinations: ExamUncheckedCreateNestedManyWithoutUserInput
  examsessions: ExamSessionUncheckedCreateNestedManyWithoutUserInput
  myChats: ChatUncheckedCreateNestedManyWithoutFromInput
  classrooms: ClassroomUncheckedCreateNestedManyWithoutUserInput
  classroomStudents: ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
  notifications: NotificationUncheckedCreateNestedManyWithoutUserInput
  schoolId: String
}

input UserUncheckedUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  provinceId: StringFieldUpdateOperationsInput
  regencyId: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  identityFiles: IdentityFileUncheckedUpdateManyWithoutUserInput
  questions: QuestionUncheckedUpdateManyWithoutUserInput
  examinations: ExamUncheckedUpdateManyWithoutUserInput
  examsessions: ExamSessionUncheckedUpdateManyWithoutUserInput
  myChats: ChatUncheckedUpdateManyWithoutFromInput
  classrooms: ClassroomUncheckedUpdateManyWithoutUserInput
  classroomStudents: ClassroomStudentUncheckedUpdateManyWithoutUserInput
  notifications: NotificationUncheckedUpdateManyWithoutUserInput
  schoolStaffs: SchoolStaffUncheckedUpdateManyWithoutUserInput
  schoolId: NullableStringFieldUpdateOperationsInput
}

input UserUncheckedUpdateManyInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  provinceId: StringFieldUpdateOperationsInput
  regencyId: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  schoolId: NullableStringFieldUpdateOperationsInput
}

input UserUncheckedUpdateManyWithoutProvinceInput {
  create: [UserCreateWithoutProvinceInput]
  connectOrCreate: [UserCreateOrConnectWithoutProvinceInput]
  upsert: [UserUpsertWithWhereUniqueWithoutProvinceInput]
  createMany: UserCreateManyProvinceInputEnvelope
  set: [UserWhereUniqueInput]
  disconnect: [UserWhereUniqueInput]
  delete: [UserWhereUniqueInput]
  connect: [UserWhereUniqueInput]
  update: [UserUpdateWithWhereUniqueWithoutProvinceInput]
  updateMany: [UserUpdateManyWithWhereWithoutProvinceInput]
  deleteMany: [UserScalarWhereInput]
}

input UserUncheckedUpdateManyWithoutRegencyInput {
  create: [UserCreateWithoutRegencyInput]
  connectOrCreate: [UserCreateOrConnectWithoutRegencyInput]
  upsert: [UserUpsertWithWhereUniqueWithoutRegencyInput]
  createMany: UserCreateManyRegencyInputEnvelope
  set: [UserWhereUniqueInput]
  disconnect: [UserWhereUniqueInput]
  delete: [UserWhereUniqueInput]
  connect: [UserWhereUniqueInput]
  update: [UserUpdateWithWhereUniqueWithoutRegencyInput]
  updateMany: [UserUpdateManyWithWhereWithoutRegencyInput]
  deleteMany: [UserScalarWhereInput]
}

input UserUncheckedUpdateManyWithoutSchoolInput {
  create: [UserCreateWithoutSchoolInput]
  connectOrCreate: [UserCreateOrConnectWithoutSchoolInput]
  upsert: [UserUpsertWithWhereUniqueWithoutSchoolInput]
  createMany: UserCreateManySchoolInputEnvelope
  set: [UserWhereUniqueInput]
  disconnect: [UserWhereUniqueInput]
  delete: [UserWhereUniqueInput]
  connect: [UserWhereUniqueInput]
  update: [UserUpdateWithWhereUniqueWithoutSchoolInput]
  updateMany: [UserUpdateManyWithWhereWithoutSchoolInput]
  deleteMany: [UserScalarWhereInput]
}

input UserUncheckedUpdateManyWithoutStudentsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  provinceId: StringFieldUpdateOperationsInput
  regencyId: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUncheckedUpdateManyWithoutUsersInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  regencyId: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  schoolId: NullableStringFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutClassroomsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  provinceId: StringFieldUpdateOperationsInput
  regencyId: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  identityFiles: IdentityFileUncheckedUpdateManyWithoutUserInput
  questions: QuestionUncheckedUpdateManyWithoutUserInput
  examinations: ExamUncheckedUpdateManyWithoutUserInput
  examsessions: ExamSessionUncheckedUpdateManyWithoutUserInput
  myChats: ChatUncheckedUpdateManyWithoutFromInput
  classroomStudents: ClassroomStudentUncheckedUpdateManyWithoutUserInput
  notifications: NotificationUncheckedUpdateManyWithoutUserInput
  schoolStaffs: SchoolStaffUncheckedUpdateManyWithoutUserInput
  schoolId: NullableStringFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutClassroomStudentsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  provinceId: StringFieldUpdateOperationsInput
  regencyId: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  identityFiles: IdentityFileUncheckedUpdateManyWithoutUserInput
  questions: QuestionUncheckedUpdateManyWithoutUserInput
  examinations: ExamUncheckedUpdateManyWithoutUserInput
  examsessions: ExamSessionUncheckedUpdateManyWithoutUserInput
  myChats: ChatUncheckedUpdateManyWithoutFromInput
  classrooms: ClassroomUncheckedUpdateManyWithoutUserInput
  notifications: NotificationUncheckedUpdateManyWithoutUserInput
  schoolStaffs: SchoolStaffUncheckedUpdateManyWithoutUserInput
  schoolId: NullableStringFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutExaminationsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  provinceId: StringFieldUpdateOperationsInput
  regencyId: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  identityFiles: IdentityFileUncheckedUpdateManyWithoutUserInput
  questions: QuestionUncheckedUpdateManyWithoutUserInput
  examsessions: ExamSessionUncheckedUpdateManyWithoutUserInput
  myChats: ChatUncheckedUpdateManyWithoutFromInput
  classrooms: ClassroomUncheckedUpdateManyWithoutUserInput
  classroomStudents: ClassroomStudentUncheckedUpdateManyWithoutUserInput
  notifications: NotificationUncheckedUpdateManyWithoutUserInput
  schoolStaffs: SchoolStaffUncheckedUpdateManyWithoutUserInput
  schoolId: NullableStringFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutExamsessionsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  provinceId: StringFieldUpdateOperationsInput
  regencyId: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  identityFiles: IdentityFileUncheckedUpdateManyWithoutUserInput
  questions: QuestionUncheckedUpdateManyWithoutUserInput
  examinations: ExamUncheckedUpdateManyWithoutUserInput
  myChats: ChatUncheckedUpdateManyWithoutFromInput
  classrooms: ClassroomUncheckedUpdateManyWithoutUserInput
  classroomStudents: ClassroomStudentUncheckedUpdateManyWithoutUserInput
  notifications: NotificationUncheckedUpdateManyWithoutUserInput
  schoolStaffs: SchoolStaffUncheckedUpdateManyWithoutUserInput
  schoolId: NullableStringFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutIdentityFilesInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  provinceId: StringFieldUpdateOperationsInput
  regencyId: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  questions: QuestionUncheckedUpdateManyWithoutUserInput
  examinations: ExamUncheckedUpdateManyWithoutUserInput
  examsessions: ExamSessionUncheckedUpdateManyWithoutUserInput
  myChats: ChatUncheckedUpdateManyWithoutFromInput
  classrooms: ClassroomUncheckedUpdateManyWithoutUserInput
  classroomStudents: ClassroomStudentUncheckedUpdateManyWithoutUserInput
  notifications: NotificationUncheckedUpdateManyWithoutUserInput
  schoolStaffs: SchoolStaffUncheckedUpdateManyWithoutUserInput
  schoolId: NullableStringFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutMyChatsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  provinceId: StringFieldUpdateOperationsInput
  regencyId: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  identityFiles: IdentityFileUncheckedUpdateManyWithoutUserInput
  questions: QuestionUncheckedUpdateManyWithoutUserInput
  examinations: ExamUncheckedUpdateManyWithoutUserInput
  examsessions: ExamSessionUncheckedUpdateManyWithoutUserInput
  classrooms: ClassroomUncheckedUpdateManyWithoutUserInput
  classroomStudents: ClassroomStudentUncheckedUpdateManyWithoutUserInput
  notifications: NotificationUncheckedUpdateManyWithoutUserInput
  schoolStaffs: SchoolStaffUncheckedUpdateManyWithoutUserInput
  schoolId: NullableStringFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutNotificationsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  provinceId: StringFieldUpdateOperationsInput
  regencyId: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  identityFiles: IdentityFileUncheckedUpdateManyWithoutUserInput
  questions: QuestionUncheckedUpdateManyWithoutUserInput
  examinations: ExamUncheckedUpdateManyWithoutUserInput
  examsessions: ExamSessionUncheckedUpdateManyWithoutUserInput
  myChats: ChatUncheckedUpdateManyWithoutFromInput
  classrooms: ClassroomUncheckedUpdateManyWithoutUserInput
  classroomStudents: ClassroomStudentUncheckedUpdateManyWithoutUserInput
  schoolStaffs: SchoolStaffUncheckedUpdateManyWithoutUserInput
  schoolId: NullableStringFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutProvinceInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  regencyId: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  identityFiles: IdentityFileUncheckedUpdateManyWithoutUserInput
  questions: QuestionUncheckedUpdateManyWithoutUserInput
  examinations: ExamUncheckedUpdateManyWithoutUserInput
  examsessions: ExamSessionUncheckedUpdateManyWithoutUserInput
  myChats: ChatUncheckedUpdateManyWithoutFromInput
  classrooms: ClassroomUncheckedUpdateManyWithoutUserInput
  classroomStudents: ClassroomStudentUncheckedUpdateManyWithoutUserInput
  notifications: NotificationUncheckedUpdateManyWithoutUserInput
  schoolStaffs: SchoolStaffUncheckedUpdateManyWithoutUserInput
  schoolId: NullableStringFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutQuestionsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  provinceId: StringFieldUpdateOperationsInput
  regencyId: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  identityFiles: IdentityFileUncheckedUpdateManyWithoutUserInput
  examinations: ExamUncheckedUpdateManyWithoutUserInput
  examsessions: ExamSessionUncheckedUpdateManyWithoutUserInput
  myChats: ChatUncheckedUpdateManyWithoutFromInput
  classrooms: ClassroomUncheckedUpdateManyWithoutUserInput
  classroomStudents: ClassroomStudentUncheckedUpdateManyWithoutUserInput
  notifications: NotificationUncheckedUpdateManyWithoutUserInput
  schoolStaffs: SchoolStaffUncheckedUpdateManyWithoutUserInput
  schoolId: NullableStringFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutRegencyInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  provinceId: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  identityFiles: IdentityFileUncheckedUpdateManyWithoutUserInput
  questions: QuestionUncheckedUpdateManyWithoutUserInput
  examinations: ExamUncheckedUpdateManyWithoutUserInput
  examsessions: ExamSessionUncheckedUpdateManyWithoutUserInput
  myChats: ChatUncheckedUpdateManyWithoutFromInput
  classrooms: ClassroomUncheckedUpdateManyWithoutUserInput
  classroomStudents: ClassroomStudentUncheckedUpdateManyWithoutUserInput
  notifications: NotificationUncheckedUpdateManyWithoutUserInput
  schoolStaffs: SchoolStaffUncheckedUpdateManyWithoutUserInput
  schoolId: NullableStringFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutSchoolInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  provinceId: StringFieldUpdateOperationsInput
  regencyId: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  identityFiles: IdentityFileUncheckedUpdateManyWithoutUserInput
  questions: QuestionUncheckedUpdateManyWithoutUserInput
  examinations: ExamUncheckedUpdateManyWithoutUserInput
  examsessions: ExamSessionUncheckedUpdateManyWithoutUserInput
  myChats: ChatUncheckedUpdateManyWithoutFromInput
  classrooms: ClassroomUncheckedUpdateManyWithoutUserInput
  classroomStudents: ClassroomStudentUncheckedUpdateManyWithoutUserInput
  notifications: NotificationUncheckedUpdateManyWithoutUserInput
  schoolStaffs: SchoolStaffUncheckedUpdateManyWithoutUserInput
}

input UserUncheckedUpdateWithoutSchoolStaffsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  provinceId: StringFieldUpdateOperationsInput
  regencyId: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  identityFiles: IdentityFileUncheckedUpdateManyWithoutUserInput
  questions: QuestionUncheckedUpdateManyWithoutUserInput
  examinations: ExamUncheckedUpdateManyWithoutUserInput
  examsessions: ExamSessionUncheckedUpdateManyWithoutUserInput
  myChats: ChatUncheckedUpdateManyWithoutFromInput
  classrooms: ClassroomUncheckedUpdateManyWithoutUserInput
  classroomStudents: ClassroomStudentUncheckedUpdateManyWithoutUserInput
  notifications: NotificationUncheckedUpdateManyWithoutUserInput
  schoolId: NullableStringFieldUpdateOperationsInput
}

input UserUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  province: ProvinceUpdateOneRequiredWithoutUsersInput
  regency: RegencyUpdateOneRequiredWithoutUsersInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  identityFiles: IdentityFileUpdateManyWithoutUserInput
  questions: QuestionUpdateManyWithoutUserInput
  examinations: ExamUpdateManyWithoutUserInput
  examsessions: ExamSessionUpdateManyWithoutUserInput
  myChats: ChatUpdateManyWithoutFromInput
  classrooms: ClassroomUpdateManyWithoutUserInput
  classroomStudents: ClassroomStudentUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  schoolStaffs: SchoolStaffUpdateManyWithoutUserInput
  school: SchoolUpdateOneWithoutStudentsInput
}

input UserUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateManyWithoutProvinceInput {
  create: [UserCreateWithoutProvinceInput]
  connectOrCreate: [UserCreateOrConnectWithoutProvinceInput]
  upsert: [UserUpsertWithWhereUniqueWithoutProvinceInput]
  createMany: UserCreateManyProvinceInputEnvelope
  set: [UserWhereUniqueInput]
  disconnect: [UserWhereUniqueInput]
  delete: [UserWhereUniqueInput]
  connect: [UserWhereUniqueInput]
  update: [UserUpdateWithWhereUniqueWithoutProvinceInput]
  updateMany: [UserUpdateManyWithWhereWithoutProvinceInput]
  deleteMany: [UserScalarWhereInput]
}

input UserUpdateManyWithoutRegencyInput {
  create: [UserCreateWithoutRegencyInput]
  connectOrCreate: [UserCreateOrConnectWithoutRegencyInput]
  upsert: [UserUpsertWithWhereUniqueWithoutRegencyInput]
  createMany: UserCreateManyRegencyInputEnvelope
  set: [UserWhereUniqueInput]
  disconnect: [UserWhereUniqueInput]
  delete: [UserWhereUniqueInput]
  connect: [UserWhereUniqueInput]
  update: [UserUpdateWithWhereUniqueWithoutRegencyInput]
  updateMany: [UserUpdateManyWithWhereWithoutRegencyInput]
  deleteMany: [UserScalarWhereInput]
}

input UserUpdateManyWithoutSchoolInput {
  create: [UserCreateWithoutSchoolInput]
  connectOrCreate: [UserCreateOrConnectWithoutSchoolInput]
  upsert: [UserUpsertWithWhereUniqueWithoutSchoolInput]
  createMany: UserCreateManySchoolInputEnvelope
  set: [UserWhereUniqueInput]
  disconnect: [UserWhereUniqueInput]
  delete: [UserWhereUniqueInput]
  connect: [UserWhereUniqueInput]
  update: [UserUpdateWithWhereUniqueWithoutSchoolInput]
  updateMany: [UserUpdateManyWithWhereWithoutSchoolInput]
  deleteMany: [UserScalarWhereInput]
}

input UserUpdateManyWithWhereWithoutProvinceInput {
  where: UserScalarWhereInput!
  data: UserUncheckedUpdateManyWithoutUsersInput!
}

input UserUpdateManyWithWhereWithoutRegencyInput {
  where: UserScalarWhereInput!
  data: UserUncheckedUpdateManyWithoutUsersInput!
}

input UserUpdateManyWithWhereWithoutSchoolInput {
  where: UserScalarWhereInput!
  data: UserUncheckedUpdateManyWithoutStudentsInput!
}

input UserUpdateOneRequiredWithoutClassroomsInput {
  create: UserUncheckedCreateWithoutClassroomsInput
  connectOrCreate: UserCreateOrConnectWithoutClassroomsInput
  upsert: UserUpsertWithoutClassroomsInput
  connect: UserWhereUniqueInput
  update: UserUncheckedUpdateWithoutClassroomsInput
}

input UserUpdateOneRequiredWithoutClassroomStudentsInput {
  create: UserUncheckedCreateWithoutClassroomStudentsInput
  connectOrCreate: UserCreateOrConnectWithoutClassroomStudentsInput
  upsert: UserUpsertWithoutClassroomStudentsInput
  connect: UserWhereUniqueInput
  update: UserUncheckedUpdateWithoutClassroomStudentsInput
}

input UserUpdateOneRequiredWithoutExaminationsInput {
  create: UserUncheckedCreateWithoutExaminationsInput
  connectOrCreate: UserCreateOrConnectWithoutExaminationsInput
  upsert: UserUpsertWithoutExaminationsInput
  connect: UserWhereUniqueInput
  update: UserUncheckedUpdateWithoutExaminationsInput
}

input UserUpdateOneRequiredWithoutExamsessionsInput {
  create: UserUncheckedCreateWithoutExamsessionsInput
  connectOrCreate: UserCreateOrConnectWithoutExamsessionsInput
  upsert: UserUpsertWithoutExamsessionsInput
  connect: UserWhereUniqueInput
  update: UserUncheckedUpdateWithoutExamsessionsInput
}

input UserUpdateOneRequiredWithoutIdentityFilesInput {
  create: UserUncheckedCreateWithoutIdentityFilesInput
  connectOrCreate: UserCreateOrConnectWithoutIdentityFilesInput
  upsert: UserUpsertWithoutIdentityFilesInput
  connect: UserWhereUniqueInput
  update: UserUncheckedUpdateWithoutIdentityFilesInput
}

input UserUpdateOneRequiredWithoutMyChatsInput {
  create: UserUncheckedCreateWithoutMyChatsInput
  connectOrCreate: UserCreateOrConnectWithoutMyChatsInput
  upsert: UserUpsertWithoutMyChatsInput
  connect: UserWhereUniqueInput
  update: UserUncheckedUpdateWithoutMyChatsInput
}

input UserUpdateOneRequiredWithoutNotificationsInput {
  create: UserUncheckedCreateWithoutNotificationsInput
  connectOrCreate: UserCreateOrConnectWithoutNotificationsInput
  upsert: UserUpsertWithoutNotificationsInput
  connect: UserWhereUniqueInput
  update: UserUncheckedUpdateWithoutNotificationsInput
}

input UserUpdateOneRequiredWithoutQuestionsInput {
  create: UserUncheckedCreateWithoutQuestionsInput
  connectOrCreate: UserCreateOrConnectWithoutQuestionsInput
  upsert: UserUpsertWithoutQuestionsInput
  connect: UserWhereUniqueInput
  update: UserUncheckedUpdateWithoutQuestionsInput
}

input UserUpdateOneRequiredWithoutSchoolStaffsInput {
  create: UserUncheckedCreateWithoutSchoolStaffsInput
  connectOrCreate: UserCreateOrConnectWithoutSchoolStaffsInput
  upsert: UserUpsertWithoutSchoolStaffsInput
  connect: UserWhereUniqueInput
  update: UserUncheckedUpdateWithoutSchoolStaffsInput
}

input UserUpdateWithoutClassroomsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  province: ProvinceUpdateOneRequiredWithoutUsersInput
  regency: RegencyUpdateOneRequiredWithoutUsersInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  identityFiles: IdentityFileUpdateManyWithoutUserInput
  questions: QuestionUpdateManyWithoutUserInput
  examinations: ExamUpdateManyWithoutUserInput
  examsessions: ExamSessionUpdateManyWithoutUserInput
  myChats: ChatUpdateManyWithoutFromInput
  classroomStudents: ClassroomStudentUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  schoolStaffs: SchoolStaffUpdateManyWithoutUserInput
  school: SchoolUpdateOneWithoutStudentsInput
}

input UserUpdateWithoutClassroomStudentsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  province: ProvinceUpdateOneRequiredWithoutUsersInput
  regency: RegencyUpdateOneRequiredWithoutUsersInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  identityFiles: IdentityFileUpdateManyWithoutUserInput
  questions: QuestionUpdateManyWithoutUserInput
  examinations: ExamUpdateManyWithoutUserInput
  examsessions: ExamSessionUpdateManyWithoutUserInput
  myChats: ChatUpdateManyWithoutFromInput
  classrooms: ClassroomUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  schoolStaffs: SchoolStaffUpdateManyWithoutUserInput
  school: SchoolUpdateOneWithoutStudentsInput
}

input UserUpdateWithoutExaminationsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  province: ProvinceUpdateOneRequiredWithoutUsersInput
  regency: RegencyUpdateOneRequiredWithoutUsersInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  identityFiles: IdentityFileUpdateManyWithoutUserInput
  questions: QuestionUpdateManyWithoutUserInput
  examsessions: ExamSessionUpdateManyWithoutUserInput
  myChats: ChatUpdateManyWithoutFromInput
  classrooms: ClassroomUpdateManyWithoutUserInput
  classroomStudents: ClassroomStudentUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  schoolStaffs: SchoolStaffUpdateManyWithoutUserInput
  school: SchoolUpdateOneWithoutStudentsInput
}

input UserUpdateWithoutExamsessionsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  province: ProvinceUpdateOneRequiredWithoutUsersInput
  regency: RegencyUpdateOneRequiredWithoutUsersInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  identityFiles: IdentityFileUpdateManyWithoutUserInput
  questions: QuestionUpdateManyWithoutUserInput
  examinations: ExamUpdateManyWithoutUserInput
  myChats: ChatUpdateManyWithoutFromInput
  classrooms: ClassroomUpdateManyWithoutUserInput
  classroomStudents: ClassroomStudentUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  schoolStaffs: SchoolStaffUpdateManyWithoutUserInput
  school: SchoolUpdateOneWithoutStudentsInput
}

input UserUpdateWithoutIdentityFilesInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  province: ProvinceUpdateOneRequiredWithoutUsersInput
  regency: RegencyUpdateOneRequiredWithoutUsersInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  questions: QuestionUpdateManyWithoutUserInput
  examinations: ExamUpdateManyWithoutUserInput
  examsessions: ExamSessionUpdateManyWithoutUserInput
  myChats: ChatUpdateManyWithoutFromInput
  classrooms: ClassroomUpdateManyWithoutUserInput
  classroomStudents: ClassroomStudentUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  schoolStaffs: SchoolStaffUpdateManyWithoutUserInput
  school: SchoolUpdateOneWithoutStudentsInput
}

input UserUpdateWithoutMyChatsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  province: ProvinceUpdateOneRequiredWithoutUsersInput
  regency: RegencyUpdateOneRequiredWithoutUsersInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  identityFiles: IdentityFileUpdateManyWithoutUserInput
  questions: QuestionUpdateManyWithoutUserInput
  examinations: ExamUpdateManyWithoutUserInput
  examsessions: ExamSessionUpdateManyWithoutUserInput
  classrooms: ClassroomUpdateManyWithoutUserInput
  classroomStudents: ClassroomStudentUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  schoolStaffs: SchoolStaffUpdateManyWithoutUserInput
  school: SchoolUpdateOneWithoutStudentsInput
}

input UserUpdateWithoutNotificationsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  province: ProvinceUpdateOneRequiredWithoutUsersInput
  regency: RegencyUpdateOneRequiredWithoutUsersInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  identityFiles: IdentityFileUpdateManyWithoutUserInput
  questions: QuestionUpdateManyWithoutUserInput
  examinations: ExamUpdateManyWithoutUserInput
  examsessions: ExamSessionUpdateManyWithoutUserInput
  myChats: ChatUpdateManyWithoutFromInput
  classrooms: ClassroomUpdateManyWithoutUserInput
  classroomStudents: ClassroomStudentUpdateManyWithoutUserInput
  schoolStaffs: SchoolStaffUpdateManyWithoutUserInput
  school: SchoolUpdateOneWithoutStudentsInput
}

input UserUpdateWithoutProvinceInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  regency: RegencyUpdateOneRequiredWithoutUsersInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  identityFiles: IdentityFileUpdateManyWithoutUserInput
  questions: QuestionUpdateManyWithoutUserInput
  examinations: ExamUpdateManyWithoutUserInput
  examsessions: ExamSessionUpdateManyWithoutUserInput
  myChats: ChatUpdateManyWithoutFromInput
  classrooms: ClassroomUpdateManyWithoutUserInput
  classroomStudents: ClassroomStudentUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  schoolStaffs: SchoolStaffUpdateManyWithoutUserInput
  school: SchoolUpdateOneWithoutStudentsInput
}

input UserUpdateWithoutQuestionsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  province: ProvinceUpdateOneRequiredWithoutUsersInput
  regency: RegencyUpdateOneRequiredWithoutUsersInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  identityFiles: IdentityFileUpdateManyWithoutUserInput
  examinations: ExamUpdateManyWithoutUserInput
  examsessions: ExamSessionUpdateManyWithoutUserInput
  myChats: ChatUpdateManyWithoutFromInput
  classrooms: ClassroomUpdateManyWithoutUserInput
  classroomStudents: ClassroomStudentUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  schoolStaffs: SchoolStaffUpdateManyWithoutUserInput
  school: SchoolUpdateOneWithoutStudentsInput
}

input UserUpdateWithoutRegencyInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  province: ProvinceUpdateOneRequiredWithoutUsersInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  identityFiles: IdentityFileUpdateManyWithoutUserInput
  questions: QuestionUpdateManyWithoutUserInput
  examinations: ExamUpdateManyWithoutUserInput
  examsessions: ExamSessionUpdateManyWithoutUserInput
  myChats: ChatUpdateManyWithoutFromInput
  classrooms: ClassroomUpdateManyWithoutUserInput
  classroomStudents: ClassroomStudentUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  schoolStaffs: SchoolStaffUpdateManyWithoutUserInput
  school: SchoolUpdateOneWithoutStudentsInput
}

input UserUpdateWithoutSchoolInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  province: ProvinceUpdateOneRequiredWithoutUsersInput
  regency: RegencyUpdateOneRequiredWithoutUsersInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  identityFiles: IdentityFileUpdateManyWithoutUserInput
  questions: QuestionUpdateManyWithoutUserInput
  examinations: ExamUpdateManyWithoutUserInput
  examsessions: ExamSessionUpdateManyWithoutUserInput
  myChats: ChatUpdateManyWithoutFromInput
  classrooms: ClassroomUpdateManyWithoutUserInput
  classroomStudents: ClassroomStudentUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  schoolStaffs: SchoolStaffUpdateManyWithoutUserInput
}

input UserUpdateWithoutSchoolStaffsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  profilePicturePath: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  nisn: NullableStringFieldUpdateOperationsInput
  nrg: NullableStringFieldUpdateOperationsInput
  verifykey: NullableStringFieldUpdateOperationsInput
  verifyType: NullableEnumVerifyTypeFieldUpdateOperationsInput
  province: ProvinceUpdateOneRequiredWithoutUsersInput
  regency: RegencyUpdateOneRequiredWithoutUsersInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBimbel: BoolFieldUpdateOperationsInput
  role: EnumRolesFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  phoneNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  bimbelApprovedAt: NullableDateTimeFieldUpdateOperationsInput
  identityNumberVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  identityFiles: IdentityFileUpdateManyWithoutUserInput
  questions: QuestionUpdateManyWithoutUserInput
  examinations: ExamUpdateManyWithoutUserInput
  examsessions: ExamSessionUpdateManyWithoutUserInput
  myChats: ChatUpdateManyWithoutFromInput
  classrooms: ClassroomUpdateManyWithoutUserInput
  classroomStudents: ClassroomStudentUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  school: SchoolUpdateOneWithoutStudentsInput
}

input UserUpdateWithWhereUniqueWithoutProvinceInput {
  where: UserWhereUniqueInput!
  data: UserUncheckedUpdateWithoutProvinceInput!
}

input UserUpdateWithWhereUniqueWithoutRegencyInput {
  where: UserWhereUniqueInput!
  data: UserUncheckedUpdateWithoutRegencyInput!
}

input UserUpdateWithWhereUniqueWithoutSchoolInput {
  where: UserWhereUniqueInput!
  data: UserUncheckedUpdateWithoutSchoolInput!
}

input UserUpsertWithoutClassroomsInput {
  update: UserUncheckedUpdateWithoutClassroomsInput!
  create: UserUncheckedCreateWithoutClassroomsInput!
}

input UserUpsertWithoutClassroomStudentsInput {
  update: UserUncheckedUpdateWithoutClassroomStudentsInput!
  create: UserUncheckedCreateWithoutClassroomStudentsInput!
}

input UserUpsertWithoutExaminationsInput {
  update: UserUncheckedUpdateWithoutExaminationsInput!
  create: UserUncheckedCreateWithoutExaminationsInput!
}

input UserUpsertWithoutExamsessionsInput {
  update: UserUncheckedUpdateWithoutExamsessionsInput!
  create: UserUncheckedCreateWithoutExamsessionsInput!
}

input UserUpsertWithoutIdentityFilesInput {
  update: UserUncheckedUpdateWithoutIdentityFilesInput!
  create: UserUncheckedCreateWithoutIdentityFilesInput!
}

input UserUpsertWithoutMyChatsInput {
  update: UserUncheckedUpdateWithoutMyChatsInput!
  create: UserUncheckedCreateWithoutMyChatsInput!
}

input UserUpsertWithoutNotificationsInput {
  update: UserUncheckedUpdateWithoutNotificationsInput!
  create: UserUncheckedCreateWithoutNotificationsInput!
}

input UserUpsertWithoutQuestionsInput {
  update: UserUncheckedUpdateWithoutQuestionsInput!
  create: UserUncheckedCreateWithoutQuestionsInput!
}

input UserUpsertWithoutSchoolStaffsInput {
  update: UserUncheckedUpdateWithoutSchoolStaffsInput!
  create: UserUncheckedCreateWithoutSchoolStaffsInput!
}

input UserUpsertWithWhereUniqueWithoutProvinceInput {
  where: UserWhereUniqueInput!
  update: UserUncheckedUpdateWithoutProvinceInput!
  create: UserUncheckedCreateWithoutProvinceInput!
}

input UserUpsertWithWhereUniqueWithoutRegencyInput {
  where: UserWhereUniqueInput!
  update: UserUncheckedUpdateWithoutRegencyInput!
  create: UserUncheckedCreateWithoutRegencyInput!
}

input UserUpsertWithWhereUniqueWithoutSchoolInput {
  where: UserWhereUniqueInput!
  update: UserUncheckedUpdateWithoutSchoolInput!
  create: UserUncheckedCreateWithoutSchoolInput!
}

input UserWhereInput {
  AND: [UserWhereInput]
  OR: [UserWhereInput]
  NOT: [UserWhereInput]
  id: StringFilter
  name: StringFilter
  email: StringFilter
  phoneNumber: StringFilter
  address: StringNullableFilter
  profilePicturePath: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  nisn: StringNullableFilter
  nrg: StringNullableFilter
  verifykey: StringNullableFilter
  verifyType: EnumVerifyTypeNullableFilter
  provinceId: StringFilter
  province: ProvinceWhereInput
  regencyId: StringFilter
  regency: RegencyWhereInput
  isAdmin: BoolFilter
  isBimbel: BoolFilter
  role: EnumRolesFilter
  balance: FloatFilter
  emailVerifiedAt: DateTimeNullableFilter
  phoneNumberVerifiedAt: DateTimeNullableFilter
  bimbelApprovedAt: DateTimeNullableFilter
  identityNumberVerifiedAt: DateTimeNullableFilter
  identityFiles: IdentityFileListRelationFilter
  questions: QuestionListRelationFilter
  examinations: ExamListRelationFilter
  examsessions: ExamSessionListRelationFilter
  myChats: ChatListRelationFilter
  classrooms: ClassroomListRelationFilter
  classroomStudents: ClassroomStudentListRelationFilter
  notifications: NotificationListRelationFilter
  schoolStaffs: SchoolStaffListRelationFilter
  schoolId: StringNullableFilter
  school: SchoolWhereInput
}

input UserWhereUniqueInput {
  id: String
  verifykey: String
}

type VerificationResponse {
  status: Boolean
  message: String
}

enum VerifyType {
  EMAIL
  PHONE
  OTP
  IDENTITY
}

