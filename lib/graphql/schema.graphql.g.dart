// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'schema.graphql.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

Input$BoolFieldUpdateOperationsInput
    _$Input$BoolFieldUpdateOperationsInputFromJson(Map<String, dynamic> json) =>
        Input$BoolFieldUpdateOperationsInput(
          $set: json['set'] as bool?,
        );

Map<String, dynamic> _$Input$BoolFieldUpdateOperationsInputToJson(
        Input$BoolFieldUpdateOperationsInput instance) =>
    <String, dynamic>{
      'set': instance.$set,
    };

Input$BoolFilter _$Input$BoolFilterFromJson(Map<String, dynamic> json) =>
    Input$BoolFilter(
      equals: json['equals'] as bool?,
      not: json['not'] == null
          ? null
          : Input$NestedBoolFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$BoolFilterToJson(Input$BoolFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'not': instance.not?.toJson(),
    };

Input$BoolWithAggregatesFilter _$Input$BoolWithAggregatesFilterFromJson(
        Map<String, dynamic> json) =>
    Input$BoolWithAggregatesFilter(
      equals: json['equals'] as bool?,
      not: json['not'] == null
          ? null
          : Input$NestedBoolWithAggregatesFilter.fromJson(
              json['not'] as Map<String, dynamic>),
      $_count: json['_count'] == null
          ? null
          : Input$NestedIntFilter.fromJson(
              json['_count'] as Map<String, dynamic>),
      $_min: json['_min'] == null
          ? null
          : Input$NestedBoolFilter.fromJson(
              json['_min'] as Map<String, dynamic>),
      $_max: json['_max'] == null
          ? null
          : Input$NestedBoolFilter.fromJson(
              json['_max'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$BoolWithAggregatesFilterToJson(
        Input$BoolWithAggregatesFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'not': instance.not?.toJson(),
      '_count': instance.$_count?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_max': instance.$_max?.toJson(),
    };

Input$ChatCountOrderByAggregateInput
    _$Input$ChatCountOrderByAggregateInputFromJson(Map<String, dynamic> json) =>
        Input$ChatCountOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          fromId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['fromId'],
              unknownValue: Enum$SortOrder.$unknown),
          contentType: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['contentType'],
              unknownValue: Enum$SortOrder.$unknown),
          content: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['content'],
              unknownValue: Enum$SortOrder.$unknown),
          readAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['readAt'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          chatSessionId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['chatSessionId'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ChatCountOrderByAggregateInputToJson(
        Input$ChatCountOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'fromId': _$Enum$SortOrderEnumMap[instance.fromId],
      'contentType': _$Enum$SortOrderEnumMap[instance.contentType],
      'content': _$Enum$SortOrderEnumMap[instance.content],
      'readAt': _$Enum$SortOrderEnumMap[instance.readAt],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      'chatSessionId': _$Enum$SortOrderEnumMap[instance.chatSessionId],
    };

const _$Enum$SortOrderEnumMap = {
  Enum$SortOrder.asc: 'asc',
  Enum$SortOrder.desc: 'desc',
  Enum$SortOrder.$unknown: r'$unknown',
};

Input$ChatCreateInput _$Input$ChatCreateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ChatCreateInput(
      id: json['id'] as String?,
      from: Input$UserCreateNestedOneWithoutMyChatsInput.fromJson(
          json['from'] as Map<String, dynamic>),
      contentType: $enumDecode(_$Enum$ContentTypeEnumMap, json['contentType'],
          unknownValue: Enum$ContentType.$unknown),
      content: json['content'] as String,
      readAt: json['readAt'] as String?,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
      chatSession: Input$ChatSessionCreateNestedOneWithoutChatsInput.fromJson(
          json['chatSession'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ChatCreateInputToJson(
        Input$ChatCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'from': instance.from.toJson(),
      'contentType': _$Enum$ContentTypeEnumMap[instance.contentType],
      'content': instance.content,
      'readAt': instance.readAt,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'chatSession': instance.chatSession.toJson(),
    };

const _$Enum$ContentTypeEnumMap = {
  Enum$ContentType.TEXT: 'TEXT',
  Enum$ContentType.IMAGE: 'IMAGE',
  Enum$ContentType.VIDEO: 'VIDEO',
  Enum$ContentType.AUDIO: 'AUDIO',
  Enum$ContentType.$unknown: r'$unknown',
};

Input$ChatCreateManyChatSessionInput
    _$Input$ChatCreateManyChatSessionInputFromJson(Map<String, dynamic> json) =>
        Input$ChatCreateManyChatSessionInput(
          id: json['id'] as String?,
          fromId: json['fromId'] as String,
          contentType: $enumDecode(
              _$Enum$ContentTypeEnumMap, json['contentType'],
              unknownValue: Enum$ContentType.$unknown),
          content: json['content'] as String,
          readAt: json['readAt'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ChatCreateManyChatSessionInputToJson(
        Input$ChatCreateManyChatSessionInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'fromId': instance.fromId,
      'contentType': _$Enum$ContentTypeEnumMap[instance.contentType],
      'content': instance.content,
      'readAt': instance.readAt,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ChatCreateManyChatSessionInputEnvelope
    _$Input$ChatCreateManyChatSessionInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        Input$ChatCreateManyChatSessionInputEnvelope(
          data: Input$ChatCreateManyChatSessionInput.fromJson(
              json['data'] as Map<String, dynamic>),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$Input$ChatCreateManyChatSessionInputEnvelopeToJson(
        Input$ChatCreateManyChatSessionInputEnvelope instance) =>
    <String, dynamic>{
      'data': instance.data.toJson(),
      'skipDuplicates': instance.skipDuplicates,
    };

Input$ChatCreateManyFromInput _$Input$ChatCreateManyFromInputFromJson(
        Map<String, dynamic> json) =>
    Input$ChatCreateManyFromInput(
      id: json['id'] as String?,
      contentType: $enumDecode(_$Enum$ContentTypeEnumMap, json['contentType'],
          unknownValue: Enum$ContentType.$unknown),
      content: json['content'] as String,
      readAt: json['readAt'] as String?,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
      chatSessionId: json['chatSessionId'] as String,
    );

Map<String, dynamic> _$Input$ChatCreateManyFromInputToJson(
        Input$ChatCreateManyFromInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'contentType': _$Enum$ContentTypeEnumMap[instance.contentType],
      'content': instance.content,
      'readAt': instance.readAt,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'chatSessionId': instance.chatSessionId,
    };

Input$ChatCreateManyFromInputEnvelope
    _$Input$ChatCreateManyFromInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        Input$ChatCreateManyFromInputEnvelope(
          data: Input$ChatCreateManyFromInput.fromJson(
              json['data'] as Map<String, dynamic>),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$Input$ChatCreateManyFromInputEnvelopeToJson(
        Input$ChatCreateManyFromInputEnvelope instance) =>
    <String, dynamic>{
      'data': instance.data.toJson(),
      'skipDuplicates': instance.skipDuplicates,
    };

Input$ChatCreateManyInput _$Input$ChatCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    Input$ChatCreateManyInput(
      id: json['id'] as String?,
      fromId: json['fromId'] as String,
      contentType: $enumDecode(_$Enum$ContentTypeEnumMap, json['contentType'],
          unknownValue: Enum$ContentType.$unknown),
      content: json['content'] as String,
      readAt: json['readAt'] as String?,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
      chatSessionId: json['chatSessionId'] as String,
    );

Map<String, dynamic> _$Input$ChatCreateManyInputToJson(
        Input$ChatCreateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'fromId': instance.fromId,
      'contentType': _$Enum$ContentTypeEnumMap[instance.contentType],
      'content': instance.content,
      'readAt': instance.readAt,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'chatSessionId': instance.chatSessionId,
    };

Input$ChatCreateNestedManyWithoutChatSessionInput
    _$Input$ChatCreateNestedManyWithoutChatSessionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatCreateNestedManyWithoutChatSessionInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatCreateWithoutChatSessionInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatCreateOrConnectWithoutChatSessionInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ChatCreateManyChatSessionInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$ChatCreateNestedManyWithoutChatSessionInputToJson(
        Input$ChatCreateNestedManyWithoutChatSessionInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$ChatCreateNestedManyWithoutFromInput
    _$Input$ChatCreateNestedManyWithoutFromInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatCreateNestedManyWithoutFromInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatCreateWithoutFromInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatCreateOrConnectWithoutFromInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ChatCreateManyFromInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$ChatCreateNestedManyWithoutFromInputToJson(
        Input$ChatCreateNestedManyWithoutFromInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$ChatCreateOrConnectWithoutChatSessionInput
    _$Input$ChatCreateOrConnectWithoutChatSessionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatCreateOrConnectWithoutChatSessionInput(
          where: Input$ChatWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$ChatUncheckedCreateWithoutChatSessionInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ChatCreateOrConnectWithoutChatSessionInputToJson(
        Input$ChatCreateOrConnectWithoutChatSessionInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$ChatCreateOrConnectWithoutFromInput
    _$Input$ChatCreateOrConnectWithoutFromInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatCreateOrConnectWithoutFromInput(
          where: Input$ChatWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$ChatUncheckedCreateWithoutFromInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ChatCreateOrConnectWithoutFromInputToJson(
        Input$ChatCreateOrConnectWithoutFromInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$ChatCreateWithoutChatSessionInput
    _$Input$ChatCreateWithoutChatSessionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatCreateWithoutChatSessionInput(
          id: json['id'] as String?,
          from: Input$UserCreateNestedOneWithoutMyChatsInput.fromJson(
              json['from'] as Map<String, dynamic>),
          contentType: $enumDecode(
              _$Enum$ContentTypeEnumMap, json['contentType'],
              unknownValue: Enum$ContentType.$unknown),
          content: json['content'] as String,
          readAt: json['readAt'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ChatCreateWithoutChatSessionInputToJson(
        Input$ChatCreateWithoutChatSessionInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'from': instance.from.toJson(),
      'contentType': _$Enum$ContentTypeEnumMap[instance.contentType],
      'content': instance.content,
      'readAt': instance.readAt,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ChatCreateWithoutFromInput _$Input$ChatCreateWithoutFromInputFromJson(
        Map<String, dynamic> json) =>
    Input$ChatCreateWithoutFromInput(
      id: json['id'] as String?,
      contentType: $enumDecode(_$Enum$ContentTypeEnumMap, json['contentType'],
          unknownValue: Enum$ContentType.$unknown),
      content: json['content'] as String,
      readAt: json['readAt'] as String?,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
      chatSession: Input$ChatSessionCreateNestedOneWithoutChatsInput.fromJson(
          json['chatSession'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ChatCreateWithoutFromInputToJson(
        Input$ChatCreateWithoutFromInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'contentType': _$Enum$ContentTypeEnumMap[instance.contentType],
      'content': instance.content,
      'readAt': instance.readAt,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'chatSession': instance.chatSession.toJson(),
    };

Input$ChatListRelationFilter _$Input$ChatListRelationFilterFromJson(
        Map<String, dynamic> json) =>
    Input$ChatListRelationFilter(
      every: json['every'] == null
          ? null
          : Input$ChatWhereInput.fromJson(
              json['every'] as Map<String, dynamic>),
      some: json['some'] == null
          ? null
          : Input$ChatWhereInput.fromJson(json['some'] as Map<String, dynamic>),
      none: json['none'] == null
          ? null
          : Input$ChatWhereInput.fromJson(json['none'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ChatListRelationFilterToJson(
        Input$ChatListRelationFilter instance) =>
    <String, dynamic>{
      'every': instance.every?.toJson(),
      'some': instance.some?.toJson(),
      'none': instance.none?.toJson(),
    };

Input$ChatMaxOrderByAggregateInput _$Input$ChatMaxOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ChatMaxOrderByAggregateInput(
      id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
          unknownValue: Enum$SortOrder.$unknown),
      fromId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['fromId'],
          unknownValue: Enum$SortOrder.$unknown),
      contentType: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['contentType'],
          unknownValue: Enum$SortOrder.$unknown),
      content: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['content'],
          unknownValue: Enum$SortOrder.$unknown),
      readAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['readAt'],
          unknownValue: Enum$SortOrder.$unknown),
      createdAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['createdAt'],
          unknownValue: Enum$SortOrder.$unknown),
      updatedAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['updatedAt'],
          unknownValue: Enum$SortOrder.$unknown),
      chatSessionId: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['chatSessionId'],
          unknownValue: Enum$SortOrder.$unknown),
    );

Map<String, dynamic> _$Input$ChatMaxOrderByAggregateInputToJson(
        Input$ChatMaxOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'fromId': _$Enum$SortOrderEnumMap[instance.fromId],
      'contentType': _$Enum$SortOrderEnumMap[instance.contentType],
      'content': _$Enum$SortOrderEnumMap[instance.content],
      'readAt': _$Enum$SortOrderEnumMap[instance.readAt],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      'chatSessionId': _$Enum$SortOrderEnumMap[instance.chatSessionId],
    };

Input$ChatMinOrderByAggregateInput _$Input$ChatMinOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ChatMinOrderByAggregateInput(
      id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
          unknownValue: Enum$SortOrder.$unknown),
      fromId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['fromId'],
          unknownValue: Enum$SortOrder.$unknown),
      contentType: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['contentType'],
          unknownValue: Enum$SortOrder.$unknown),
      content: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['content'],
          unknownValue: Enum$SortOrder.$unknown),
      readAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['readAt'],
          unknownValue: Enum$SortOrder.$unknown),
      createdAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['createdAt'],
          unknownValue: Enum$SortOrder.$unknown),
      updatedAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['updatedAt'],
          unknownValue: Enum$SortOrder.$unknown),
      chatSessionId: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['chatSessionId'],
          unknownValue: Enum$SortOrder.$unknown),
    );

Map<String, dynamic> _$Input$ChatMinOrderByAggregateInputToJson(
        Input$ChatMinOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'fromId': _$Enum$SortOrderEnumMap[instance.fromId],
      'contentType': _$Enum$SortOrderEnumMap[instance.contentType],
      'content': _$Enum$SortOrderEnumMap[instance.content],
      'readAt': _$Enum$SortOrderEnumMap[instance.readAt],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      'chatSessionId': _$Enum$SortOrderEnumMap[instance.chatSessionId],
    };

Input$ChatOrderByRelationAggregateInput
    _$Input$ChatOrderByRelationAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatOrderByRelationAggregateInput(
          $_count: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['_count'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ChatOrderByRelationAggregateInputToJson(
        Input$ChatOrderByRelationAggregateInput instance) =>
    <String, dynamic>{
      '_count': _$Enum$SortOrderEnumMap[instance.$_count],
    };

Input$ChatOrderByWithAggregationInput
    _$Input$ChatOrderByWithAggregationInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatOrderByWithAggregationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          fromId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['fromId'],
              unknownValue: Enum$SortOrder.$unknown),
          contentType: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['contentType'],
              unknownValue: Enum$SortOrder.$unknown),
          content: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['content'],
              unknownValue: Enum$SortOrder.$unknown),
          readAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['readAt'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          chatSessionId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['chatSessionId'],
              unknownValue: Enum$SortOrder.$unknown),
          $_count: json['_count'] == null
              ? null
              : Input$ChatCountOrderByAggregateInput.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$ChatMaxOrderByAggregateInput.fromJson(
                  json['_max'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$ChatMinOrderByAggregateInput.fromJson(
                  json['_min'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ChatOrderByWithAggregationInputToJson(
        Input$ChatOrderByWithAggregationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'fromId': _$Enum$SortOrderEnumMap[instance.fromId],
      'contentType': _$Enum$SortOrderEnumMap[instance.contentType],
      'content': _$Enum$SortOrderEnumMap[instance.content],
      'readAt': _$Enum$SortOrderEnumMap[instance.readAt],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      'chatSessionId': _$Enum$SortOrderEnumMap[instance.chatSessionId],
      '_count': instance.$_count?.toJson(),
      '_max': instance.$_max?.toJson(),
      '_min': instance.$_min?.toJson(),
    };

Input$ChatOrderByWithRelationInput _$Input$ChatOrderByWithRelationInputFromJson(
        Map<String, dynamic> json) =>
    Input$ChatOrderByWithRelationInput(
      id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
          unknownValue: Enum$SortOrder.$unknown),
      fromId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['fromId'],
          unknownValue: Enum$SortOrder.$unknown),
      from: json['from'] == null
          ? null
          : Input$UserOrderByWithRelationInput.fromJson(
              json['from'] as Map<String, dynamic>),
      contentType: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['contentType'],
          unknownValue: Enum$SortOrder.$unknown),
      content: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['content'],
          unknownValue: Enum$SortOrder.$unknown),
      readAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['readAt'],
          unknownValue: Enum$SortOrder.$unknown),
      createdAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['createdAt'],
          unknownValue: Enum$SortOrder.$unknown),
      updatedAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['updatedAt'],
          unknownValue: Enum$SortOrder.$unknown),
      chatSessionId: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['chatSessionId'],
          unknownValue: Enum$SortOrder.$unknown),
      chatSession: json['chatSession'] == null
          ? null
          : Input$ChatSessionOrderByWithRelationInput.fromJson(
              json['chatSession'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ChatOrderByWithRelationInputToJson(
        Input$ChatOrderByWithRelationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'fromId': _$Enum$SortOrderEnumMap[instance.fromId],
      'from': instance.from?.toJson(),
      'contentType': _$Enum$SortOrderEnumMap[instance.contentType],
      'content': _$Enum$SortOrderEnumMap[instance.content],
      'readAt': _$Enum$SortOrderEnumMap[instance.readAt],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      'chatSessionId': _$Enum$SortOrderEnumMap[instance.chatSessionId],
      'chatSession': instance.chatSession?.toJson(),
    };

Input$ChatScalarWhereInput _$Input$ChatScalarWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$ChatScalarWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ChatScalarWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ChatScalarWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ChatScalarWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      fromId: json['fromId'] == null
          ? null
          : Input$StringFilter.fromJson(json['fromId'] as Map<String, dynamic>),
      contentType: json['contentType'] == null
          ? null
          : Input$EnumContentTypeFilter.fromJson(
              json['contentType'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : Input$StringFilter.fromJson(
              json['content'] as Map<String, dynamic>),
      readAt: json['readAt'] == null
          ? null
          : Input$DateTimeNullableFilter.fromJson(
              json['readAt'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      chatSessionId: json['chatSessionId'] == null
          ? null
          : Input$StringFilter.fromJson(
              json['chatSessionId'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ChatScalarWhereInputToJson(
        Input$ChatScalarWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'fromId': instance.fromId?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'readAt': instance.readAt?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'chatSessionId': instance.chatSessionId?.toJson(),
    };

Input$ChatScalarWhereWithAggregatesInput
    _$Input$ChatScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          OR: (json['OR'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          NOT: (json['NOT'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          id: json['id'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['id'] as Map<String, dynamic>),
          fromId: json['fromId'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['fromId'] as Map<String, dynamic>),
          contentType: json['contentType'] == null
              ? null
              : Input$EnumContentTypeWithAggregatesFilter.fromJson(
                  json['contentType'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['content'] as Map<String, dynamic>),
          readAt: json['readAt'] == null
              ? null
              : Input$DateTimeNullableWithAggregatesFilter.fromJson(
                  json['readAt'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          chatSessionId: json['chatSessionId'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['chatSessionId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ChatScalarWhereWithAggregatesInputToJson(
        Input$ChatScalarWhereWithAggregatesInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'fromId': instance.fromId?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'readAt': instance.readAt?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'chatSessionId': instance.chatSessionId?.toJson(),
    };

Input$ChatSessionCountOrderByAggregateInput
    _$Input$ChatSessionCountOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatSessionCountOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          participantsIds: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['participantsIds'],
              unknownValue: Enum$SortOrder.$unknown),
          lastReadAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['lastReadAt'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ChatSessionCountOrderByAggregateInputToJson(
        Input$ChatSessionCountOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'participantsIds': _$Enum$SortOrderEnumMap[instance.participantsIds],
      'lastReadAt': _$Enum$SortOrderEnumMap[instance.lastReadAt],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$ChatSessionCreateInput _$Input$ChatSessionCreateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ChatSessionCreateInput(
      id: json['id'] as String?,
      participantsIds: (json['participantsIds'] as List<dynamic>?)
          ?.map((e) => e as String?)
          .toList(),
      lastReadAt: json['lastReadAt'] as String?,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
      chats: json['chats'] == null
          ? null
          : Input$ChatCreateNestedManyWithoutChatSessionInput.fromJson(
              json['chats'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ChatSessionCreateInputToJson(
        Input$ChatSessionCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'participantsIds': instance.participantsIds,
      'lastReadAt': instance.lastReadAt,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'chats': instance.chats?.toJson(),
    };

Input$ChatSessionCreateManyInput _$Input$ChatSessionCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    Input$ChatSessionCreateManyInput(
      id: json['id'] as String?,
      participantsIds: (json['participantsIds'] as List<dynamic>?)
          ?.map((e) => e as String?)
          .toList(),
      lastReadAt: json['lastReadAt'] as String?,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
    );

Map<String, dynamic> _$Input$ChatSessionCreateManyInputToJson(
        Input$ChatSessionCreateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'participantsIds': instance.participantsIds,
      'lastReadAt': instance.lastReadAt,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ChatSessionCreateNestedOneWithoutChatsInput
    _$Input$ChatSessionCreateNestedOneWithoutChatsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatSessionCreateNestedOneWithoutChatsInput(
          create: json['create'] == null
              ? null
              : Input$ChatSessionUncheckedCreateWithoutChatsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$ChatSessionCreateOrConnectWithoutChatsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$ChatSessionWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ChatSessionCreateNestedOneWithoutChatsInputToJson(
        Input$ChatSessionCreateNestedOneWithoutChatsInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'connect': instance.connect?.toJson(),
    };

Input$ChatSessionCreateOrConnectWithoutChatsInput
    _$Input$ChatSessionCreateOrConnectWithoutChatsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatSessionCreateOrConnectWithoutChatsInput(
          where: Input$ChatSessionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$ChatSessionUncheckedCreateWithoutChatsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ChatSessionCreateOrConnectWithoutChatsInputToJson(
        Input$ChatSessionCreateOrConnectWithoutChatsInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$ChatSessionCreateparticipantsIdsInput
    _$Input$ChatSessionCreateparticipantsIdsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatSessionCreateparticipantsIdsInput(
          $set: json['set'] as String,
        );

Map<String, dynamic> _$Input$ChatSessionCreateparticipantsIdsInputToJson(
        Input$ChatSessionCreateparticipantsIdsInput instance) =>
    <String, dynamic>{
      'set': instance.$set,
    };

Input$ChatSessionCreateWithoutChatsInput
    _$Input$ChatSessionCreateWithoutChatsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatSessionCreateWithoutChatsInput(
          id: json['id'] as String?,
          participantsIds: (json['participantsIds'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          lastReadAt: json['lastReadAt'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ChatSessionCreateWithoutChatsInputToJson(
        Input$ChatSessionCreateWithoutChatsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'participantsIds': instance.participantsIds,
      'lastReadAt': instance.lastReadAt,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ChatSessionMaxOrderByAggregateInput
    _$Input$ChatSessionMaxOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatSessionMaxOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          lastReadAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['lastReadAt'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ChatSessionMaxOrderByAggregateInputToJson(
        Input$ChatSessionMaxOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'lastReadAt': _$Enum$SortOrderEnumMap[instance.lastReadAt],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$ChatSessionMinOrderByAggregateInput
    _$Input$ChatSessionMinOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatSessionMinOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          lastReadAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['lastReadAt'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ChatSessionMinOrderByAggregateInputToJson(
        Input$ChatSessionMinOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'lastReadAt': _$Enum$SortOrderEnumMap[instance.lastReadAt],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$ChatSessionOrderByWithAggregationInput
    _$Input$ChatSessionOrderByWithAggregationInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatSessionOrderByWithAggregationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          participantsIds: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['participantsIds'],
              unknownValue: Enum$SortOrder.$unknown),
          lastReadAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['lastReadAt'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          $_count: json['_count'] == null
              ? null
              : Input$ChatSessionCountOrderByAggregateInput.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$ChatSessionMaxOrderByAggregateInput.fromJson(
                  json['_max'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$ChatSessionMinOrderByAggregateInput.fromJson(
                  json['_min'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ChatSessionOrderByWithAggregationInputToJson(
        Input$ChatSessionOrderByWithAggregationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'participantsIds': _$Enum$SortOrderEnumMap[instance.participantsIds],
      'lastReadAt': _$Enum$SortOrderEnumMap[instance.lastReadAt],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      '_count': instance.$_count?.toJson(),
      '_max': instance.$_max?.toJson(),
      '_min': instance.$_min?.toJson(),
    };

Input$ChatSessionOrderByWithRelationInput
    _$Input$ChatSessionOrderByWithRelationInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatSessionOrderByWithRelationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          participantsIds: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['participantsIds'],
              unknownValue: Enum$SortOrder.$unknown),
          lastReadAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['lastReadAt'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          chats: json['chats'] == null
              ? null
              : Input$ChatOrderByRelationAggregateInput.fromJson(
                  json['chats'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ChatSessionOrderByWithRelationInputToJson(
        Input$ChatSessionOrderByWithRelationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'participantsIds': _$Enum$SortOrderEnumMap[instance.participantsIds],
      'lastReadAt': _$Enum$SortOrderEnumMap[instance.lastReadAt],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      'chats': instance.chats?.toJson(),
    };

Input$ChatSessionRelationFilter _$Input$ChatSessionRelationFilterFromJson(
        Map<String, dynamic> json) =>
    Input$ChatSessionRelationFilter(
      $is: json['is'] == null
          ? null
          : Input$ChatSessionWhereInput.fromJson(
              json['is'] as Map<String, dynamic>),
      isNot: json['isNot'] == null
          ? null
          : Input$ChatSessionWhereInput.fromJson(
              json['isNot'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ChatSessionRelationFilterToJson(
        Input$ChatSessionRelationFilter instance) =>
    <String, dynamic>{
      'is': instance.$is?.toJson(),
      'isNot': instance.isNot?.toJson(),
    };

Input$ChatSessionScalarWhereWithAggregatesInput
    _$Input$ChatSessionScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatSessionScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatSessionScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          OR: (json['OR'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatSessionScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          NOT: (json['NOT'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatSessionScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          id: json['id'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['id'] as Map<String, dynamic>),
          participantsIds: json['participantsIds'] == null
              ? null
              : Input$StringNullableListFilter.fromJson(
                  json['participantsIds'] as Map<String, dynamic>),
          lastReadAt: json['lastReadAt'] == null
              ? null
              : Input$DateTimeNullableWithAggregatesFilter.fromJson(
                  json['lastReadAt'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ChatSessionScalarWhereWithAggregatesInputToJson(
        Input$ChatSessionScalarWhereWithAggregatesInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'participantsIds': instance.participantsIds?.toJson(),
      'lastReadAt': instance.lastReadAt?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ChatSessionUncheckedCreateInput
    _$Input$ChatSessionUncheckedCreateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatSessionUncheckedCreateInput(
          id: json['id'] as String?,
          participantsIds: (json['participantsIds'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          lastReadAt: json['lastReadAt'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          chats: json['chats'] == null
              ? null
              : Input$ChatUncheckedCreateNestedManyWithoutChatSessionInput
                  .fromJson(json['chats'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ChatSessionUncheckedCreateInputToJson(
        Input$ChatSessionUncheckedCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'participantsIds': instance.participantsIds,
      'lastReadAt': instance.lastReadAt,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'chats': instance.chats?.toJson(),
    };

Input$ChatSessionUncheckedCreateWithoutChatsInput
    _$Input$ChatSessionUncheckedCreateWithoutChatsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatSessionUncheckedCreateWithoutChatsInput(
          id: json['id'] as String?,
          participantsIds: (json['participantsIds'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          lastReadAt: json['lastReadAt'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ChatSessionUncheckedCreateWithoutChatsInputToJson(
        Input$ChatSessionUncheckedCreateWithoutChatsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'participantsIds': instance.participantsIds,
      'lastReadAt': instance.lastReadAt,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ChatSessionUncheckedUpdateInput
    _$Input$ChatSessionUncheckedUpdateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatSessionUncheckedUpdateInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          participantsIds: (json['participantsIds'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          lastReadAt: json['lastReadAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['lastReadAt'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          chats: json['chats'] == null
              ? null
              : Input$ChatUncheckedUpdateManyWithoutChatSessionInput.fromJson(
                  json['chats'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ChatSessionUncheckedUpdateInputToJson(
        Input$ChatSessionUncheckedUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'participantsIds': instance.participantsIds,
      'lastReadAt': instance.lastReadAt?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'chats': instance.chats?.toJson(),
    };

Input$ChatSessionUncheckedUpdateManyInput
    _$Input$ChatSessionUncheckedUpdateManyInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatSessionUncheckedUpdateManyInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          participantsIds: (json['participantsIds'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          lastReadAt: json['lastReadAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['lastReadAt'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ChatSessionUncheckedUpdateManyInputToJson(
        Input$ChatSessionUncheckedUpdateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'participantsIds': instance.participantsIds,
      'lastReadAt': instance.lastReadAt?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ChatSessionUncheckedUpdateWithoutChatsInput
    _$Input$ChatSessionUncheckedUpdateWithoutChatsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatSessionUncheckedUpdateWithoutChatsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          participantsIds: (json['participantsIds'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          lastReadAt: json['lastReadAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['lastReadAt'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ChatSessionUncheckedUpdateWithoutChatsInputToJson(
        Input$ChatSessionUncheckedUpdateWithoutChatsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'participantsIds': instance.participantsIds,
      'lastReadAt': instance.lastReadAt?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ChatSessionUpdateInput _$Input$ChatSessionUpdateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ChatSessionUpdateInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      participantsIds: (json['participantsIds'] as List<dynamic>?)
          ?.map((e) => e as String?)
          .toList(),
      lastReadAt: json['lastReadAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['lastReadAt'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      chats: json['chats'] == null
          ? null
          : Input$ChatUpdateManyWithoutChatSessionInput.fromJson(
              json['chats'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ChatSessionUpdateInputToJson(
        Input$ChatSessionUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'participantsIds': instance.participantsIds,
      'lastReadAt': instance.lastReadAt?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'chats': instance.chats?.toJson(),
    };

Input$ChatSessionUpdateManyMutationInput
    _$Input$ChatSessionUpdateManyMutationInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatSessionUpdateManyMutationInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          participantsIds: (json['participantsIds'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          lastReadAt: json['lastReadAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['lastReadAt'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ChatSessionUpdateManyMutationInputToJson(
        Input$ChatSessionUpdateManyMutationInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'participantsIds': instance.participantsIds,
      'lastReadAt': instance.lastReadAt?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ChatSessionUpdateOneRequiredWithoutChatsInput
    _$Input$ChatSessionUpdateOneRequiredWithoutChatsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatSessionUpdateOneRequiredWithoutChatsInput(
          create: json['create'] == null
              ? null
              : Input$ChatSessionUncheckedCreateWithoutChatsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$ChatSessionCreateOrConnectWithoutChatsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : Input$ChatSessionUpsertWithoutChatsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$ChatSessionWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : Input$ChatSessionUncheckedUpdateWithoutChatsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ChatSessionUpdateOneRequiredWithoutChatsInputToJson(
            Input$ChatSessionUpdateOneRequiredWithoutChatsInput instance) =>
        <String, dynamic>{
          'create': instance.create?.toJson(),
          'connectOrCreate': instance.connectOrCreate?.toJson(),
          'upsert': instance.upsert?.toJson(),
          'connect': instance.connect?.toJson(),
          'update': instance.update?.toJson(),
        };

Input$ChatSessionUpdateparticipantsIdsInput
    _$Input$ChatSessionUpdateparticipantsIdsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatSessionUpdateparticipantsIdsInput(
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          push: (json['push'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
        );

Map<String, dynamic> _$Input$ChatSessionUpdateparticipantsIdsInputToJson(
        Input$ChatSessionUpdateparticipantsIdsInput instance) =>
    <String, dynamic>{
      'set': instance.$set,
      'push': instance.push,
    };

Input$ChatSessionUpdateWithoutChatsInput
    _$Input$ChatSessionUpdateWithoutChatsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatSessionUpdateWithoutChatsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          participantsIds: (json['participantsIds'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          lastReadAt: json['lastReadAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['lastReadAt'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ChatSessionUpdateWithoutChatsInputToJson(
        Input$ChatSessionUpdateWithoutChatsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'participantsIds': instance.participantsIds,
      'lastReadAt': instance.lastReadAt?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ChatSessionUpsertWithoutChatsInput
    _$Input$ChatSessionUpsertWithoutChatsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatSessionUpsertWithoutChatsInput(
          update: Input$ChatSessionUncheckedUpdateWithoutChatsInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$ChatSessionUncheckedCreateWithoutChatsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ChatSessionUpsertWithoutChatsInputToJson(
        Input$ChatSessionUpsertWithoutChatsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$ChatSessionWhereInput _$Input$ChatSessionWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$ChatSessionWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ChatSessionWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ChatSessionWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ChatSessionWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      participantsIds: json['participantsIds'] == null
          ? null
          : Input$StringNullableListFilter.fromJson(
              json['participantsIds'] as Map<String, dynamic>),
      lastReadAt: json['lastReadAt'] == null
          ? null
          : Input$DateTimeNullableFilter.fromJson(
              json['lastReadAt'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      chats: json['chats'] == null
          ? null
          : Input$ChatListRelationFilter.fromJson(
              json['chats'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ChatSessionWhereInputToJson(
        Input$ChatSessionWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'participantsIds': instance.participantsIds?.toJson(),
      'lastReadAt': instance.lastReadAt?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'chats': instance.chats?.toJson(),
    };

Input$ChatSessionWhereUniqueInput _$Input$ChatSessionWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    Input$ChatSessionWhereUniqueInput(
      id: json['id'] as String?,
    );

Map<String, dynamic> _$Input$ChatSessionWhereUniqueInputToJson(
        Input$ChatSessionWhereUniqueInput instance) =>
    <String, dynamic>{
      'id': instance.id,
    };

Input$ChatUncheckedCreateInput _$Input$ChatUncheckedCreateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ChatUncheckedCreateInput(
      id: json['id'] as String?,
      fromId: json['fromId'] as String,
      contentType: $enumDecode(_$Enum$ContentTypeEnumMap, json['contentType'],
          unknownValue: Enum$ContentType.$unknown),
      content: json['content'] as String,
      readAt: json['readAt'] as String?,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
      chatSessionId: json['chatSessionId'] as String,
    );

Map<String, dynamic> _$Input$ChatUncheckedCreateInputToJson(
        Input$ChatUncheckedCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'fromId': instance.fromId,
      'contentType': _$Enum$ContentTypeEnumMap[instance.contentType],
      'content': instance.content,
      'readAt': instance.readAt,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'chatSessionId': instance.chatSessionId,
    };

Input$ChatUncheckedCreateNestedManyWithoutChatSessionInput
    _$Input$ChatUncheckedCreateNestedManyWithoutChatSessionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatUncheckedCreateNestedManyWithoutChatSessionInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatCreateWithoutChatSessionInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatCreateOrConnectWithoutChatSessionInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ChatCreateManyChatSessionInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String,
    dynamic> _$Input$ChatUncheckedCreateNestedManyWithoutChatSessionInputToJson(
        Input$ChatUncheckedCreateNestedManyWithoutChatSessionInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$ChatUncheckedCreateNestedManyWithoutFromInput
    _$Input$ChatUncheckedCreateNestedManyWithoutFromInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatUncheckedCreateNestedManyWithoutFromInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatCreateWithoutFromInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatCreateOrConnectWithoutFromInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ChatCreateManyFromInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$ChatUncheckedCreateNestedManyWithoutFromInputToJson(
            Input$ChatUncheckedCreateNestedManyWithoutFromInput instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
        };

Input$ChatUncheckedCreateWithoutChatSessionInput
    _$Input$ChatUncheckedCreateWithoutChatSessionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatUncheckedCreateWithoutChatSessionInput(
          id: json['id'] as String?,
          fromId: json['fromId'] as String,
          contentType: $enumDecode(
              _$Enum$ContentTypeEnumMap, json['contentType'],
              unknownValue: Enum$ContentType.$unknown),
          content: json['content'] as String,
          readAt: json['readAt'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ChatUncheckedCreateWithoutChatSessionInputToJson(
        Input$ChatUncheckedCreateWithoutChatSessionInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'fromId': instance.fromId,
      'contentType': _$Enum$ContentTypeEnumMap[instance.contentType],
      'content': instance.content,
      'readAt': instance.readAt,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ChatUncheckedCreateWithoutFromInput
    _$Input$ChatUncheckedCreateWithoutFromInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatUncheckedCreateWithoutFromInput(
          id: json['id'] as String?,
          contentType: $enumDecode(
              _$Enum$ContentTypeEnumMap, json['contentType'],
              unknownValue: Enum$ContentType.$unknown),
          content: json['content'] as String,
          readAt: json['readAt'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          chatSessionId: json['chatSessionId'] as String,
        );

Map<String, dynamic> _$Input$ChatUncheckedCreateWithoutFromInputToJson(
        Input$ChatUncheckedCreateWithoutFromInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'contentType': _$Enum$ContentTypeEnumMap[instance.contentType],
      'content': instance.content,
      'readAt': instance.readAt,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'chatSessionId': instance.chatSessionId,
    };

Input$ChatUncheckedUpdateInput _$Input$ChatUncheckedUpdateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ChatUncheckedUpdateInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      fromId: json['fromId'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['fromId'] as Map<String, dynamic>),
      contentType: json['contentType'] == null
          ? null
          : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
              json['contentType'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['content'] as Map<String, dynamic>),
      readAt: json['readAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['readAt'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      chatSessionId: json['chatSessionId'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['chatSessionId'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ChatUncheckedUpdateInputToJson(
        Input$ChatUncheckedUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'fromId': instance.fromId?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'readAt': instance.readAt?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'chatSessionId': instance.chatSessionId?.toJson(),
    };

Input$ChatUncheckedUpdateManyInput _$Input$ChatUncheckedUpdateManyInputFromJson(
        Map<String, dynamic> json) =>
    Input$ChatUncheckedUpdateManyInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      fromId: json['fromId'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['fromId'] as Map<String, dynamic>),
      contentType: json['contentType'] == null
          ? null
          : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
              json['contentType'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['content'] as Map<String, dynamic>),
      readAt: json['readAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['readAt'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      chatSessionId: json['chatSessionId'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['chatSessionId'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ChatUncheckedUpdateManyInputToJson(
        Input$ChatUncheckedUpdateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'fromId': instance.fromId?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'readAt': instance.readAt?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'chatSessionId': instance.chatSessionId?.toJson(),
    };

Input$ChatUncheckedUpdateManyWithoutChatSessionInput
    _$Input$ChatUncheckedUpdateManyWithoutChatSessionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatUncheckedUpdateManyWithoutChatSessionInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatCreateWithoutChatSessionInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatCreateOrConnectWithoutChatSessionInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatUpsertWithWhereUniqueWithoutChatSessionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ChatCreateManyChatSessionInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatUpdateWithWhereUniqueWithoutChatSessionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatUpdateManyWithWhereWithoutChatSessionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$ChatUncheckedUpdateManyWithoutChatSessionInputToJson(
            Input$ChatUncheckedUpdateManyWithoutChatSessionInput instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'set': instance.$set?.map((e) => e?.toJson()).toList(),
          'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
          'delete': instance.delete?.map((e) => e?.toJson()).toList(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
          'update': instance.update?.map((e) => e?.toJson()).toList(),
          'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
          'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
        };

Input$ChatUncheckedUpdateManyWithoutChatsInput
    _$Input$ChatUncheckedUpdateManyWithoutChatsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatUncheckedUpdateManyWithoutChatsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          fromId: json['fromId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['fromId'] as Map<String, dynamic>),
          contentType: json['contentType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['contentType'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          readAt: json['readAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['readAt'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ChatUncheckedUpdateManyWithoutChatsInputToJson(
        Input$ChatUncheckedUpdateManyWithoutChatsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'fromId': instance.fromId?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'readAt': instance.readAt?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ChatUncheckedUpdateManyWithoutFromInput
    _$Input$ChatUncheckedUpdateManyWithoutFromInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatUncheckedUpdateManyWithoutFromInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatCreateWithoutFromInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatCreateOrConnectWithoutFromInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatUpsertWithWhereUniqueWithoutFromInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ChatCreateManyFromInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatUpdateWithWhereUniqueWithoutFromInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatUpdateManyWithWhereWithoutFromInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$ChatUncheckedUpdateManyWithoutFromInputToJson(
        Input$ChatUncheckedUpdateManyWithoutFromInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$ChatUncheckedUpdateManyWithoutMyChatsInput
    _$Input$ChatUncheckedUpdateManyWithoutMyChatsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatUncheckedUpdateManyWithoutMyChatsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          contentType: json['contentType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['contentType'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          readAt: json['readAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['readAt'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          chatSessionId: json['chatSessionId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['chatSessionId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ChatUncheckedUpdateManyWithoutMyChatsInputToJson(
        Input$ChatUncheckedUpdateManyWithoutMyChatsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'readAt': instance.readAt?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'chatSessionId': instance.chatSessionId?.toJson(),
    };

Input$ChatUncheckedUpdateWithoutChatSessionInput
    _$Input$ChatUncheckedUpdateWithoutChatSessionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatUncheckedUpdateWithoutChatSessionInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          fromId: json['fromId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['fromId'] as Map<String, dynamic>),
          contentType: json['contentType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['contentType'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          readAt: json['readAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['readAt'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ChatUncheckedUpdateWithoutChatSessionInputToJson(
        Input$ChatUncheckedUpdateWithoutChatSessionInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'fromId': instance.fromId?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'readAt': instance.readAt?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ChatUncheckedUpdateWithoutFromInput
    _$Input$ChatUncheckedUpdateWithoutFromInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatUncheckedUpdateWithoutFromInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          contentType: json['contentType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['contentType'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          readAt: json['readAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['readAt'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          chatSessionId: json['chatSessionId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['chatSessionId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ChatUncheckedUpdateWithoutFromInputToJson(
        Input$ChatUncheckedUpdateWithoutFromInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'readAt': instance.readAt?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'chatSessionId': instance.chatSessionId?.toJson(),
    };

Input$ChatUpdateInput _$Input$ChatUpdateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ChatUpdateInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      from: json['from'] == null
          ? null
          : Input$UserUpdateOneRequiredWithoutMyChatsInput.fromJson(
              json['from'] as Map<String, dynamic>),
      contentType: json['contentType'] == null
          ? null
          : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
              json['contentType'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['content'] as Map<String, dynamic>),
      readAt: json['readAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['readAt'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      chatSession: json['chatSession'] == null
          ? null
          : Input$ChatSessionUpdateOneRequiredWithoutChatsInput.fromJson(
              json['chatSession'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ChatUpdateInputToJson(
        Input$ChatUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'from': instance.from?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'readAt': instance.readAt?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'chatSession': instance.chatSession?.toJson(),
    };

Input$ChatUpdateManyMutationInput _$Input$ChatUpdateManyMutationInputFromJson(
        Map<String, dynamic> json) =>
    Input$ChatUpdateManyMutationInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      contentType: json['contentType'] == null
          ? null
          : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
              json['contentType'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['content'] as Map<String, dynamic>),
      readAt: json['readAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['readAt'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ChatUpdateManyMutationInputToJson(
        Input$ChatUpdateManyMutationInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'readAt': instance.readAt?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ChatUpdateManyWithoutChatSessionInput
    _$Input$ChatUpdateManyWithoutChatSessionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatUpdateManyWithoutChatSessionInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatCreateWithoutChatSessionInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatCreateOrConnectWithoutChatSessionInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatUpsertWithWhereUniqueWithoutChatSessionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ChatCreateManyChatSessionInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatUpdateWithWhereUniqueWithoutChatSessionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatUpdateManyWithWhereWithoutChatSessionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$ChatUpdateManyWithoutChatSessionInputToJson(
        Input$ChatUpdateManyWithoutChatSessionInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$ChatUpdateManyWithoutFromInput
    _$Input$ChatUpdateManyWithoutFromInputFromJson(Map<String, dynamic> json) =>
        Input$ChatUpdateManyWithoutFromInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatCreateWithoutFromInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatCreateOrConnectWithoutFromInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatUpsertWithWhereUniqueWithoutFromInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ChatCreateManyFromInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatUpdateWithWhereUniqueWithoutFromInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatUpdateManyWithWhereWithoutFromInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ChatScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$ChatUpdateManyWithoutFromInputToJson(
        Input$ChatUpdateManyWithoutFromInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$ChatUpdateManyWithWhereWithoutChatSessionInput
    _$Input$ChatUpdateManyWithWhereWithoutChatSessionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatUpdateManyWithWhereWithoutChatSessionInput(
          where: Input$ChatScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$ChatUncheckedUpdateManyWithoutChatsInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ChatUpdateManyWithWhereWithoutChatSessionInputToJson(
            Input$ChatUpdateManyWithWhereWithoutChatSessionInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$ChatUpdateManyWithWhereWithoutFromInput
    _$Input$ChatUpdateManyWithWhereWithoutFromInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatUpdateManyWithWhereWithoutFromInput(
          where: Input$ChatScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$ChatUncheckedUpdateManyWithoutMyChatsInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ChatUpdateManyWithWhereWithoutFromInputToJson(
        Input$ChatUpdateManyWithWhereWithoutFromInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

Input$ChatUpdateWithoutChatSessionInput
    _$Input$ChatUpdateWithoutChatSessionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatUpdateWithoutChatSessionInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          from: json['from'] == null
              ? null
              : Input$UserUpdateOneRequiredWithoutMyChatsInput.fromJson(
                  json['from'] as Map<String, dynamic>),
          contentType: json['contentType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['contentType'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          readAt: json['readAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['readAt'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ChatUpdateWithoutChatSessionInputToJson(
        Input$ChatUpdateWithoutChatSessionInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'from': instance.from?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'readAt': instance.readAt?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ChatUpdateWithoutFromInput _$Input$ChatUpdateWithoutFromInputFromJson(
        Map<String, dynamic> json) =>
    Input$ChatUpdateWithoutFromInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      contentType: json['contentType'] == null
          ? null
          : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
              json['contentType'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['content'] as Map<String, dynamic>),
      readAt: json['readAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['readAt'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      chatSession: json['chatSession'] == null
          ? null
          : Input$ChatSessionUpdateOneRequiredWithoutChatsInput.fromJson(
              json['chatSession'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ChatUpdateWithoutFromInputToJson(
        Input$ChatUpdateWithoutFromInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'readAt': instance.readAt?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'chatSession': instance.chatSession?.toJson(),
    };

Input$ChatUpdateWithWhereUniqueWithoutChatSessionInput
    _$Input$ChatUpdateWithWhereUniqueWithoutChatSessionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatUpdateWithWhereUniqueWithoutChatSessionInput(
          where: Input$ChatWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$ChatUncheckedUpdateWithoutChatSessionInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ChatUpdateWithWhereUniqueWithoutChatSessionInputToJson(
            Input$ChatUpdateWithWhereUniqueWithoutChatSessionInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$ChatUpdateWithWhereUniqueWithoutFromInput
    _$Input$ChatUpdateWithWhereUniqueWithoutFromInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatUpdateWithWhereUniqueWithoutFromInput(
          where: Input$ChatWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$ChatUncheckedUpdateWithoutFromInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ChatUpdateWithWhereUniqueWithoutFromInputToJson(
        Input$ChatUpdateWithWhereUniqueWithoutFromInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

Input$ChatUpsertWithWhereUniqueWithoutChatSessionInput
    _$Input$ChatUpsertWithWhereUniqueWithoutChatSessionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatUpsertWithWhereUniqueWithoutChatSessionInput(
          where: Input$ChatWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: Input$ChatUncheckedUpdateWithoutChatSessionInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$ChatUncheckedCreateWithoutChatSessionInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ChatUpsertWithWhereUniqueWithoutChatSessionInputToJson(
            Input$ChatUpsertWithWhereUniqueWithoutChatSessionInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

Input$ChatUpsertWithWhereUniqueWithoutFromInput
    _$Input$ChatUpsertWithWhereUniqueWithoutFromInputFromJson(
            Map<String, dynamic> json) =>
        Input$ChatUpsertWithWhereUniqueWithoutFromInput(
          where: Input$ChatWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: Input$ChatUncheckedUpdateWithoutFromInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$ChatUncheckedCreateWithoutFromInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ChatUpsertWithWhereUniqueWithoutFromInputToJson(
        Input$ChatUpsertWithWhereUniqueWithoutFromInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$ChatWhereInput _$Input$ChatWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$ChatWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ChatWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ChatWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ChatWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      fromId: json['fromId'] == null
          ? null
          : Input$StringFilter.fromJson(json['fromId'] as Map<String, dynamic>),
      from: json['from'] == null
          ? null
          : Input$UserWhereInput.fromJson(json['from'] as Map<String, dynamic>),
      contentType: json['contentType'] == null
          ? null
          : Input$EnumContentTypeFilter.fromJson(
              json['contentType'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : Input$StringFilter.fromJson(
              json['content'] as Map<String, dynamic>),
      readAt: json['readAt'] == null
          ? null
          : Input$DateTimeNullableFilter.fromJson(
              json['readAt'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      chatSessionId: json['chatSessionId'] == null
          ? null
          : Input$StringFilter.fromJson(
              json['chatSessionId'] as Map<String, dynamic>),
      chatSession: json['chatSession'] == null
          ? null
          : Input$ChatSessionWhereInput.fromJson(
              json['chatSession'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ChatWhereInputToJson(
        Input$ChatWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'fromId': instance.fromId?.toJson(),
      'from': instance.from?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'readAt': instance.readAt?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'chatSessionId': instance.chatSessionId?.toJson(),
      'chatSession': instance.chatSession?.toJson(),
    };

Input$ChatWhereUniqueInput _$Input$ChatWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    Input$ChatWhereUniqueInput(
      id: json['id'] as String?,
    );

Map<String, dynamic> _$Input$ChatWhereUniqueInputToJson(
        Input$ChatWhereUniqueInput instance) =>
    <String, dynamic>{
      'id': instance.id,
    };

Input$ClassroomAvgOrderByAggregateInput
    _$Input$ClassroomAvgOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomAvgOrderByAggregateInput(
          level: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['level'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ClassroomAvgOrderByAggregateInputToJson(
        Input$ClassroomAvgOrderByAggregateInput instance) =>
    <String, dynamic>{
      'level': _$Enum$SortOrderEnumMap[instance.level],
    };

Input$ClassroomCountOrderByAggregateInput
    _$Input$ClassroomCountOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomCountOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          schoolId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['schoolId'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          level: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['level'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ClassroomCountOrderByAggregateInputToJson(
        Input$ClassroomCountOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'schoolId': _$Enum$SortOrderEnumMap[instance.schoolId],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'level': _$Enum$SortOrderEnumMap[instance.level],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$ClassroomCreateInput _$Input$ClassroomCreateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ClassroomCreateInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      school: json['school'] == null
          ? null
          : Input$SchoolCreateNestedOneWithoutClassroomsInput.fromJson(
              json['school'] as Map<String, dynamic>),
      user: Input$UserCreateNestedOneWithoutClassroomsInput.fromJson(
          json['user'] as Map<String, dynamic>),
      students: json['students'] == null
          ? null
          : Input$ClassroomStudentCreateNestedManyWithoutClassroomInput
              .fromJson(json['students'] as Map<String, dynamic>),
      level: json['level'] as int?,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
    );

Map<String, dynamic> _$Input$ClassroomCreateInputToJson(
        Input$ClassroomCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'school': instance.school?.toJson(),
      'user': instance.user.toJson(),
      'students': instance.students?.toJson(),
      'level': instance.level,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ClassroomCreateManyInput _$Input$ClassroomCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    Input$ClassroomCreateManyInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      schoolId: json['schoolId'] as String?,
      userId: json['userId'] as String,
      level: json['level'] as int?,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
    );

Map<String, dynamic> _$Input$ClassroomCreateManyInputToJson(
        Input$ClassroomCreateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'schoolId': instance.schoolId,
      'userId': instance.userId,
      'level': instance.level,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ClassroomCreateManySchoolInput
    _$Input$ClassroomCreateManySchoolInputFromJson(Map<String, dynamic> json) =>
        Input$ClassroomCreateManySchoolInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          userId: json['userId'] as String,
          level: json['level'] as int?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ClassroomCreateManySchoolInputToJson(
        Input$ClassroomCreateManySchoolInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'userId': instance.userId,
      'level': instance.level,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ClassroomCreateManySchoolInputEnvelope
    _$Input$ClassroomCreateManySchoolInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomCreateManySchoolInputEnvelope(
          data: Input$ClassroomCreateManySchoolInput.fromJson(
              json['data'] as Map<String, dynamic>),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$Input$ClassroomCreateManySchoolInputEnvelopeToJson(
        Input$ClassroomCreateManySchoolInputEnvelope instance) =>
    <String, dynamic>{
      'data': instance.data.toJson(),
      'skipDuplicates': instance.skipDuplicates,
    };

Input$ClassroomCreateManyUserInput _$Input$ClassroomCreateManyUserInputFromJson(
        Map<String, dynamic> json) =>
    Input$ClassroomCreateManyUserInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      schoolId: json['schoolId'] as String?,
      level: json['level'] as int?,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
    );

Map<String, dynamic> _$Input$ClassroomCreateManyUserInputToJson(
        Input$ClassroomCreateManyUserInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'schoolId': instance.schoolId,
      'level': instance.level,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ClassroomCreateManyUserInputEnvelope
    _$Input$ClassroomCreateManyUserInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomCreateManyUserInputEnvelope(
          data: Input$ClassroomCreateManyUserInput.fromJson(
              json['data'] as Map<String, dynamic>),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$Input$ClassroomCreateManyUserInputEnvelopeToJson(
        Input$ClassroomCreateManyUserInputEnvelope instance) =>
    <String, dynamic>{
      'data': instance.data.toJson(),
      'skipDuplicates': instance.skipDuplicates,
    };

Input$ClassroomCreateNestedManyWithoutSchoolInput
    _$Input$ClassroomCreateNestedManyWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomCreateNestedManyWithoutSchoolInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomCreateWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomCreateOrConnectWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ClassroomCreateManySchoolInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$ClassroomCreateNestedManyWithoutSchoolInputToJson(
        Input$ClassroomCreateNestedManyWithoutSchoolInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$ClassroomCreateNestedManyWithoutUserInput
    _$Input$ClassroomCreateNestedManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomCreateNestedManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ClassroomCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$ClassroomCreateNestedManyWithoutUserInputToJson(
        Input$ClassroomCreateNestedManyWithoutUserInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$ClassroomCreateNestedOneWithoutStudentsInput
    _$Input$ClassroomCreateNestedOneWithoutStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomCreateNestedOneWithoutStudentsInput(
          create: json['create'] == null
              ? null
              : Input$ClassroomUncheckedCreateWithoutStudentsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$ClassroomCreateOrConnectWithoutStudentsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$ClassroomWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomCreateNestedOneWithoutStudentsInputToJson(
        Input$ClassroomCreateNestedOneWithoutStudentsInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'connect': instance.connect?.toJson(),
    };

Input$ClassroomCreateOrConnectWithoutSchoolInput
    _$Input$ClassroomCreateOrConnectWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomCreateOrConnectWithoutSchoolInput(
          where: Input$ClassroomWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$ClassroomUncheckedCreateWithoutSchoolInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomCreateOrConnectWithoutSchoolInputToJson(
        Input$ClassroomCreateOrConnectWithoutSchoolInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$ClassroomCreateOrConnectWithoutStudentsInput
    _$Input$ClassroomCreateOrConnectWithoutStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomCreateOrConnectWithoutStudentsInput(
          where: Input$ClassroomWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$ClassroomUncheckedCreateWithoutStudentsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomCreateOrConnectWithoutStudentsInputToJson(
        Input$ClassroomCreateOrConnectWithoutStudentsInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$ClassroomCreateOrConnectWithoutUserInput
    _$Input$ClassroomCreateOrConnectWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomCreateOrConnectWithoutUserInput(
          where: Input$ClassroomWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$ClassroomUncheckedCreateWithoutUserInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomCreateOrConnectWithoutUserInputToJson(
        Input$ClassroomCreateOrConnectWithoutUserInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$ClassroomCreateWithoutSchoolInput
    _$Input$ClassroomCreateWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomCreateWithoutSchoolInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          user: Input$UserCreateNestedOneWithoutClassroomsInput.fromJson(
              json['user'] as Map<String, dynamic>),
          students: json['students'] == null
              ? null
              : Input$ClassroomStudentCreateNestedManyWithoutClassroomInput
                  .fromJson(json['students'] as Map<String, dynamic>),
          level: json['level'] as int?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ClassroomCreateWithoutSchoolInputToJson(
        Input$ClassroomCreateWithoutSchoolInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'user': instance.user.toJson(),
      'students': instance.students?.toJson(),
      'level': instance.level,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ClassroomCreateWithoutStudentsInput
    _$Input$ClassroomCreateWithoutStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomCreateWithoutStudentsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          school: json['school'] == null
              ? null
              : Input$SchoolCreateNestedOneWithoutClassroomsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
          user: Input$UserCreateNestedOneWithoutClassroomsInput.fromJson(
              json['user'] as Map<String, dynamic>),
          level: json['level'] as int?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ClassroomCreateWithoutStudentsInputToJson(
        Input$ClassroomCreateWithoutStudentsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'school': instance.school?.toJson(),
      'user': instance.user.toJson(),
      'level': instance.level,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ClassroomCreateWithoutUserInput
    _$Input$ClassroomCreateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomCreateWithoutUserInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          school: json['school'] == null
              ? null
              : Input$SchoolCreateNestedOneWithoutClassroomsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
          students: json['students'] == null
              ? null
              : Input$ClassroomStudentCreateNestedManyWithoutClassroomInput
                  .fromJson(json['students'] as Map<String, dynamic>),
          level: json['level'] as int?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ClassroomCreateWithoutUserInputToJson(
        Input$ClassroomCreateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'school': instance.school?.toJson(),
      'students': instance.students?.toJson(),
      'level': instance.level,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ClassroomListRelationFilter _$Input$ClassroomListRelationFilterFromJson(
        Map<String, dynamic> json) =>
    Input$ClassroomListRelationFilter(
      every: json['every'] == null
          ? null
          : Input$ClassroomWhereInput.fromJson(
              json['every'] as Map<String, dynamic>),
      some: json['some'] == null
          ? null
          : Input$ClassroomWhereInput.fromJson(
              json['some'] as Map<String, dynamic>),
      none: json['none'] == null
          ? null
          : Input$ClassroomWhereInput.fromJson(
              json['none'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ClassroomListRelationFilterToJson(
        Input$ClassroomListRelationFilter instance) =>
    <String, dynamic>{
      'every': instance.every?.toJson(),
      'some': instance.some?.toJson(),
      'none': instance.none?.toJson(),
    };

Input$ClassroomMaxOrderByAggregateInput
    _$Input$ClassroomMaxOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomMaxOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          schoolId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['schoolId'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          level: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['level'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ClassroomMaxOrderByAggregateInputToJson(
        Input$ClassroomMaxOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'schoolId': _$Enum$SortOrderEnumMap[instance.schoolId],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'level': _$Enum$SortOrderEnumMap[instance.level],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$ClassroomMinOrderByAggregateInput
    _$Input$ClassroomMinOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomMinOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          schoolId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['schoolId'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          level: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['level'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ClassroomMinOrderByAggregateInputToJson(
        Input$ClassroomMinOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'schoolId': _$Enum$SortOrderEnumMap[instance.schoolId],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'level': _$Enum$SortOrderEnumMap[instance.level],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$ClassroomOrderByRelationAggregateInput
    _$Input$ClassroomOrderByRelationAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomOrderByRelationAggregateInput(
          $_count: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['_count'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ClassroomOrderByRelationAggregateInputToJson(
        Input$ClassroomOrderByRelationAggregateInput instance) =>
    <String, dynamic>{
      '_count': _$Enum$SortOrderEnumMap[instance.$_count],
    };

Input$ClassroomOrderByWithAggregationInput
    _$Input$ClassroomOrderByWithAggregationInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomOrderByWithAggregationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          schoolId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['schoolId'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          level: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['level'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          $_count: json['_count'] == null
              ? null
              : Input$ClassroomCountOrderByAggregateInput.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_avg: json['_avg'] == null
              ? null
              : Input$ClassroomAvgOrderByAggregateInput.fromJson(
                  json['_avg'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$ClassroomMaxOrderByAggregateInput.fromJson(
                  json['_max'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$ClassroomMinOrderByAggregateInput.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_sum: json['_sum'] == null
              ? null
              : Input$ClassroomSumOrderByAggregateInput.fromJson(
                  json['_sum'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomOrderByWithAggregationInputToJson(
        Input$ClassroomOrderByWithAggregationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'schoolId': _$Enum$SortOrderEnumMap[instance.schoolId],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'level': _$Enum$SortOrderEnumMap[instance.level],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      '_count': instance.$_count?.toJson(),
      '_avg': instance.$_avg?.toJson(),
      '_max': instance.$_max?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_sum': instance.$_sum?.toJson(),
    };

Input$ClassroomOrderByWithRelationInput
    _$Input$ClassroomOrderByWithRelationInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomOrderByWithRelationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          schoolId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['schoolId'],
              unknownValue: Enum$SortOrder.$unknown),
          school: json['school'] == null
              ? null
              : Input$SchoolOrderByWithRelationInput.fromJson(
                  json['school'] as Map<String, dynamic>),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          user: json['user'] == null
              ? null
              : Input$UserOrderByWithRelationInput.fromJson(
                  json['user'] as Map<String, dynamic>),
          students: json['students'] == null
              ? null
              : Input$ClassroomStudentOrderByRelationAggregateInput.fromJson(
                  json['students'] as Map<String, dynamic>),
          level: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['level'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ClassroomOrderByWithRelationInputToJson(
        Input$ClassroomOrderByWithRelationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'schoolId': _$Enum$SortOrderEnumMap[instance.schoolId],
      'school': instance.school?.toJson(),
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'user': instance.user?.toJson(),
      'students': instance.students?.toJson(),
      'level': _$Enum$SortOrderEnumMap[instance.level],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$ClassroomRelationFilter _$Input$ClassroomRelationFilterFromJson(
        Map<String, dynamic> json) =>
    Input$ClassroomRelationFilter(
      $is: json['is'] == null
          ? null
          : Input$ClassroomWhereInput.fromJson(
              json['is'] as Map<String, dynamic>),
      isNot: json['isNot'] == null
          ? null
          : Input$ClassroomWhereInput.fromJson(
              json['isNot'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ClassroomRelationFilterToJson(
        Input$ClassroomRelationFilter instance) =>
    <String, dynamic>{
      'is': instance.$is?.toJson(),
      'isNot': instance.isNot?.toJson(),
    };

Input$ClassroomScalarWhereInput _$Input$ClassroomScalarWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$ClassroomScalarWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ClassroomScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ClassroomScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ClassroomScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      schoolId: json['schoolId'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['schoolId'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : Input$StringFilter.fromJson(json['userId'] as Map<String, dynamic>),
      level: json['level'] == null
          ? null
          : Input$IntFilter.fromJson(json['level'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ClassroomScalarWhereInputToJson(
        Input$ClassroomScalarWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
      'userId': instance.userId?.toJson(),
      'level': instance.level?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ClassroomScalarWhereWithAggregatesInput
    _$Input$ClassroomScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          OR: (json['OR'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          NOT: (json['NOT'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          id: json['id'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['name'] as Map<String, dynamic>),
          schoolId: json['schoolId'] == null
              ? null
              : Input$StringNullableWithAggregatesFilter.fromJson(
                  json['schoolId'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['userId'] as Map<String, dynamic>),
          level: json['level'] == null
              ? null
              : Input$IntWithAggregatesFilter.fromJson(
                  json['level'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomScalarWhereWithAggregatesInputToJson(
        Input$ClassroomScalarWhereWithAggregatesInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
      'userId': instance.userId?.toJson(),
      'level': instance.level?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ClassroomStudentCountOrderByAggregateInput
    _$Input$ClassroomStudentCountOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentCountOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          classroomId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['classroomId'],
              unknownValue: Enum$SortOrder.$unknown),
          status: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['status'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ClassroomStudentCountOrderByAggregateInputToJson(
        Input$ClassroomStudentCountOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'classroomId': _$Enum$SortOrderEnumMap[instance.classroomId],
      'status': _$Enum$SortOrderEnumMap[instance.status],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$ClassroomStudentCreateInput _$Input$ClassroomStudentCreateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ClassroomStudentCreateInput(
      id: json['id'] as String?,
      user: Input$UserCreateNestedOneWithoutClassroomStudentsInput.fromJson(
          json['user'] as Map<String, dynamic>),
      classroom: json['classroom'] == null
          ? null
          : Input$ClassroomCreateNestedOneWithoutStudentsInput.fromJson(
              json['classroom'] as Map<String, dynamic>),
      status: $enumDecodeNullable(
          _$Enum$ClassroomStudentStatusEnumMap, json['status'],
          unknownValue: Enum$ClassroomStudentStatus.$unknown),
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
    );

Map<String, dynamic> _$Input$ClassroomStudentCreateInputToJson(
        Input$ClassroomStudentCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'user': instance.user.toJson(),
      'classroom': instance.classroom?.toJson(),
      'status': _$Enum$ClassroomStudentStatusEnumMap[instance.status],
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

const _$Enum$ClassroomStudentStatusEnumMap = {
  Enum$ClassroomStudentStatus.ACTIVE: 'ACTIVE',
  Enum$ClassroomStudentStatus.BANNED: 'BANNED',
  Enum$ClassroomStudentStatus.$unknown: r'$unknown',
};

Input$ClassroomStudentCreateManyClassroomInput
    _$Input$ClassroomStudentCreateManyClassroomInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentCreateManyClassroomInput(
          id: json['id'] as String?,
          userId: json['userId'] as String,
          status: $enumDecodeNullable(
              _$Enum$ClassroomStudentStatusEnumMap, json['status'],
              unknownValue: Enum$ClassroomStudentStatus.$unknown),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ClassroomStudentCreateManyClassroomInputToJson(
        Input$ClassroomStudentCreateManyClassroomInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'userId': instance.userId,
      'status': _$Enum$ClassroomStudentStatusEnumMap[instance.status],
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ClassroomStudentCreateManyClassroomInputEnvelope
    _$Input$ClassroomStudentCreateManyClassroomInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentCreateManyClassroomInputEnvelope(
          data: Input$ClassroomStudentCreateManyClassroomInput.fromJson(
              json['data'] as Map<String, dynamic>),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic>
    _$Input$ClassroomStudentCreateManyClassroomInputEnvelopeToJson(
            Input$ClassroomStudentCreateManyClassroomInputEnvelope instance) =>
        <String, dynamic>{
          'data': instance.data.toJson(),
          'skipDuplicates': instance.skipDuplicates,
        };

Input$ClassroomStudentCreateManyInput
    _$Input$ClassroomStudentCreateManyInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentCreateManyInput(
          id: json['id'] as String?,
          userId: json['userId'] as String,
          classroomId: json['classroomId'] as String?,
          status: $enumDecodeNullable(
              _$Enum$ClassroomStudentStatusEnumMap, json['status'],
              unknownValue: Enum$ClassroomStudentStatus.$unknown),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ClassroomStudentCreateManyInputToJson(
        Input$ClassroomStudentCreateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'userId': instance.userId,
      'classroomId': instance.classroomId,
      'status': _$Enum$ClassroomStudentStatusEnumMap[instance.status],
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ClassroomStudentCreateManyUserInput
    _$Input$ClassroomStudentCreateManyUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentCreateManyUserInput(
          id: json['id'] as String?,
          classroomId: json['classroomId'] as String?,
          status: $enumDecodeNullable(
              _$Enum$ClassroomStudentStatusEnumMap, json['status'],
              unknownValue: Enum$ClassroomStudentStatus.$unknown),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ClassroomStudentCreateManyUserInputToJson(
        Input$ClassroomStudentCreateManyUserInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'classroomId': instance.classroomId,
      'status': _$Enum$ClassroomStudentStatusEnumMap[instance.status],
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ClassroomStudentCreateManyUserInputEnvelope
    _$Input$ClassroomStudentCreateManyUserInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentCreateManyUserInputEnvelope(
          data: Input$ClassroomStudentCreateManyUserInput.fromJson(
              json['data'] as Map<String, dynamic>),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$Input$ClassroomStudentCreateManyUserInputEnvelopeToJson(
        Input$ClassroomStudentCreateManyUserInputEnvelope instance) =>
    <String, dynamic>{
      'data': instance.data.toJson(),
      'skipDuplicates': instance.skipDuplicates,
    };

Input$ClassroomStudentCreateNestedManyWithoutClassroomInput
    _$Input$ClassroomStudentCreateNestedManyWithoutClassroomInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentCreateNestedManyWithoutClassroomInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentCreateWithoutClassroomInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentCreateOrConnectWithoutClassroomInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ClassroomStudentCreateManyClassroomInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$ClassroomStudentCreateNestedManyWithoutClassroomInputToJson(
            Input$ClassroomStudentCreateNestedManyWithoutClassroomInput
                instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
        };

Input$ClassroomStudentCreateNestedManyWithoutUserInput
    _$Input$ClassroomStudentCreateNestedManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentCreateNestedManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentCreateOrConnectWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ClassroomStudentCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$ClassroomStudentCreateNestedManyWithoutUserInputToJson(
            Input$ClassroomStudentCreateNestedManyWithoutUserInput instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
        };

Input$ClassroomStudentCreateOrConnectWithoutClassroomInput
    _$Input$ClassroomStudentCreateOrConnectWithoutClassroomInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentCreateOrConnectWithoutClassroomInput(
          where: Input$ClassroomStudentWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$ClassroomStudentUncheckedCreateWithoutClassroomInput
              .fromJson(json['create'] as Map<String, dynamic>),
        );

Map<String,
    dynamic> _$Input$ClassroomStudentCreateOrConnectWithoutClassroomInputToJson(
        Input$ClassroomStudentCreateOrConnectWithoutClassroomInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$ClassroomStudentCreateOrConnectWithoutUserInput
    _$Input$ClassroomStudentCreateOrConnectWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentCreateOrConnectWithoutUserInput(
          where: Input$ClassroomStudentWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create:
              Input$ClassroomStudentUncheckedCreateWithoutUserInput.fromJson(
                  json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ClassroomStudentCreateOrConnectWithoutUserInputToJson(
            Input$ClassroomStudentCreateOrConnectWithoutUserInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'create': instance.create.toJson(),
        };

Input$ClassroomStudentCreateWithoutClassroomInput
    _$Input$ClassroomStudentCreateWithoutClassroomInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentCreateWithoutClassroomInput(
          id: json['id'] as String?,
          user: Input$UserCreateNestedOneWithoutClassroomStudentsInput.fromJson(
              json['user'] as Map<String, dynamic>),
          status: $enumDecodeNullable(
              _$Enum$ClassroomStudentStatusEnumMap, json['status'],
              unknownValue: Enum$ClassroomStudentStatus.$unknown),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ClassroomStudentCreateWithoutClassroomInputToJson(
        Input$ClassroomStudentCreateWithoutClassroomInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'user': instance.user.toJson(),
      'status': _$Enum$ClassroomStudentStatusEnumMap[instance.status],
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ClassroomStudentCreateWithoutUserInput
    _$Input$ClassroomStudentCreateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentCreateWithoutUserInput(
          id: json['id'] as String?,
          classroom: json['classroom'] == null
              ? null
              : Input$ClassroomCreateNestedOneWithoutStudentsInput.fromJson(
                  json['classroom'] as Map<String, dynamic>),
          status: $enumDecodeNullable(
              _$Enum$ClassroomStudentStatusEnumMap, json['status'],
              unknownValue: Enum$ClassroomStudentStatus.$unknown),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ClassroomStudentCreateWithoutUserInputToJson(
        Input$ClassroomStudentCreateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'classroom': instance.classroom?.toJson(),
      'status': _$Enum$ClassroomStudentStatusEnumMap[instance.status],
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ClassroomStudentListRelationFilter
    _$Input$ClassroomStudentListRelationFilterFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentListRelationFilter(
          every: json['every'] == null
              ? null
              : Input$ClassroomStudentWhereInput.fromJson(
                  json['every'] as Map<String, dynamic>),
          some: json['some'] == null
              ? null
              : Input$ClassroomStudentWhereInput.fromJson(
                  json['some'] as Map<String, dynamic>),
          none: json['none'] == null
              ? null
              : Input$ClassroomStudentWhereInput.fromJson(
                  json['none'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomStudentListRelationFilterToJson(
        Input$ClassroomStudentListRelationFilter instance) =>
    <String, dynamic>{
      'every': instance.every?.toJson(),
      'some': instance.some?.toJson(),
      'none': instance.none?.toJson(),
    };

Input$ClassroomStudentMaxOrderByAggregateInput
    _$Input$ClassroomStudentMaxOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentMaxOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          classroomId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['classroomId'],
              unknownValue: Enum$SortOrder.$unknown),
          status: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['status'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ClassroomStudentMaxOrderByAggregateInputToJson(
        Input$ClassroomStudentMaxOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'classroomId': _$Enum$SortOrderEnumMap[instance.classroomId],
      'status': _$Enum$SortOrderEnumMap[instance.status],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$ClassroomStudentMinOrderByAggregateInput
    _$Input$ClassroomStudentMinOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentMinOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          classroomId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['classroomId'],
              unknownValue: Enum$SortOrder.$unknown),
          status: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['status'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ClassroomStudentMinOrderByAggregateInputToJson(
        Input$ClassroomStudentMinOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'classroomId': _$Enum$SortOrderEnumMap[instance.classroomId],
      'status': _$Enum$SortOrderEnumMap[instance.status],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$ClassroomStudentOrderByRelationAggregateInput
    _$Input$ClassroomStudentOrderByRelationAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentOrderByRelationAggregateInput(
          $_count: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['_count'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic>
    _$Input$ClassroomStudentOrderByRelationAggregateInputToJson(
            Input$ClassroomStudentOrderByRelationAggregateInput instance) =>
        <String, dynamic>{
          '_count': _$Enum$SortOrderEnumMap[instance.$_count],
        };

Input$ClassroomStudentOrderByWithAggregationInput
    _$Input$ClassroomStudentOrderByWithAggregationInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentOrderByWithAggregationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          classroomId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['classroomId'],
              unknownValue: Enum$SortOrder.$unknown),
          status: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['status'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          $_count: json['_count'] == null
              ? null
              : Input$ClassroomStudentCountOrderByAggregateInput.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$ClassroomStudentMaxOrderByAggregateInput.fromJson(
                  json['_max'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$ClassroomStudentMinOrderByAggregateInput.fromJson(
                  json['_min'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomStudentOrderByWithAggregationInputToJson(
        Input$ClassroomStudentOrderByWithAggregationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'classroomId': _$Enum$SortOrderEnumMap[instance.classroomId],
      'status': _$Enum$SortOrderEnumMap[instance.status],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      '_count': instance.$_count?.toJson(),
      '_max': instance.$_max?.toJson(),
      '_min': instance.$_min?.toJson(),
    };

Input$ClassroomStudentOrderByWithRelationInput
    _$Input$ClassroomStudentOrderByWithRelationInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentOrderByWithRelationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          user: json['user'] == null
              ? null
              : Input$UserOrderByWithRelationInput.fromJson(
                  json['user'] as Map<String, dynamic>),
          classroom: json['classroom'] == null
              ? null
              : Input$ClassroomOrderByWithRelationInput.fromJson(
                  json['classroom'] as Map<String, dynamic>),
          classroomId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['classroomId'],
              unknownValue: Enum$SortOrder.$unknown),
          status: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['status'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ClassroomStudentOrderByWithRelationInputToJson(
        Input$ClassroomStudentOrderByWithRelationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'user': instance.user?.toJson(),
      'classroom': instance.classroom?.toJson(),
      'classroomId': _$Enum$SortOrderEnumMap[instance.classroomId],
      'status': _$Enum$SortOrderEnumMap[instance.status],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$ClassroomStudentScalarWhereInput
    _$Input$ClassroomStudentScalarWhereInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentScalarWhereInput(
          AND: (json['AND'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          OR: (json['OR'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          NOT: (json['NOT'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          id: json['id'] == null
              ? null
              : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringFilter.fromJson(
                  json['userId'] as Map<String, dynamic>),
          classroomId: json['classroomId'] == null
              ? null
              : Input$StringNullableFilter.fromJson(
                  json['classroomId'] as Map<String, dynamic>),
          status: json['status'] == null
              ? null
              : Input$EnumClassroomStudentStatusFilter.fromJson(
                  json['status'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFilter.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFilter.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomStudentScalarWhereInputToJson(
        Input$ClassroomStudentScalarWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'userId': instance.userId?.toJson(),
      'classroomId': instance.classroomId?.toJson(),
      'status': instance.status?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ClassroomStudentScalarWhereWithAggregatesInput
    _$Input$ClassroomStudentScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentScalarWhereWithAggregatesInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          OR: (json['OR'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentScalarWhereWithAggregatesInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          NOT: (json['NOT'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentScalarWhereWithAggregatesInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          id: json['id'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['id'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['userId'] as Map<String, dynamic>),
          classroomId: json['classroomId'] == null
              ? null
              : Input$StringNullableWithAggregatesFilter.fromJson(
                  json['classroomId'] as Map<String, dynamic>),
          status: json['status'] == null
              ? null
              : Input$EnumClassroomStudentStatusWithAggregatesFilter.fromJson(
                  json['status'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ClassroomStudentScalarWhereWithAggregatesInputToJson(
            Input$ClassroomStudentScalarWhereWithAggregatesInput instance) =>
        <String, dynamic>{
          'AND': instance.AND?.map((e) => e?.toJson()).toList(),
          'OR': instance.OR?.map((e) => e?.toJson()).toList(),
          'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
          'id': instance.id?.toJson(),
          'userId': instance.userId?.toJson(),
          'classroomId': instance.classroomId?.toJson(),
          'status': instance.status?.toJson(),
          'createdAt': instance.createdAt?.toJson(),
          'updatedAt': instance.updatedAt?.toJson(),
        };

Input$ClassroomStudentUncheckedCreateInput
    _$Input$ClassroomStudentUncheckedCreateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentUncheckedCreateInput(
          id: json['id'] as String?,
          userId: json['userId'] as String,
          classroomId: json['classroomId'] as String?,
          status: $enumDecodeNullable(
              _$Enum$ClassroomStudentStatusEnumMap, json['status'],
              unknownValue: Enum$ClassroomStudentStatus.$unknown),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ClassroomStudentUncheckedCreateInputToJson(
        Input$ClassroomStudentUncheckedCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'userId': instance.userId,
      'classroomId': instance.classroomId,
      'status': _$Enum$ClassroomStudentStatusEnumMap[instance.status],
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ClassroomStudentUncheckedCreateNestedManyWithoutClassroomInput
    _$Input$ClassroomStudentUncheckedCreateNestedManyWithoutClassroomInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentUncheckedCreateNestedManyWithoutClassroomInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentCreateWithoutClassroomInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentCreateOrConnectWithoutClassroomInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ClassroomStudentCreateManyClassroomInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$ClassroomStudentUncheckedCreateNestedManyWithoutClassroomInputToJson(
            Input$ClassroomStudentUncheckedCreateNestedManyWithoutClassroomInput
                instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
        };

Input$ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
    _$Input$ClassroomStudentUncheckedCreateNestedManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentUncheckedCreateNestedManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentCreateOrConnectWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ClassroomStudentCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$ClassroomStudentUncheckedCreateNestedManyWithoutUserInputToJson(
            Input$ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
                instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
        };

Input$ClassroomStudentUncheckedCreateWithoutClassroomInput
    _$Input$ClassroomStudentUncheckedCreateWithoutClassroomInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentUncheckedCreateWithoutClassroomInput(
          id: json['id'] as String?,
          userId: json['userId'] as String,
          status: $enumDecodeNullable(
              _$Enum$ClassroomStudentStatusEnumMap, json['status'],
              unknownValue: Enum$ClassroomStudentStatus.$unknown),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String,
    dynamic> _$Input$ClassroomStudentUncheckedCreateWithoutClassroomInputToJson(
        Input$ClassroomStudentUncheckedCreateWithoutClassroomInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'userId': instance.userId,
      'status': _$Enum$ClassroomStudentStatusEnumMap[instance.status],
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ClassroomStudentUncheckedCreateWithoutUserInput
    _$Input$ClassroomStudentUncheckedCreateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentUncheckedCreateWithoutUserInput(
          id: json['id'] as String?,
          classroomId: json['classroomId'] as String?,
          status: $enumDecodeNullable(
              _$Enum$ClassroomStudentStatusEnumMap, json['status'],
              unknownValue: Enum$ClassroomStudentStatus.$unknown),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic>
    _$Input$ClassroomStudentUncheckedCreateWithoutUserInputToJson(
            Input$ClassroomStudentUncheckedCreateWithoutUserInput instance) =>
        <String, dynamic>{
          'id': instance.id,
          'classroomId': instance.classroomId,
          'status': _$Enum$ClassroomStudentStatusEnumMap[instance.status],
          'createdAt': instance.createdAt,
          'updatedAt': instance.updatedAt,
        };

Input$ClassroomStudentUncheckedUpdateInput
    _$Input$ClassroomStudentUncheckedUpdateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentUncheckedUpdateInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          classroomId: json['classroomId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['classroomId'] as Map<String, dynamic>),
          status: json['status'] == null
              ? null
              : Input$EnumClassroomStudentStatusFieldUpdateOperationsInput
                  .fromJson(json['status'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomStudentUncheckedUpdateInputToJson(
        Input$ClassroomStudentUncheckedUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'userId': instance.userId?.toJson(),
      'classroomId': instance.classroomId?.toJson(),
      'status': instance.status?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ClassroomStudentUncheckedUpdateManyInput
    _$Input$ClassroomStudentUncheckedUpdateManyInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentUncheckedUpdateManyInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          classroomId: json['classroomId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['classroomId'] as Map<String, dynamic>),
          status: json['status'] == null
              ? null
              : Input$EnumClassroomStudentStatusFieldUpdateOperationsInput
                  .fromJson(json['status'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomStudentUncheckedUpdateManyInputToJson(
        Input$ClassroomStudentUncheckedUpdateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'userId': instance.userId?.toJson(),
      'classroomId': instance.classroomId?.toJson(),
      'status': instance.status?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ClassroomStudentUncheckedUpdateManyWithoutClassroomInput
    _$Input$ClassroomStudentUncheckedUpdateManyWithoutClassroomInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentUncheckedUpdateManyWithoutClassroomInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentCreateWithoutClassroomInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentCreateOrConnectWithoutClassroomInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentUpsertWithWhereUniqueWithoutClassroomInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ClassroomStudentCreateManyClassroomInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentUpdateWithWhereUniqueWithoutClassroomInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentUpdateManyWithWhereWithoutClassroomInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$ClassroomStudentUncheckedUpdateManyWithoutClassroomInputToJson(
            Input$ClassroomStudentUncheckedUpdateManyWithoutClassroomInput
                instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'set': instance.$set?.map((e) => e?.toJson()).toList(),
          'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
          'delete': instance.delete?.map((e) => e?.toJson()).toList(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
          'update': instance.update?.map((e) => e?.toJson()).toList(),
          'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
          'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
        };

Input$ClassroomStudentUncheckedUpdateManyWithoutClassroomStudentsInput
    _$Input$ClassroomStudentUncheckedUpdateManyWithoutClassroomStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentUncheckedUpdateManyWithoutClassroomStudentsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          classroomId: json['classroomId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['classroomId'] as Map<String, dynamic>),
          status: json['status'] == null
              ? null
              : Input$EnumClassroomStudentStatusFieldUpdateOperationsInput
                  .fromJson(json['status'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ClassroomStudentUncheckedUpdateManyWithoutClassroomStudentsInputToJson(
            Input$ClassroomStudentUncheckedUpdateManyWithoutClassroomStudentsInput
                instance) =>
        <String, dynamic>{
          'id': instance.id?.toJson(),
          'classroomId': instance.classroomId?.toJson(),
          'status': instance.status?.toJson(),
          'createdAt': instance.createdAt?.toJson(),
          'updatedAt': instance.updatedAt?.toJson(),
        };

Input$ClassroomStudentUncheckedUpdateManyWithoutStudentsInput
    _$Input$ClassroomStudentUncheckedUpdateManyWithoutStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentUncheckedUpdateManyWithoutStudentsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          status: json['status'] == null
              ? null
              : Input$EnumClassroomStudentStatusFieldUpdateOperationsInput
                  .fromJson(json['status'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ClassroomStudentUncheckedUpdateManyWithoutStudentsInputToJson(
            Input$ClassroomStudentUncheckedUpdateManyWithoutStudentsInput
                instance) =>
        <String, dynamic>{
          'id': instance.id?.toJson(),
          'userId': instance.userId?.toJson(),
          'status': instance.status?.toJson(),
          'createdAt': instance.createdAt?.toJson(),
          'updatedAt': instance.updatedAt?.toJson(),
        };

Input$ClassroomStudentUncheckedUpdateManyWithoutUserInput
    _$Input$ClassroomStudentUncheckedUpdateManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentUncheckedUpdateManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentCreateOrConnectWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentUpsertWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ClassroomStudentCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentUpdateWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentUpdateManyWithWhereWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String,
    dynamic> _$Input$ClassroomStudentUncheckedUpdateManyWithoutUserInputToJson(
        Input$ClassroomStudentUncheckedUpdateManyWithoutUserInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$ClassroomStudentUncheckedUpdateWithoutClassroomInput
    _$Input$ClassroomStudentUncheckedUpdateWithoutClassroomInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentUncheckedUpdateWithoutClassroomInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          status: json['status'] == null
              ? null
              : Input$EnumClassroomStudentStatusFieldUpdateOperationsInput
                  .fromJson(json['status'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String,
    dynamic> _$Input$ClassroomStudentUncheckedUpdateWithoutClassroomInputToJson(
        Input$ClassroomStudentUncheckedUpdateWithoutClassroomInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'userId': instance.userId?.toJson(),
      'status': instance.status?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ClassroomStudentUncheckedUpdateWithoutUserInput
    _$Input$ClassroomStudentUncheckedUpdateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentUncheckedUpdateWithoutUserInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          classroomId: json['classroomId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['classroomId'] as Map<String, dynamic>),
          status: json['status'] == null
              ? null
              : Input$EnumClassroomStudentStatusFieldUpdateOperationsInput
                  .fromJson(json['status'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ClassroomStudentUncheckedUpdateWithoutUserInputToJson(
            Input$ClassroomStudentUncheckedUpdateWithoutUserInput instance) =>
        <String, dynamic>{
          'id': instance.id?.toJson(),
          'classroomId': instance.classroomId?.toJson(),
          'status': instance.status?.toJson(),
          'createdAt': instance.createdAt?.toJson(),
          'updatedAt': instance.updatedAt?.toJson(),
        };

Input$ClassroomStudentUpdateInput _$Input$ClassroomStudentUpdateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ClassroomStudentUpdateInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      user: json['user'] == null
          ? null
          : Input$UserUpdateOneRequiredWithoutClassroomStudentsInput.fromJson(
              json['user'] as Map<String, dynamic>),
      classroom: json['classroom'] == null
          ? null
          : Input$ClassroomUpdateOneWithoutStudentsInput.fromJson(
              json['classroom'] as Map<String, dynamic>),
      status: json['status'] == null
          ? null
          : Input$EnumClassroomStudentStatusFieldUpdateOperationsInput.fromJson(
              json['status'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ClassroomStudentUpdateInputToJson(
        Input$ClassroomStudentUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'user': instance.user?.toJson(),
      'classroom': instance.classroom?.toJson(),
      'status': instance.status?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ClassroomStudentUpdateManyMutationInput
    _$Input$ClassroomStudentUpdateManyMutationInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentUpdateManyMutationInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          status: json['status'] == null
              ? null
              : Input$EnumClassroomStudentStatusFieldUpdateOperationsInput
                  .fromJson(json['status'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomStudentUpdateManyMutationInputToJson(
        Input$ClassroomStudentUpdateManyMutationInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'status': instance.status?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ClassroomStudentUpdateManyWithoutClassroomInput
    _$Input$ClassroomStudentUpdateManyWithoutClassroomInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentUpdateManyWithoutClassroomInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentCreateWithoutClassroomInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentCreateOrConnectWithoutClassroomInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentUpsertWithWhereUniqueWithoutClassroomInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ClassroomStudentCreateManyClassroomInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentUpdateWithWhereUniqueWithoutClassroomInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentUpdateManyWithWhereWithoutClassroomInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$ClassroomStudentUpdateManyWithoutClassroomInputToJson(
            Input$ClassroomStudentUpdateManyWithoutClassroomInput instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'set': instance.$set?.map((e) => e?.toJson()).toList(),
          'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
          'delete': instance.delete?.map((e) => e?.toJson()).toList(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
          'update': instance.update?.map((e) => e?.toJson()).toList(),
          'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
          'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
        };

Input$ClassroomStudentUpdateManyWithoutUserInput
    _$Input$ClassroomStudentUpdateManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentUpdateManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentCreateOrConnectWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentUpsertWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ClassroomStudentCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentUpdateWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentUpdateManyWithWhereWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomStudentScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$ClassroomStudentUpdateManyWithoutUserInputToJson(
        Input$ClassroomStudentUpdateManyWithoutUserInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$ClassroomStudentUpdateManyWithWhereWithoutClassroomInput
    _$Input$ClassroomStudentUpdateManyWithWhereWithoutClassroomInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentUpdateManyWithWhereWithoutClassroomInput(
          where: Input$ClassroomStudentScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$ClassroomStudentUncheckedUpdateManyWithoutStudentsInput
              .fromJson(json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ClassroomStudentUpdateManyWithWhereWithoutClassroomInputToJson(
            Input$ClassroomStudentUpdateManyWithWhereWithoutClassroomInput
                instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$ClassroomStudentUpdateManyWithWhereWithoutUserInput
    _$Input$ClassroomStudentUpdateManyWithWhereWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentUpdateManyWithWhereWithoutUserInput(
          where: Input$ClassroomStudentScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data:
              Input$ClassroomStudentUncheckedUpdateManyWithoutClassroomStudentsInput
                  .fromJson(json['data'] as Map<String, dynamic>),
        );

Map<String,
    dynamic> _$Input$ClassroomStudentUpdateManyWithWhereWithoutUserInputToJson(
        Input$ClassroomStudentUpdateManyWithWhereWithoutUserInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

Input$ClassroomStudentUpdateWithoutClassroomInput
    _$Input$ClassroomStudentUpdateWithoutClassroomInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentUpdateWithoutClassroomInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          user: json['user'] == null
              ? null
              : Input$UserUpdateOneRequiredWithoutClassroomStudentsInput
                  .fromJson(json['user'] as Map<String, dynamic>),
          status: json['status'] == null
              ? null
              : Input$EnumClassroomStudentStatusFieldUpdateOperationsInput
                  .fromJson(json['status'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomStudentUpdateWithoutClassroomInputToJson(
        Input$ClassroomStudentUpdateWithoutClassroomInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'user': instance.user?.toJson(),
      'status': instance.status?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ClassroomStudentUpdateWithoutUserInput
    _$Input$ClassroomStudentUpdateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentUpdateWithoutUserInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          classroom: json['classroom'] == null
              ? null
              : Input$ClassroomUpdateOneWithoutStudentsInput.fromJson(
                  json['classroom'] as Map<String, dynamic>),
          status: json['status'] == null
              ? null
              : Input$EnumClassroomStudentStatusFieldUpdateOperationsInput
                  .fromJson(json['status'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomStudentUpdateWithoutUserInputToJson(
        Input$ClassroomStudentUpdateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'classroom': instance.classroom?.toJson(),
      'status': instance.status?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ClassroomStudentUpdateWithWhereUniqueWithoutClassroomInput
    _$Input$ClassroomStudentUpdateWithWhereUniqueWithoutClassroomInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentUpdateWithWhereUniqueWithoutClassroomInput(
          where: Input$ClassroomStudentWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$ClassroomStudentUncheckedUpdateWithoutClassroomInput
              .fromJson(json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ClassroomStudentUpdateWithWhereUniqueWithoutClassroomInputToJson(
            Input$ClassroomStudentUpdateWithWhereUniqueWithoutClassroomInput
                instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$ClassroomStudentUpdateWithWhereUniqueWithoutUserInput
    _$Input$ClassroomStudentUpdateWithWhereUniqueWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentUpdateWithWhereUniqueWithoutUserInput(
          where: Input$ClassroomStudentWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$ClassroomStudentUncheckedUpdateWithoutUserInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ClassroomStudentUpdateWithWhereUniqueWithoutUserInputToJson(
            Input$ClassroomStudentUpdateWithWhereUniqueWithoutUserInput
                instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$ClassroomStudentUpsertWithWhereUniqueWithoutClassroomInput
    _$Input$ClassroomStudentUpsertWithWhereUniqueWithoutClassroomInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentUpsertWithWhereUniqueWithoutClassroomInput(
          where: Input$ClassroomStudentWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: Input$ClassroomStudentUncheckedUpdateWithoutClassroomInput
              .fromJson(json['update'] as Map<String, dynamic>),
          create: Input$ClassroomStudentUncheckedCreateWithoutClassroomInput
              .fromJson(json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ClassroomStudentUpsertWithWhereUniqueWithoutClassroomInputToJson(
            Input$ClassroomStudentUpsertWithWhereUniqueWithoutClassroomInput
                instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

Input$ClassroomStudentUpsertWithWhereUniqueWithoutUserInput
    _$Input$ClassroomStudentUpsertWithWhereUniqueWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentUpsertWithWhereUniqueWithoutUserInput(
          where: Input$ClassroomStudentWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update:
              Input$ClassroomStudentUncheckedUpdateWithoutUserInput.fromJson(
                  json['update'] as Map<String, dynamic>),
          create:
              Input$ClassroomStudentUncheckedCreateWithoutUserInput.fromJson(
                  json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ClassroomStudentUpsertWithWhereUniqueWithoutUserInputToJson(
            Input$ClassroomStudentUpsertWithWhereUniqueWithoutUserInput
                instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

Input$ClassroomStudentWhereInput _$Input$ClassroomStudentWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$ClassroomStudentWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ClassroomStudentWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ClassroomStudentWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ClassroomStudentWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : Input$StringFilter.fromJson(json['userId'] as Map<String, dynamic>),
      user: json['user'] == null
          ? null
          : Input$UserWhereInput.fromJson(json['user'] as Map<String, dynamic>),
      classroom: json['classroom'] == null
          ? null
          : Input$ClassroomWhereInput.fromJson(
              json['classroom'] as Map<String, dynamic>),
      classroomId: json['classroomId'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['classroomId'] as Map<String, dynamic>),
      status: json['status'] == null
          ? null
          : Input$EnumClassroomStudentStatusFilter.fromJson(
              json['status'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ClassroomStudentWhereInputToJson(
        Input$ClassroomStudentWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'userId': instance.userId?.toJson(),
      'user': instance.user?.toJson(),
      'classroom': instance.classroom?.toJson(),
      'classroomId': instance.classroomId?.toJson(),
      'status': instance.status?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ClassroomStudentWhereUniqueInput
    _$Input$ClassroomStudentWhereUniqueInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomStudentWhereUniqueInput(
          id: json['id'] as String?,
        );

Map<String, dynamic> _$Input$ClassroomStudentWhereUniqueInputToJson(
        Input$ClassroomStudentWhereUniqueInput instance) =>
    <String, dynamic>{
      'id': instance.id,
    };

Input$ClassroomSumOrderByAggregateInput
    _$Input$ClassroomSumOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomSumOrderByAggregateInput(
          level: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['level'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ClassroomSumOrderByAggregateInputToJson(
        Input$ClassroomSumOrderByAggregateInput instance) =>
    <String, dynamic>{
      'level': _$Enum$SortOrderEnumMap[instance.level],
    };

Input$ClassroomUncheckedCreateInput
    _$Input$ClassroomUncheckedCreateInputFromJson(Map<String, dynamic> json) =>
        Input$ClassroomUncheckedCreateInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          schoolId: json['schoolId'] as String?,
          userId: json['userId'] as String,
          students: json['students'] == null
              ? null
              : Input$ClassroomStudentUncheckedCreateNestedManyWithoutClassroomInput
                  .fromJson(json['students'] as Map<String, dynamic>),
          level: json['level'] as int?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ClassroomUncheckedCreateInputToJson(
        Input$ClassroomUncheckedCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'schoolId': instance.schoolId,
      'userId': instance.userId,
      'students': instance.students?.toJson(),
      'level': instance.level,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ClassroomUncheckedCreateNestedManyWithoutSchoolInput
    _$Input$ClassroomUncheckedCreateNestedManyWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUncheckedCreateNestedManyWithoutSchoolInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomCreateWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomCreateOrConnectWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ClassroomCreateManySchoolInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String,
    dynamic> _$Input$ClassroomUncheckedCreateNestedManyWithoutSchoolInputToJson(
        Input$ClassroomUncheckedCreateNestedManyWithoutSchoolInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$ClassroomUncheckedCreateNestedManyWithoutUserInput
    _$Input$ClassroomUncheckedCreateNestedManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUncheckedCreateNestedManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ClassroomCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String,
    dynamic> _$Input$ClassroomUncheckedCreateNestedManyWithoutUserInputToJson(
        Input$ClassroomUncheckedCreateNestedManyWithoutUserInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$ClassroomUncheckedCreateWithoutSchoolInput
    _$Input$ClassroomUncheckedCreateWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUncheckedCreateWithoutSchoolInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          userId: json['userId'] as String,
          students: json['students'] == null
              ? null
              : Input$ClassroomStudentUncheckedCreateNestedManyWithoutClassroomInput
                  .fromJson(json['students'] as Map<String, dynamic>),
          level: json['level'] as int?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ClassroomUncheckedCreateWithoutSchoolInputToJson(
        Input$ClassroomUncheckedCreateWithoutSchoolInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'userId': instance.userId,
      'students': instance.students?.toJson(),
      'level': instance.level,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ClassroomUncheckedCreateWithoutStudentsInput
    _$Input$ClassroomUncheckedCreateWithoutStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUncheckedCreateWithoutStudentsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          schoolId: json['schoolId'] as String?,
          userId: json['userId'] as String,
          level: json['level'] as int?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ClassroomUncheckedCreateWithoutStudentsInputToJson(
        Input$ClassroomUncheckedCreateWithoutStudentsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'schoolId': instance.schoolId,
      'userId': instance.userId,
      'level': instance.level,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ClassroomUncheckedCreateWithoutUserInput
    _$Input$ClassroomUncheckedCreateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUncheckedCreateWithoutUserInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          schoolId: json['schoolId'] as String?,
          students: json['students'] == null
              ? null
              : Input$ClassroomStudentUncheckedCreateNestedManyWithoutClassroomInput
                  .fromJson(json['students'] as Map<String, dynamic>),
          level: json['level'] as int?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ClassroomUncheckedCreateWithoutUserInputToJson(
        Input$ClassroomUncheckedCreateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'schoolId': instance.schoolId,
      'students': instance.students?.toJson(),
      'level': instance.level,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ClassroomUncheckedUpdateInput
    _$Input$ClassroomUncheckedUpdateInputFromJson(Map<String, dynamic> json) =>
        Input$ClassroomUncheckedUpdateInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          schoolId: json['schoolId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['schoolId'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          students: json['students'] == null
              ? null
              : Input$ClassroomStudentUncheckedUpdateManyWithoutClassroomInput
                  .fromJson(json['students'] as Map<String, dynamic>),
          level: json['level'] == null
              ? null
              : Input$IntFieldUpdateOperationsInput.fromJson(
                  json['level'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomUncheckedUpdateInputToJson(
        Input$ClassroomUncheckedUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
      'userId': instance.userId?.toJson(),
      'students': instance.students?.toJson(),
      'level': instance.level?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ClassroomUncheckedUpdateManyInput
    _$Input$ClassroomUncheckedUpdateManyInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUncheckedUpdateManyInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          schoolId: json['schoolId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['schoolId'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          level: json['level'] == null
              ? null
              : Input$IntFieldUpdateOperationsInput.fromJson(
                  json['level'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomUncheckedUpdateManyInputToJson(
        Input$ClassroomUncheckedUpdateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
      'userId': instance.userId?.toJson(),
      'level': instance.level?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ClassroomUncheckedUpdateManyWithoutClassroomsInput
    _$Input$ClassroomUncheckedUpdateManyWithoutClassroomsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUncheckedUpdateManyWithoutClassroomsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          schoolId: json['schoolId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['schoolId'] as Map<String, dynamic>),
          level: json['level'] == null
              ? null
              : Input$IntFieldUpdateOperationsInput.fromJson(
                  json['level'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String,
    dynamic> _$Input$ClassroomUncheckedUpdateManyWithoutClassroomsInputToJson(
        Input$ClassroomUncheckedUpdateManyWithoutClassroomsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
      'level': instance.level?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ClassroomUncheckedUpdateManyWithoutSchoolInput
    _$Input$ClassroomUncheckedUpdateManyWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUncheckedUpdateManyWithoutSchoolInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomCreateWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomCreateOrConnectWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomUpsertWithWhereUniqueWithoutSchoolInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ClassroomCreateManySchoolInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomUpdateWithWhereUniqueWithoutSchoolInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomUpdateManyWithWhereWithoutSchoolInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$ClassroomUncheckedUpdateManyWithoutSchoolInputToJson(
            Input$ClassroomUncheckedUpdateManyWithoutSchoolInput instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'set': instance.$set?.map((e) => e?.toJson()).toList(),
          'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
          'delete': instance.delete?.map((e) => e?.toJson()).toList(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
          'update': instance.update?.map((e) => e?.toJson()).toList(),
          'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
          'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
        };

Input$ClassroomUncheckedUpdateManyWithoutUserInput
    _$Input$ClassroomUncheckedUpdateManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUncheckedUpdateManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomUpsertWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ClassroomCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomUpdateWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomUpdateManyWithWhereWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$ClassroomUncheckedUpdateManyWithoutUserInputToJson(
        Input$ClassroomUncheckedUpdateManyWithoutUserInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$ClassroomUncheckedUpdateWithoutSchoolInput
    _$Input$ClassroomUncheckedUpdateWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUncheckedUpdateWithoutSchoolInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          students: json['students'] == null
              ? null
              : Input$ClassroomStudentUncheckedUpdateManyWithoutClassroomInput
                  .fromJson(json['students'] as Map<String, dynamic>),
          level: json['level'] == null
              ? null
              : Input$IntFieldUpdateOperationsInput.fromJson(
                  json['level'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomUncheckedUpdateWithoutSchoolInputToJson(
        Input$ClassroomUncheckedUpdateWithoutSchoolInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'userId': instance.userId?.toJson(),
      'students': instance.students?.toJson(),
      'level': instance.level?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ClassroomUncheckedUpdateWithoutStudentsInput
    _$Input$ClassroomUncheckedUpdateWithoutStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUncheckedUpdateWithoutStudentsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          schoolId: json['schoolId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['schoolId'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          level: json['level'] == null
              ? null
              : Input$IntFieldUpdateOperationsInput.fromJson(
                  json['level'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomUncheckedUpdateWithoutStudentsInputToJson(
        Input$ClassroomUncheckedUpdateWithoutStudentsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
      'userId': instance.userId?.toJson(),
      'level': instance.level?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ClassroomUncheckedUpdateWithoutUserInput
    _$Input$ClassroomUncheckedUpdateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUncheckedUpdateWithoutUserInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          schoolId: json['schoolId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['schoolId'] as Map<String, dynamic>),
          students: json['students'] == null
              ? null
              : Input$ClassroomStudentUncheckedUpdateManyWithoutClassroomInput
                  .fromJson(json['students'] as Map<String, dynamic>),
          level: json['level'] == null
              ? null
              : Input$IntFieldUpdateOperationsInput.fromJson(
                  json['level'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomUncheckedUpdateWithoutUserInputToJson(
        Input$ClassroomUncheckedUpdateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
      'students': instance.students?.toJson(),
      'level': instance.level?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ClassroomUpdateInput _$Input$ClassroomUpdateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ClassroomUpdateInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      school: json['school'] == null
          ? null
          : Input$SchoolUpdateOneWithoutClassroomsInput.fromJson(
              json['school'] as Map<String, dynamic>),
      user: json['user'] == null
          ? null
          : Input$UserUpdateOneRequiredWithoutClassroomsInput.fromJson(
              json['user'] as Map<String, dynamic>),
      students: json['students'] == null
          ? null
          : Input$ClassroomStudentUpdateManyWithoutClassroomInput.fromJson(
              json['students'] as Map<String, dynamic>),
      level: json['level'] == null
          ? null
          : Input$IntFieldUpdateOperationsInput.fromJson(
              json['level'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ClassroomUpdateInputToJson(
        Input$ClassroomUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'school': instance.school?.toJson(),
      'user': instance.user?.toJson(),
      'students': instance.students?.toJson(),
      'level': instance.level?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ClassroomUpdateManyMutationInput
    _$Input$ClassroomUpdateManyMutationInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUpdateManyMutationInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          level: json['level'] == null
              ? null
              : Input$IntFieldUpdateOperationsInput.fromJson(
                  json['level'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomUpdateManyMutationInputToJson(
        Input$ClassroomUpdateManyMutationInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'level': instance.level?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ClassroomUpdateManyWithoutSchoolInput
    _$Input$ClassroomUpdateManyWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUpdateManyWithoutSchoolInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomCreateWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomCreateOrConnectWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomUpsertWithWhereUniqueWithoutSchoolInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ClassroomCreateManySchoolInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomUpdateWithWhereUniqueWithoutSchoolInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomUpdateManyWithWhereWithoutSchoolInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$ClassroomUpdateManyWithoutSchoolInputToJson(
        Input$ClassroomUpdateManyWithoutSchoolInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$ClassroomUpdateManyWithoutUserInput
    _$Input$ClassroomUpdateManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUpdateManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomUpsertWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ClassroomCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomUpdateWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomUpdateManyWithWhereWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ClassroomScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$ClassroomUpdateManyWithoutUserInputToJson(
        Input$ClassroomUpdateManyWithoutUserInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$ClassroomUpdateManyWithWhereWithoutSchoolInput
    _$Input$ClassroomUpdateManyWithWhereWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUpdateManyWithWhereWithoutSchoolInput(
          where: Input$ClassroomScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data:
              Input$ClassroomUncheckedUpdateManyWithoutClassroomsInput.fromJson(
                  json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ClassroomUpdateManyWithWhereWithoutSchoolInputToJson(
            Input$ClassroomUpdateManyWithWhereWithoutSchoolInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$ClassroomUpdateManyWithWhereWithoutUserInput
    _$Input$ClassroomUpdateManyWithWhereWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUpdateManyWithWhereWithoutUserInput(
          where: Input$ClassroomScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data:
              Input$ClassroomUncheckedUpdateManyWithoutClassroomsInput.fromJson(
                  json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomUpdateManyWithWhereWithoutUserInputToJson(
        Input$ClassroomUpdateManyWithWhereWithoutUserInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

Input$ClassroomUpdateOneWithoutStudentsInput
    _$Input$ClassroomUpdateOneWithoutStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUpdateOneWithoutStudentsInput(
          create: json['create'] == null
              ? null
              : Input$ClassroomUncheckedCreateWithoutStudentsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$ClassroomCreateOrConnectWithoutStudentsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : Input$ClassroomUpsertWithoutStudentsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          disconnect: json['disconnect'] as bool?,
          delete: json['delete'] as bool?,
          connect: json['connect'] == null
              ? null
              : Input$ClassroomWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : Input$ClassroomUncheckedUpdateWithoutStudentsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomUpdateOneWithoutStudentsInputToJson(
        Input$ClassroomUpdateOneWithoutStudentsInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'upsert': instance.upsert?.toJson(),
      'disconnect': instance.disconnect,
      'delete': instance.delete,
      'connect': instance.connect?.toJson(),
      'update': instance.update?.toJson(),
    };

Input$ClassroomUpdateWithoutSchoolInput
    _$Input$ClassroomUpdateWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUpdateWithoutSchoolInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          user: json['user'] == null
              ? null
              : Input$UserUpdateOneRequiredWithoutClassroomsInput.fromJson(
                  json['user'] as Map<String, dynamic>),
          students: json['students'] == null
              ? null
              : Input$ClassroomStudentUpdateManyWithoutClassroomInput.fromJson(
                  json['students'] as Map<String, dynamic>),
          level: json['level'] == null
              ? null
              : Input$IntFieldUpdateOperationsInput.fromJson(
                  json['level'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomUpdateWithoutSchoolInputToJson(
        Input$ClassroomUpdateWithoutSchoolInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'user': instance.user?.toJson(),
      'students': instance.students?.toJson(),
      'level': instance.level?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ClassroomUpdateWithoutStudentsInput
    _$Input$ClassroomUpdateWithoutStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUpdateWithoutStudentsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          school: json['school'] == null
              ? null
              : Input$SchoolUpdateOneWithoutClassroomsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
          user: json['user'] == null
              ? null
              : Input$UserUpdateOneRequiredWithoutClassroomsInput.fromJson(
                  json['user'] as Map<String, dynamic>),
          level: json['level'] == null
              ? null
              : Input$IntFieldUpdateOperationsInput.fromJson(
                  json['level'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomUpdateWithoutStudentsInputToJson(
        Input$ClassroomUpdateWithoutStudentsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'school': instance.school?.toJson(),
      'user': instance.user?.toJson(),
      'level': instance.level?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ClassroomUpdateWithoutUserInput
    _$Input$ClassroomUpdateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUpdateWithoutUserInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          school: json['school'] == null
              ? null
              : Input$SchoolUpdateOneWithoutClassroomsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
          students: json['students'] == null
              ? null
              : Input$ClassroomStudentUpdateManyWithoutClassroomInput.fromJson(
                  json['students'] as Map<String, dynamic>),
          level: json['level'] == null
              ? null
              : Input$IntFieldUpdateOperationsInput.fromJson(
                  json['level'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomUpdateWithoutUserInputToJson(
        Input$ClassroomUpdateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'school': instance.school?.toJson(),
      'students': instance.students?.toJson(),
      'level': instance.level?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ClassroomUpdateWithWhereUniqueWithoutSchoolInput
    _$Input$ClassroomUpdateWithWhereUniqueWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUpdateWithWhereUniqueWithoutSchoolInput(
          where: Input$ClassroomWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$ClassroomUncheckedUpdateWithoutSchoolInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ClassroomUpdateWithWhereUniqueWithoutSchoolInputToJson(
            Input$ClassroomUpdateWithWhereUniqueWithoutSchoolInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$ClassroomUpdateWithWhereUniqueWithoutUserInput
    _$Input$ClassroomUpdateWithWhereUniqueWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUpdateWithWhereUniqueWithoutUserInput(
          where: Input$ClassroomWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$ClassroomUncheckedUpdateWithoutUserInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ClassroomUpdateWithWhereUniqueWithoutUserInputToJson(
            Input$ClassroomUpdateWithWhereUniqueWithoutUserInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$ClassroomUpsertWithoutStudentsInput
    _$Input$ClassroomUpsertWithoutStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUpsertWithoutStudentsInput(
          update: Input$ClassroomUncheckedUpdateWithoutStudentsInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$ClassroomUncheckedCreateWithoutStudentsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ClassroomUpsertWithoutStudentsInputToJson(
        Input$ClassroomUpsertWithoutStudentsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$ClassroomUpsertWithWhereUniqueWithoutSchoolInput
    _$Input$ClassroomUpsertWithWhereUniqueWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUpsertWithWhereUniqueWithoutSchoolInput(
          where: Input$ClassroomWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: Input$ClassroomUncheckedUpdateWithoutSchoolInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$ClassroomUncheckedCreateWithoutSchoolInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ClassroomUpsertWithWhereUniqueWithoutSchoolInputToJson(
            Input$ClassroomUpsertWithWhereUniqueWithoutSchoolInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

Input$ClassroomUpsertWithWhereUniqueWithoutUserInput
    _$Input$ClassroomUpsertWithWhereUniqueWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ClassroomUpsertWithWhereUniqueWithoutUserInput(
          where: Input$ClassroomWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: Input$ClassroomUncheckedUpdateWithoutUserInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$ClassroomUncheckedCreateWithoutUserInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ClassroomUpsertWithWhereUniqueWithoutUserInputToJson(
            Input$ClassroomUpsertWithWhereUniqueWithoutUserInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

Input$ClassroomWhereInput _$Input$ClassroomWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$ClassroomWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ClassroomWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ClassroomWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ClassroomWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      schoolId: json['schoolId'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['schoolId'] as Map<String, dynamic>),
      school: json['school'] == null
          ? null
          : Input$SchoolWhereInput.fromJson(
              json['school'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : Input$StringFilter.fromJson(json['userId'] as Map<String, dynamic>),
      user: json['user'] == null
          ? null
          : Input$UserWhereInput.fromJson(json['user'] as Map<String, dynamic>),
      students: json['students'] == null
          ? null
          : Input$ClassroomStudentListRelationFilter.fromJson(
              json['students'] as Map<String, dynamic>),
      level: json['level'] == null
          ? null
          : Input$IntFilter.fromJson(json['level'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ClassroomWhereInputToJson(
        Input$ClassroomWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
      'school': instance.school?.toJson(),
      'userId': instance.userId?.toJson(),
      'user': instance.user?.toJson(),
      'students': instance.students?.toJson(),
      'level': instance.level?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ClassroomWhereUniqueInput _$Input$ClassroomWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    Input$ClassroomWhereUniqueInput(
      id: json['id'] as String?,
    );

Map<String, dynamic> _$Input$ClassroomWhereUniqueInputToJson(
        Input$ClassroomWhereUniqueInput instance) =>
    <String, dynamic>{
      'id': instance.id,
    };

Input$DateTimeFieldUpdateOperationsInput
    _$Input$DateTimeFieldUpdateOperationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$DateTimeFieldUpdateOperationsInput(
          $set: json['set'] as String?,
        );

Map<String, dynamic> _$Input$DateTimeFieldUpdateOperationsInputToJson(
        Input$DateTimeFieldUpdateOperationsInput instance) =>
    <String, dynamic>{
      'set': instance.$set,
    };

Input$DateTimeFilter _$Input$DateTimeFilterFromJson(
        Map<String, dynamic> json) =>
    Input$DateTimeFilter(
      equals: json['equals'] as String?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as String?).toList(),
      notIn:
          (json['notIn'] as List<dynamic>?)?.map((e) => e as String?).toList(),
      lt: json['lt'] as String?,
      lte: json['lte'] as String?,
      gt: json['gt'] as String?,
      gte: json['gte'] as String?,
      not: json['not'] == null
          ? null
          : Input$NestedDateTimeFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$DateTimeFilterToJson(
        Input$DateTimeFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'not': instance.not?.toJson(),
    };

Input$DateTimeNullableFilter _$Input$DateTimeNullableFilterFromJson(
        Map<String, dynamic> json) =>
    Input$DateTimeNullableFilter(
      equals: json['equals'] as String?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as String?).toList(),
      notIn:
          (json['notIn'] as List<dynamic>?)?.map((e) => e as String?).toList(),
      lt: json['lt'] as String?,
      lte: json['lte'] as String?,
      gt: json['gt'] as String?,
      gte: json['gte'] as String?,
      not: json['not'] == null
          ? null
          : Input$NestedDateTimeNullableFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$DateTimeNullableFilterToJson(
        Input$DateTimeNullableFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'not': instance.not?.toJson(),
    };

Input$DateTimeNullableWithAggregatesFilter
    _$Input$DateTimeNullableWithAggregatesFilterFromJson(
            Map<String, dynamic> json) =>
        Input$DateTimeNullableWithAggregatesFilter(
          equals: json['equals'] as String?,
          $in:
              (json['in'] as List<dynamic>?)?.map((e) => e as String?).toList(),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          lt: json['lt'] as String?,
          lte: json['lte'] as String?,
          gt: json['gt'] as String?,
          gte: json['gte'] as String?,
          not: json['not'] == null
              ? null
              : Input$NestedDateTimeNullableWithAggregatesFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
          $_count: json['_count'] == null
              ? null
              : Input$NestedIntNullableFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$NestedDateTimeNullableFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$NestedDateTimeNullableFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$DateTimeNullableWithAggregatesFilterToJson(
        Input$DateTimeNullableWithAggregatesFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'not': instance.not?.toJson(),
      '_count': instance.$_count?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_max': instance.$_max?.toJson(),
    };

Input$DateTimeWithAggregatesFilter _$Input$DateTimeWithAggregatesFilterFromJson(
        Map<String, dynamic> json) =>
    Input$DateTimeWithAggregatesFilter(
      equals: json['equals'] as String?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as String?).toList(),
      notIn:
          (json['notIn'] as List<dynamic>?)?.map((e) => e as String?).toList(),
      lt: json['lt'] as String?,
      lte: json['lte'] as String?,
      gt: json['gt'] as String?,
      gte: json['gte'] as String?,
      not: json['not'] == null
          ? null
          : Input$NestedDateTimeWithAggregatesFilter.fromJson(
              json['not'] as Map<String, dynamic>),
      $_count: json['_count'] == null
          ? null
          : Input$NestedIntFilter.fromJson(
              json['_count'] as Map<String, dynamic>),
      $_min: json['_min'] == null
          ? null
          : Input$NestedDateTimeFilter.fromJson(
              json['_min'] as Map<String, dynamic>),
      $_max: json['_max'] == null
          ? null
          : Input$NestedDateTimeFilter.fromJson(
              json['_max'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$DateTimeWithAggregatesFilterToJson(
        Input$DateTimeWithAggregatesFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'not': instance.not?.toJson(),
      '_count': instance.$_count?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_max': instance.$_max?.toJson(),
    };

Input$EnumClassroomStudentStatusFieldUpdateOperationsInput
    _$Input$EnumClassroomStudentStatusFieldUpdateOperationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$EnumClassroomStudentStatusFieldUpdateOperationsInput(
          $set: $enumDecodeNullable(
              _$Enum$ClassroomStudentStatusEnumMap, json['set'],
              unknownValue: Enum$ClassroomStudentStatus.$unknown),
        );

Map<String,
    dynamic> _$Input$EnumClassroomStudentStatusFieldUpdateOperationsInputToJson(
        Input$EnumClassroomStudentStatusFieldUpdateOperationsInput instance) =>
    <String, dynamic>{
      'set': _$Enum$ClassroomStudentStatusEnumMap[instance.$set],
    };

Input$EnumClassroomStudentStatusFilter
    _$Input$EnumClassroomStudentStatusFilterFromJson(
            Map<String, dynamic> json) =>
        Input$EnumClassroomStudentStatusFilter(
          equals: $enumDecodeNullable(
              _$Enum$ClassroomStudentStatusEnumMap, json['equals'],
              unknownValue: Enum$ClassroomStudentStatus.$unknown),
          $in: (json['in'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$ClassroomStudentStatusEnumMap, e,
                  unknownValue: Enum$ClassroomStudentStatus.$unknown))
              .toList(),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$ClassroomStudentStatusEnumMap, e,
                  unknownValue: Enum$ClassroomStudentStatus.$unknown))
              .toList(),
          not: json['not'] == null
              ? null
              : Input$NestedEnumClassroomStudentStatusFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$EnumClassroomStudentStatusFilterToJson(
        Input$EnumClassroomStudentStatusFilter instance) =>
    <String, dynamic>{
      'equals': _$Enum$ClassroomStudentStatusEnumMap[instance.equals],
      'in': instance.$in
          ?.map((e) => _$Enum$ClassroomStudentStatusEnumMap[e])
          .toList(),
      'notIn': instance.notIn
          ?.map((e) => _$Enum$ClassroomStudentStatusEnumMap[e])
          .toList(),
      'not': instance.not?.toJson(),
    };

Input$EnumClassroomStudentStatusWithAggregatesFilter
    _$Input$EnumClassroomStudentStatusWithAggregatesFilterFromJson(
            Map<String, dynamic> json) =>
        Input$EnumClassroomStudentStatusWithAggregatesFilter(
          equals: $enumDecodeNullable(
              _$Enum$ClassroomStudentStatusEnumMap, json['equals'],
              unknownValue: Enum$ClassroomStudentStatus.$unknown),
          $in: (json['in'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$ClassroomStudentStatusEnumMap, e,
                  unknownValue: Enum$ClassroomStudentStatus.$unknown))
              .toList(),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$ClassroomStudentStatusEnumMap, e,
                  unknownValue: Enum$ClassroomStudentStatus.$unknown))
              .toList(),
          not: json['not'] == null
              ? null
              : Input$NestedEnumClassroomStudentStatusWithAggregatesFilter
                  .fromJson(json['not'] as Map<String, dynamic>),
          $_count: json['_count'] == null
              ? null
              : Input$NestedIntFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$NestedEnumClassroomStudentStatusFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$NestedEnumClassroomStudentStatusFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$EnumClassroomStudentStatusWithAggregatesFilterToJson(
            Input$EnumClassroomStudentStatusWithAggregatesFilter instance) =>
        <String, dynamic>{
          'equals': _$Enum$ClassroomStudentStatusEnumMap[instance.equals],
          'in': instance.$in
              ?.map((e) => _$Enum$ClassroomStudentStatusEnumMap[e])
              .toList(),
          'notIn': instance.notIn
              ?.map((e) => _$Enum$ClassroomStudentStatusEnumMap[e])
              .toList(),
          'not': instance.not?.toJson(),
          '_count': instance.$_count?.toJson(),
          '_min': instance.$_min?.toJson(),
          '_max': instance.$_max?.toJson(),
        };

Input$EnumContentTypeFieldUpdateOperationsInput
    _$Input$EnumContentTypeFieldUpdateOperationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$EnumContentTypeFieldUpdateOperationsInput(
          $set: $enumDecodeNullable(_$Enum$ContentTypeEnumMap, json['set'],
              unknownValue: Enum$ContentType.$unknown),
        );

Map<String, dynamic> _$Input$EnumContentTypeFieldUpdateOperationsInputToJson(
        Input$EnumContentTypeFieldUpdateOperationsInput instance) =>
    <String, dynamic>{
      'set': _$Enum$ContentTypeEnumMap[instance.$set],
    };

Input$EnumContentTypeFilter _$Input$EnumContentTypeFilterFromJson(
        Map<String, dynamic> json) =>
    Input$EnumContentTypeFilter(
      equals: $enumDecodeNullable(_$Enum$ContentTypeEnumMap, json['equals'],
          unknownValue: Enum$ContentType.$unknown),
      $in: (json['in'] as List<dynamic>?)
          ?.map((e) => $enumDecodeNullable(_$Enum$ContentTypeEnumMap, e,
              unknownValue: Enum$ContentType.$unknown))
          .toList(),
      notIn: (json['notIn'] as List<dynamic>?)
          ?.map((e) => $enumDecodeNullable(_$Enum$ContentTypeEnumMap, e,
              unknownValue: Enum$ContentType.$unknown))
          .toList(),
      not: json['not'] == null
          ? null
          : Input$NestedEnumContentTypeFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$EnumContentTypeFilterToJson(
        Input$EnumContentTypeFilter instance) =>
    <String, dynamic>{
      'equals': _$Enum$ContentTypeEnumMap[instance.equals],
      'in': instance.$in?.map((e) => _$Enum$ContentTypeEnumMap[e]).toList(),
      'notIn':
          instance.notIn?.map((e) => _$Enum$ContentTypeEnumMap[e]).toList(),
      'not': instance.not?.toJson(),
    };

Input$EnumContentTypeWithAggregatesFilter
    _$Input$EnumContentTypeWithAggregatesFilterFromJson(
            Map<String, dynamic> json) =>
        Input$EnumContentTypeWithAggregatesFilter(
          equals: $enumDecodeNullable(_$Enum$ContentTypeEnumMap, json['equals'],
              unknownValue: Enum$ContentType.$unknown),
          $in: (json['in'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(_$Enum$ContentTypeEnumMap, e,
                  unknownValue: Enum$ContentType.$unknown))
              .toList(),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(_$Enum$ContentTypeEnumMap, e,
                  unknownValue: Enum$ContentType.$unknown))
              .toList(),
          not: json['not'] == null
              ? null
              : Input$NestedEnumContentTypeWithAggregatesFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
          $_count: json['_count'] == null
              ? null
              : Input$NestedIntFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$NestedEnumContentTypeFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$NestedEnumContentTypeFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$EnumContentTypeWithAggregatesFilterToJson(
        Input$EnumContentTypeWithAggregatesFilter instance) =>
    <String, dynamic>{
      'equals': _$Enum$ContentTypeEnumMap[instance.equals],
      'in': instance.$in?.map((e) => _$Enum$ContentTypeEnumMap[e]).toList(),
      'notIn':
          instance.notIn?.map((e) => _$Enum$ContentTypeEnumMap[e]).toList(),
      'not': instance.not?.toJson(),
      '_count': instance.$_count?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_max': instance.$_max?.toJson(),
    };

Input$EnumIdentityFileTypeFieldUpdateOperationsInput
    _$Input$EnumIdentityFileTypeFieldUpdateOperationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$EnumIdentityFileTypeFieldUpdateOperationsInput(
          $set: $enumDecodeNullable(_$Enum$IdentityFileTypeEnumMap, json['set'],
              unknownValue: Enum$IdentityFileType.$unknown),
        );

Map<String, dynamic>
    _$Input$EnumIdentityFileTypeFieldUpdateOperationsInputToJson(
            Input$EnumIdentityFileTypeFieldUpdateOperationsInput instance) =>
        <String, dynamic>{
          'set': _$Enum$IdentityFileTypeEnumMap[instance.$set],
        };

const _$Enum$IdentityFileTypeEnumMap = {
  Enum$IdentityFileType.KTP: 'KTP',
  Enum$IdentityFileType.KK: 'KK',
  Enum$IdentityFileType.SIM: 'SIM',
  Enum$IdentityFileType.PASSPORT: 'PASSPORT',
  Enum$IdentityFileType.OTHER: 'OTHER',
  Enum$IdentityFileType.$unknown: r'$unknown',
};

Input$EnumIdentityFileTypeFilter _$Input$EnumIdentityFileTypeFilterFromJson(
        Map<String, dynamic> json) =>
    Input$EnumIdentityFileTypeFilter(
      equals: $enumDecodeNullable(
          _$Enum$IdentityFileTypeEnumMap, json['equals'],
          unknownValue: Enum$IdentityFileType.$unknown),
      $in: (json['in'] as List<dynamic>?)
          ?.map((e) => $enumDecodeNullable(_$Enum$IdentityFileTypeEnumMap, e,
              unknownValue: Enum$IdentityFileType.$unknown))
          .toList(),
      notIn: (json['notIn'] as List<dynamic>?)
          ?.map((e) => $enumDecodeNullable(_$Enum$IdentityFileTypeEnumMap, e,
              unknownValue: Enum$IdentityFileType.$unknown))
          .toList(),
      not: json['not'] == null
          ? null
          : Input$NestedEnumIdentityFileTypeFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$EnumIdentityFileTypeFilterToJson(
        Input$EnumIdentityFileTypeFilter instance) =>
    <String, dynamic>{
      'equals': _$Enum$IdentityFileTypeEnumMap[instance.equals],
      'in':
          instance.$in?.map((e) => _$Enum$IdentityFileTypeEnumMap[e]).toList(),
      'notIn': instance.notIn
          ?.map((e) => _$Enum$IdentityFileTypeEnumMap[e])
          .toList(),
      'not': instance.not?.toJson(),
    };

Input$EnumIdentityFileTypeWithAggregatesFilter
    _$Input$EnumIdentityFileTypeWithAggregatesFilterFromJson(
            Map<String, dynamic> json) =>
        Input$EnumIdentityFileTypeWithAggregatesFilter(
          equals: $enumDecodeNullable(
              _$Enum$IdentityFileTypeEnumMap, json['equals'],
              unknownValue: Enum$IdentityFileType.$unknown),
          $in: (json['in'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$IdentityFileTypeEnumMap, e,
                  unknownValue: Enum$IdentityFileType.$unknown))
              .toList(),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$IdentityFileTypeEnumMap, e,
                  unknownValue: Enum$IdentityFileType.$unknown))
              .toList(),
          not: json['not'] == null
              ? null
              : Input$NestedEnumIdentityFileTypeWithAggregatesFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
          $_count: json['_count'] == null
              ? null
              : Input$NestedIntFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$NestedEnumIdentityFileTypeFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$NestedEnumIdentityFileTypeFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$EnumIdentityFileTypeWithAggregatesFilterToJson(
        Input$EnumIdentityFileTypeWithAggregatesFilter instance) =>
    <String, dynamic>{
      'equals': _$Enum$IdentityFileTypeEnumMap[instance.equals],
      'in':
          instance.$in?.map((e) => _$Enum$IdentityFileTypeEnumMap[e]).toList(),
      'notIn': instance.notIn
          ?.map((e) => _$Enum$IdentityFileTypeEnumMap[e])
          .toList(),
      'not': instance.not?.toJson(),
      '_count': instance.$_count?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_max': instance.$_max?.toJson(),
    };

Input$EnumQuestionTypeFieldUpdateOperationsInput
    _$Input$EnumQuestionTypeFieldUpdateOperationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$EnumQuestionTypeFieldUpdateOperationsInput(
          $set: $enumDecodeNullable(_$Enum$QuestionTypeEnumMap, json['set'],
              unknownValue: Enum$QuestionType.$unknown),
        );

Map<String, dynamic> _$Input$EnumQuestionTypeFieldUpdateOperationsInputToJson(
        Input$EnumQuestionTypeFieldUpdateOperationsInput instance) =>
    <String, dynamic>{
      'set': _$Enum$QuestionTypeEnumMap[instance.$set],
    };

const _$Enum$QuestionTypeEnumMap = {
  Enum$QuestionType.MULTIPLE_CHOICE: 'MULTIPLE_CHOICE',
  Enum$QuestionType.TRUE_OR_FALSE: 'TRUE_OR_FALSE',
  Enum$QuestionType.FILL_IN_THE_BLANK: 'FILL_IN_THE_BLANK',
  Enum$QuestionType.MULTIPLE_ANSWER: 'MULTIPLE_ANSWER',
  Enum$QuestionType.$unknown: r'$unknown',
};

Input$EnumQuestionTypeFilter _$Input$EnumQuestionTypeFilterFromJson(
        Map<String, dynamic> json) =>
    Input$EnumQuestionTypeFilter(
      equals: $enumDecodeNullable(_$Enum$QuestionTypeEnumMap, json['equals'],
          unknownValue: Enum$QuestionType.$unknown),
      $in: (json['in'] as List<dynamic>?)
          ?.map((e) => $enumDecodeNullable(_$Enum$QuestionTypeEnumMap, e,
              unknownValue: Enum$QuestionType.$unknown))
          .toList(),
      notIn: (json['notIn'] as List<dynamic>?)
          ?.map((e) => $enumDecodeNullable(_$Enum$QuestionTypeEnumMap, e,
              unknownValue: Enum$QuestionType.$unknown))
          .toList(),
      not: json['not'] == null
          ? null
          : Input$NestedEnumQuestionTypeFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$EnumQuestionTypeFilterToJson(
        Input$EnumQuestionTypeFilter instance) =>
    <String, dynamic>{
      'equals': _$Enum$QuestionTypeEnumMap[instance.equals],
      'in': instance.$in?.map((e) => _$Enum$QuestionTypeEnumMap[e]).toList(),
      'notIn':
          instance.notIn?.map((e) => _$Enum$QuestionTypeEnumMap[e]).toList(),
      'not': instance.not?.toJson(),
    };

Input$EnumQuestionTypeWithAggregatesFilter
    _$Input$EnumQuestionTypeWithAggregatesFilterFromJson(
            Map<String, dynamic> json) =>
        Input$EnumQuestionTypeWithAggregatesFilter(
          equals: $enumDecodeNullable(
              _$Enum$QuestionTypeEnumMap, json['equals'],
              unknownValue: Enum$QuestionType.$unknown),
          $in: (json['in'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(_$Enum$QuestionTypeEnumMap, e,
                  unknownValue: Enum$QuestionType.$unknown))
              .toList(),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(_$Enum$QuestionTypeEnumMap, e,
                  unknownValue: Enum$QuestionType.$unknown))
              .toList(),
          not: json['not'] == null
              ? null
              : Input$NestedEnumQuestionTypeWithAggregatesFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
          $_count: json['_count'] == null
              ? null
              : Input$NestedIntFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$NestedEnumQuestionTypeFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$NestedEnumQuestionTypeFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$EnumQuestionTypeWithAggregatesFilterToJson(
        Input$EnumQuestionTypeWithAggregatesFilter instance) =>
    <String, dynamic>{
      'equals': _$Enum$QuestionTypeEnumMap[instance.equals],
      'in': instance.$in?.map((e) => _$Enum$QuestionTypeEnumMap[e]).toList(),
      'notIn':
          instance.notIn?.map((e) => _$Enum$QuestionTypeEnumMap[e]).toList(),
      'not': instance.not?.toJson(),
      '_count': instance.$_count?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_max': instance.$_max?.toJson(),
    };

Input$EnumRolesFieldUpdateOperationsInput
    _$Input$EnumRolesFieldUpdateOperationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$EnumRolesFieldUpdateOperationsInput(
          $set: $enumDecodeNullable(_$Enum$RolesEnumMap, json['set'],
              unknownValue: Enum$Roles.$unknown),
        );

Map<String, dynamic> _$Input$EnumRolesFieldUpdateOperationsInputToJson(
        Input$EnumRolesFieldUpdateOperationsInput instance) =>
    <String, dynamic>{
      'set': _$Enum$RolesEnumMap[instance.$set],
    };

const _$Enum$RolesEnumMap = {
  Enum$Roles.STUDENT: 'STUDENT',
  Enum$Roles.TEACHER: 'TEACHER',
  Enum$Roles.PARENT: 'PARENT',
  Enum$Roles.$unknown: r'$unknown',
};

Input$EnumRolesFilter _$Input$EnumRolesFilterFromJson(
        Map<String, dynamic> json) =>
    Input$EnumRolesFilter(
      equals: $enumDecodeNullable(_$Enum$RolesEnumMap, json['equals'],
          unknownValue: Enum$Roles.$unknown),
      $in: (json['in'] as List<dynamic>?)
          ?.map((e) => $enumDecodeNullable(_$Enum$RolesEnumMap, e,
              unknownValue: Enum$Roles.$unknown))
          .toList(),
      notIn: (json['notIn'] as List<dynamic>?)
          ?.map((e) => $enumDecodeNullable(_$Enum$RolesEnumMap, e,
              unknownValue: Enum$Roles.$unknown))
          .toList(),
      not: json['not'] == null
          ? null
          : Input$NestedEnumRolesFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$EnumRolesFilterToJson(
        Input$EnumRolesFilter instance) =>
    <String, dynamic>{
      'equals': _$Enum$RolesEnumMap[instance.equals],
      'in': instance.$in?.map((e) => _$Enum$RolesEnumMap[e]).toList(),
      'notIn': instance.notIn?.map((e) => _$Enum$RolesEnumMap[e]).toList(),
      'not': instance.not?.toJson(),
    };

Input$EnumRolesWithAggregatesFilter
    _$Input$EnumRolesWithAggregatesFilterFromJson(Map<String, dynamic> json) =>
        Input$EnumRolesWithAggregatesFilter(
          equals: $enumDecodeNullable(_$Enum$RolesEnumMap, json['equals'],
              unknownValue: Enum$Roles.$unknown),
          $in: (json['in'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(_$Enum$RolesEnumMap, e,
                  unknownValue: Enum$Roles.$unknown))
              .toList(),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(_$Enum$RolesEnumMap, e,
                  unknownValue: Enum$Roles.$unknown))
              .toList(),
          not: json['not'] == null
              ? null
              : Input$NestedEnumRolesWithAggregatesFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
          $_count: json['_count'] == null
              ? null
              : Input$NestedIntFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$NestedEnumRolesFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$NestedEnumRolesFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$EnumRolesWithAggregatesFilterToJson(
        Input$EnumRolesWithAggregatesFilter instance) =>
    <String, dynamic>{
      'equals': _$Enum$RolesEnumMap[instance.equals],
      'in': instance.$in?.map((e) => _$Enum$RolesEnumMap[e]).toList(),
      'notIn': instance.notIn?.map((e) => _$Enum$RolesEnumMap[e]).toList(),
      'not': instance.not?.toJson(),
      '_count': instance.$_count?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_max': instance.$_max?.toJson(),
    };

Input$EnumSchoolStaffRolesNullableListFilter
    _$Input$EnumSchoolStaffRolesNullableListFilterFromJson(
            Map<String, dynamic> json) =>
        Input$EnumSchoolStaffRolesNullableListFilter(
          equals: (json['equals'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$SchoolStaffRolesEnumMap, e,
                  unknownValue: Enum$SchoolStaffRoles.$unknown))
              .toList(),
          has: $enumDecodeNullable(_$Enum$SchoolStaffRolesEnumMap, json['has'],
              unknownValue: Enum$SchoolStaffRoles.$unknown),
          hasEvery: (json['hasEvery'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$SchoolStaffRolesEnumMap, e,
                  unknownValue: Enum$SchoolStaffRoles.$unknown))
              .toList(),
          hasSome: (json['hasSome'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$SchoolStaffRolesEnumMap, e,
                  unknownValue: Enum$SchoolStaffRoles.$unknown))
              .toList(),
          isEmpty: json['isEmpty'] as bool?,
        );

Map<String, dynamic> _$Input$EnumSchoolStaffRolesNullableListFilterToJson(
        Input$EnumSchoolStaffRolesNullableListFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals
          ?.map((e) => _$Enum$SchoolStaffRolesEnumMap[e])
          .toList(),
      'has': _$Enum$SchoolStaffRolesEnumMap[instance.has],
      'hasEvery': instance.hasEvery
          ?.map((e) => _$Enum$SchoolStaffRolesEnumMap[e])
          .toList(),
      'hasSome': instance.hasSome
          ?.map((e) => _$Enum$SchoolStaffRolesEnumMap[e])
          .toList(),
      'isEmpty': instance.isEmpty,
    };

const _$Enum$SchoolStaffRolesEnumMap = {
  Enum$SchoolStaffRoles.TEACHER: 'TEACHER',
  Enum$SchoolStaffRoles.HEADMASTER: 'HEADMASTER',
  Enum$SchoolStaffRoles.$unknown: r'$unknown',
};

Input$EnumVerifyTypeNullableFilter _$Input$EnumVerifyTypeNullableFilterFromJson(
        Map<String, dynamic> json) =>
    Input$EnumVerifyTypeNullableFilter(
      equals: $enumDecodeNullable(_$Enum$VerifyTypeEnumMap, json['equals'],
          unknownValue: Enum$VerifyType.$unknown),
      $in: (json['in'] as List<dynamic>?)
          ?.map((e) => $enumDecodeNullable(_$Enum$VerifyTypeEnumMap, e,
              unknownValue: Enum$VerifyType.$unknown))
          .toList(),
      notIn: (json['notIn'] as List<dynamic>?)
          ?.map((e) => $enumDecodeNullable(_$Enum$VerifyTypeEnumMap, e,
              unknownValue: Enum$VerifyType.$unknown))
          .toList(),
      not: json['not'] == null
          ? null
          : Input$NestedEnumVerifyTypeNullableFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$EnumVerifyTypeNullableFilterToJson(
        Input$EnumVerifyTypeNullableFilter instance) =>
    <String, dynamic>{
      'equals': _$Enum$VerifyTypeEnumMap[instance.equals],
      'in': instance.$in?.map((e) => _$Enum$VerifyTypeEnumMap[e]).toList(),
      'notIn': instance.notIn?.map((e) => _$Enum$VerifyTypeEnumMap[e]).toList(),
      'not': instance.not?.toJson(),
    };

const _$Enum$VerifyTypeEnumMap = {
  Enum$VerifyType.EMAIL: 'EMAIL',
  Enum$VerifyType.PHONE: 'PHONE',
  Enum$VerifyType.OTP: 'OTP',
  Enum$VerifyType.IDENTITY: 'IDENTITY',
  Enum$VerifyType.$unknown: r'$unknown',
};

Input$EnumVerifyTypeNullableWithAggregatesFilter
    _$Input$EnumVerifyTypeNullableWithAggregatesFilterFromJson(
            Map<String, dynamic> json) =>
        Input$EnumVerifyTypeNullableWithAggregatesFilter(
          equals: $enumDecodeNullable(_$Enum$VerifyTypeEnumMap, json['equals'],
              unknownValue: Enum$VerifyType.$unknown),
          $in: (json['in'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(_$Enum$VerifyTypeEnumMap, e,
                  unknownValue: Enum$VerifyType.$unknown))
              .toList(),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(_$Enum$VerifyTypeEnumMap, e,
                  unknownValue: Enum$VerifyType.$unknown))
              .toList(),
          not: json['not'] == null
              ? null
              : Input$NestedEnumVerifyTypeNullableWithAggregatesFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
          $_count: json['_count'] == null
              ? null
              : Input$NestedIntNullableFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$NestedEnumVerifyTypeNullableFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$NestedEnumVerifyTypeNullableFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$EnumVerifyTypeNullableWithAggregatesFilterToJson(
        Input$EnumVerifyTypeNullableWithAggregatesFilter instance) =>
    <String, dynamic>{
      'equals': _$Enum$VerifyTypeEnumMap[instance.equals],
      'in': instance.$in?.map((e) => _$Enum$VerifyTypeEnumMap[e]).toList(),
      'notIn': instance.notIn?.map((e) => _$Enum$VerifyTypeEnumMap[e]).toList(),
      'not': instance.not?.toJson(),
      '_count': instance.$_count?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_max': instance.$_max?.toJson(),
    };

Input$ExamAnswerAvgOrderByAggregateInput
    _$Input$ExamAnswerAvgOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerAvgOrderByAggregateInput(
          grade: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['grade'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ExamAnswerAvgOrderByAggregateInputToJson(
        Input$ExamAnswerAvgOrderByAggregateInput instance) =>
    <String, dynamic>{
      'grade': _$Enum$SortOrderEnumMap[instance.grade],
    };

Input$ExamAnswerCountOrderByAggregateInput
    _$Input$ExamAnswerCountOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerCountOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          examId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['examId'],
              unknownValue: Enum$SortOrder.$unknown),
          grade: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['grade'],
              unknownValue: Enum$SortOrder.$unknown),
          finishCalculation: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['finishCalculation'],
              unknownValue: Enum$SortOrder.$unknown),
          examSessionId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['examSessionId'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ExamAnswerCountOrderByAggregateInputToJson(
        Input$ExamAnswerCountOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'examId': _$Enum$SortOrderEnumMap[instance.examId],
      'grade': _$Enum$SortOrderEnumMap[instance.grade],
      'finishCalculation': _$Enum$SortOrderEnumMap[instance.finishCalculation],
      'examSessionId': _$Enum$SortOrderEnumMap[instance.examSessionId],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$ExamAnswerCreateInput _$Input$ExamAnswerCreateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamAnswerCreateInput(
      id: json['id'] as String?,
      exam: Input$ExamCreateNestedOneWithoutExamAnswersInput.fromJson(
          json['exam'] as Map<String, dynamic>),
      grade: (json['grade'] as num?)?.toDouble(),
      finishCalculation: json['finishCalculation'] as bool?,
      examSession: json['examSession'] == null
          ? null
          : Input$ExamSessionCreateNestedOneWithoutExamAnswersInput.fromJson(
              json['examSession'] as Map<String, dynamic>),
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
    );

Map<String, dynamic> _$Input$ExamAnswerCreateInputToJson(
        Input$ExamAnswerCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'exam': instance.exam.toJson(),
      'grade': instance.grade,
      'finishCalculation': instance.finishCalculation,
      'examSession': instance.examSession?.toJson(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ExamAnswerCreateManyExamInput
    _$Input$ExamAnswerCreateManyExamInputFromJson(Map<String, dynamic> json) =>
        Input$ExamAnswerCreateManyExamInput(
          id: json['id'] as String?,
          grade: (json['grade'] as num?)?.toDouble(),
          finishCalculation: json['finishCalculation'] as bool?,
          examSessionId: json['examSessionId'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ExamAnswerCreateManyExamInputToJson(
        Input$ExamAnswerCreateManyExamInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'grade': instance.grade,
      'finishCalculation': instance.finishCalculation,
      'examSessionId': instance.examSessionId,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ExamAnswerCreateManyExamInputEnvelope
    _$Input$ExamAnswerCreateManyExamInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerCreateManyExamInputEnvelope(
          data: Input$ExamAnswerCreateManyExamInput.fromJson(
              json['data'] as Map<String, dynamic>),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$Input$ExamAnswerCreateManyExamInputEnvelopeToJson(
        Input$ExamAnswerCreateManyExamInputEnvelope instance) =>
    <String, dynamic>{
      'data': instance.data.toJson(),
      'skipDuplicates': instance.skipDuplicates,
    };

Input$ExamAnswerCreateManyExamSessionInput
    _$Input$ExamAnswerCreateManyExamSessionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerCreateManyExamSessionInput(
          id: json['id'] as String?,
          examId: json['examId'] as String,
          grade: (json['grade'] as num?)?.toDouble(),
          finishCalculation: json['finishCalculation'] as bool?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ExamAnswerCreateManyExamSessionInputToJson(
        Input$ExamAnswerCreateManyExamSessionInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'examId': instance.examId,
      'grade': instance.grade,
      'finishCalculation': instance.finishCalculation,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ExamAnswerCreateManyExamSessionInputEnvelope
    _$Input$ExamAnswerCreateManyExamSessionInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerCreateManyExamSessionInputEnvelope(
          data: Input$ExamAnswerCreateManyExamSessionInput.fromJson(
              json['data'] as Map<String, dynamic>),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$Input$ExamAnswerCreateManyExamSessionInputEnvelopeToJson(
        Input$ExamAnswerCreateManyExamSessionInputEnvelope instance) =>
    <String, dynamic>{
      'data': instance.data.toJson(),
      'skipDuplicates': instance.skipDuplicates,
    };

Input$ExamAnswerCreateManyInput _$Input$ExamAnswerCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamAnswerCreateManyInput(
      id: json['id'] as String?,
      examId: json['examId'] as String,
      grade: (json['grade'] as num?)?.toDouble(),
      finishCalculation: json['finishCalculation'] as bool?,
      examSessionId: json['examSessionId'] as String?,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
    );

Map<String, dynamic> _$Input$ExamAnswerCreateManyInputToJson(
        Input$ExamAnswerCreateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'examId': instance.examId,
      'grade': instance.grade,
      'finishCalculation': instance.finishCalculation,
      'examSessionId': instance.examSessionId,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ExamAnswerCreateNestedManyWithoutExamInput
    _$Input$ExamAnswerCreateNestedManyWithoutExamInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerCreateNestedManyWithoutExamInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerCreateWithoutExamInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerCreateOrConnectWithoutExamInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ExamAnswerCreateManyExamInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$ExamAnswerCreateNestedManyWithoutExamInputToJson(
        Input$ExamAnswerCreateNestedManyWithoutExamInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$ExamAnswerCreateNestedManyWithoutExamSessionInput
    _$Input$ExamAnswerCreateNestedManyWithoutExamSessionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerCreateNestedManyWithoutExamSessionInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerCreateWithoutExamSessionInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerCreateOrConnectWithoutExamSessionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ExamAnswerCreateManyExamSessionInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$ExamAnswerCreateNestedManyWithoutExamSessionInputToJson(
            Input$ExamAnswerCreateNestedManyWithoutExamSessionInput instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
        };

Input$ExamAnswerCreateOrConnectWithoutExamInput
    _$Input$ExamAnswerCreateOrConnectWithoutExamInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerCreateOrConnectWithoutExamInput(
          where: Input$ExamAnswerWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$ExamAnswerUncheckedCreateWithoutExamInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamAnswerCreateOrConnectWithoutExamInputToJson(
        Input$ExamAnswerCreateOrConnectWithoutExamInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$ExamAnswerCreateOrConnectWithoutExamSessionInput
    _$Input$ExamAnswerCreateOrConnectWithoutExamSessionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerCreateOrConnectWithoutExamSessionInput(
          where: Input$ExamAnswerWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create:
              Input$ExamAnswerUncheckedCreateWithoutExamSessionInput.fromJson(
                  json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ExamAnswerCreateOrConnectWithoutExamSessionInputToJson(
            Input$ExamAnswerCreateOrConnectWithoutExamSessionInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'create': instance.create.toJson(),
        };

Input$ExamAnswerCreateWithoutExamInput
    _$Input$ExamAnswerCreateWithoutExamInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerCreateWithoutExamInput(
          id: json['id'] as String?,
          grade: (json['grade'] as num?)?.toDouble(),
          finishCalculation: json['finishCalculation'] as bool?,
          examSession: json['examSession'] == null
              ? null
              : Input$ExamSessionCreateNestedOneWithoutExamAnswersInput
                  .fromJson(json['examSession'] as Map<String, dynamic>),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ExamAnswerCreateWithoutExamInputToJson(
        Input$ExamAnswerCreateWithoutExamInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'grade': instance.grade,
      'finishCalculation': instance.finishCalculation,
      'examSession': instance.examSession?.toJson(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ExamAnswerCreateWithoutExamSessionInput
    _$Input$ExamAnswerCreateWithoutExamSessionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerCreateWithoutExamSessionInput(
          id: json['id'] as String?,
          exam: Input$ExamCreateNestedOneWithoutExamAnswersInput.fromJson(
              json['exam'] as Map<String, dynamic>),
          grade: (json['grade'] as num?)?.toDouble(),
          finishCalculation: json['finishCalculation'] as bool?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ExamAnswerCreateWithoutExamSessionInputToJson(
        Input$ExamAnswerCreateWithoutExamSessionInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'exam': instance.exam.toJson(),
      'grade': instance.grade,
      'finishCalculation': instance.finishCalculation,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ExamAnswerListRelationFilter _$Input$ExamAnswerListRelationFilterFromJson(
        Map<String, dynamic> json) =>
    Input$ExamAnswerListRelationFilter(
      every: json['every'] == null
          ? null
          : Input$ExamAnswerWhereInput.fromJson(
              json['every'] as Map<String, dynamic>),
      some: json['some'] == null
          ? null
          : Input$ExamAnswerWhereInput.fromJson(
              json['some'] as Map<String, dynamic>),
      none: json['none'] == null
          ? null
          : Input$ExamAnswerWhereInput.fromJson(
              json['none'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ExamAnswerListRelationFilterToJson(
        Input$ExamAnswerListRelationFilter instance) =>
    <String, dynamic>{
      'every': instance.every?.toJson(),
      'some': instance.some?.toJson(),
      'none': instance.none?.toJson(),
    };

Input$ExamAnswerMaxOrderByAggregateInput
    _$Input$ExamAnswerMaxOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerMaxOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          examId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['examId'],
              unknownValue: Enum$SortOrder.$unknown),
          grade: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['grade'],
              unknownValue: Enum$SortOrder.$unknown),
          finishCalculation: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['finishCalculation'],
              unknownValue: Enum$SortOrder.$unknown),
          examSessionId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['examSessionId'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ExamAnswerMaxOrderByAggregateInputToJson(
        Input$ExamAnswerMaxOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'examId': _$Enum$SortOrderEnumMap[instance.examId],
      'grade': _$Enum$SortOrderEnumMap[instance.grade],
      'finishCalculation': _$Enum$SortOrderEnumMap[instance.finishCalculation],
      'examSessionId': _$Enum$SortOrderEnumMap[instance.examSessionId],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$ExamAnswerMinOrderByAggregateInput
    _$Input$ExamAnswerMinOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerMinOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          examId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['examId'],
              unknownValue: Enum$SortOrder.$unknown),
          grade: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['grade'],
              unknownValue: Enum$SortOrder.$unknown),
          finishCalculation: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['finishCalculation'],
              unknownValue: Enum$SortOrder.$unknown),
          examSessionId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['examSessionId'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ExamAnswerMinOrderByAggregateInputToJson(
        Input$ExamAnswerMinOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'examId': _$Enum$SortOrderEnumMap[instance.examId],
      'grade': _$Enum$SortOrderEnumMap[instance.grade],
      'finishCalculation': _$Enum$SortOrderEnumMap[instance.finishCalculation],
      'examSessionId': _$Enum$SortOrderEnumMap[instance.examSessionId],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$ExamAnswerOrderByRelationAggregateInput
    _$Input$ExamAnswerOrderByRelationAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerOrderByRelationAggregateInput(
          $_count: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['_count'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ExamAnswerOrderByRelationAggregateInputToJson(
        Input$ExamAnswerOrderByRelationAggregateInput instance) =>
    <String, dynamic>{
      '_count': _$Enum$SortOrderEnumMap[instance.$_count],
    };

Input$ExamAnswerOrderByWithAggregationInput
    _$Input$ExamAnswerOrderByWithAggregationInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerOrderByWithAggregationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          examId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['examId'],
              unknownValue: Enum$SortOrder.$unknown),
          grade: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['grade'],
              unknownValue: Enum$SortOrder.$unknown),
          finishCalculation: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['finishCalculation'],
              unknownValue: Enum$SortOrder.$unknown),
          examSessionId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['examSessionId'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          $_count: json['_count'] == null
              ? null
              : Input$ExamAnswerCountOrderByAggregateInput.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_avg: json['_avg'] == null
              ? null
              : Input$ExamAnswerAvgOrderByAggregateInput.fromJson(
                  json['_avg'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$ExamAnswerMaxOrderByAggregateInput.fromJson(
                  json['_max'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$ExamAnswerMinOrderByAggregateInput.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_sum: json['_sum'] == null
              ? null
              : Input$ExamAnswerSumOrderByAggregateInput.fromJson(
                  json['_sum'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamAnswerOrderByWithAggregationInputToJson(
        Input$ExamAnswerOrderByWithAggregationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'examId': _$Enum$SortOrderEnumMap[instance.examId],
      'grade': _$Enum$SortOrderEnumMap[instance.grade],
      'finishCalculation': _$Enum$SortOrderEnumMap[instance.finishCalculation],
      'examSessionId': _$Enum$SortOrderEnumMap[instance.examSessionId],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      '_count': instance.$_count?.toJson(),
      '_avg': instance.$_avg?.toJson(),
      '_max': instance.$_max?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_sum': instance.$_sum?.toJson(),
    };

Input$ExamAnswerOrderByWithRelationInput
    _$Input$ExamAnswerOrderByWithRelationInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerOrderByWithRelationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          examId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['examId'],
              unknownValue: Enum$SortOrder.$unknown),
          exam: json['exam'] == null
              ? null
              : Input$ExamOrderByWithRelationInput.fromJson(
                  json['exam'] as Map<String, dynamic>),
          grade: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['grade'],
              unknownValue: Enum$SortOrder.$unknown),
          finishCalculation: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['finishCalculation'],
              unknownValue: Enum$SortOrder.$unknown),
          examSessionId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['examSessionId'],
              unknownValue: Enum$SortOrder.$unknown),
          examSession: json['examSession'] == null
              ? null
              : Input$ExamSessionOrderByWithRelationInput.fromJson(
                  json['examSession'] as Map<String, dynamic>),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ExamAnswerOrderByWithRelationInputToJson(
        Input$ExamAnswerOrderByWithRelationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'examId': _$Enum$SortOrderEnumMap[instance.examId],
      'exam': instance.exam?.toJson(),
      'grade': _$Enum$SortOrderEnumMap[instance.grade],
      'finishCalculation': _$Enum$SortOrderEnumMap[instance.finishCalculation],
      'examSessionId': _$Enum$SortOrderEnumMap[instance.examSessionId],
      'examSession': instance.examSession?.toJson(),
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$ExamAnswerScalarWhereInput _$Input$ExamAnswerScalarWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamAnswerScalarWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ExamAnswerScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ExamAnswerScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ExamAnswerScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      examId: json['examId'] == null
          ? null
          : Input$StringFilter.fromJson(json['examId'] as Map<String, dynamic>),
      grade: json['grade'] == null
          ? null
          : Input$FloatFilter.fromJson(json['grade'] as Map<String, dynamic>),
      finishCalculation: json['finishCalculation'] == null
          ? null
          : Input$BoolFilter.fromJson(
              json['finishCalculation'] as Map<String, dynamic>),
      examSessionId: json['examSessionId'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['examSessionId'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ExamAnswerScalarWhereInputToJson(
        Input$ExamAnswerScalarWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'examId': instance.examId?.toJson(),
      'grade': instance.grade?.toJson(),
      'finishCalculation': instance.finishCalculation?.toJson(),
      'examSessionId': instance.examSessionId?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ExamAnswerScalarWhereWithAggregatesInput
    _$Input$ExamAnswerScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          OR: (json['OR'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          NOT: (json['NOT'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          id: json['id'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['id'] as Map<String, dynamic>),
          examId: json['examId'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['examId'] as Map<String, dynamic>),
          grade: json['grade'] == null
              ? null
              : Input$FloatWithAggregatesFilter.fromJson(
                  json['grade'] as Map<String, dynamic>),
          finishCalculation: json['finishCalculation'] == null
              ? null
              : Input$BoolWithAggregatesFilter.fromJson(
                  json['finishCalculation'] as Map<String, dynamic>),
          examSessionId: json['examSessionId'] == null
              ? null
              : Input$StringNullableWithAggregatesFilter.fromJson(
                  json['examSessionId'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamAnswerScalarWhereWithAggregatesInputToJson(
        Input$ExamAnswerScalarWhereWithAggregatesInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'examId': instance.examId?.toJson(),
      'grade': instance.grade?.toJson(),
      'finishCalculation': instance.finishCalculation?.toJson(),
      'examSessionId': instance.examSessionId?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ExamAnswerSumOrderByAggregateInput
    _$Input$ExamAnswerSumOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerSumOrderByAggregateInput(
          grade: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['grade'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ExamAnswerSumOrderByAggregateInputToJson(
        Input$ExamAnswerSumOrderByAggregateInput instance) =>
    <String, dynamic>{
      'grade': _$Enum$SortOrderEnumMap[instance.grade],
    };

Input$ExamAnswerUncheckedCreateInput
    _$Input$ExamAnswerUncheckedCreateInputFromJson(Map<String, dynamic> json) =>
        Input$ExamAnswerUncheckedCreateInput(
          id: json['id'] as String?,
          examId: json['examId'] as String,
          grade: (json['grade'] as num?)?.toDouble(),
          finishCalculation: json['finishCalculation'] as bool?,
          examSessionId: json['examSessionId'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ExamAnswerUncheckedCreateInputToJson(
        Input$ExamAnswerUncheckedCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'examId': instance.examId,
      'grade': instance.grade,
      'finishCalculation': instance.finishCalculation,
      'examSessionId': instance.examSessionId,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ExamAnswerUncheckedCreateNestedManyWithoutExamInput
    _$Input$ExamAnswerUncheckedCreateNestedManyWithoutExamInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerUncheckedCreateNestedManyWithoutExamInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerCreateWithoutExamInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerCreateOrConnectWithoutExamInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ExamAnswerCreateManyExamInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String,
    dynamic> _$Input$ExamAnswerUncheckedCreateNestedManyWithoutExamInputToJson(
        Input$ExamAnswerUncheckedCreateNestedManyWithoutExamInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$ExamAnswerUncheckedCreateNestedManyWithoutExamSessionInput
    _$Input$ExamAnswerUncheckedCreateNestedManyWithoutExamSessionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerUncheckedCreateNestedManyWithoutExamSessionInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerCreateWithoutExamSessionInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerCreateOrConnectWithoutExamSessionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ExamAnswerCreateManyExamSessionInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$ExamAnswerUncheckedCreateNestedManyWithoutExamSessionInputToJson(
            Input$ExamAnswerUncheckedCreateNestedManyWithoutExamSessionInput
                instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
        };

Input$ExamAnswerUncheckedCreateWithoutExamInput
    _$Input$ExamAnswerUncheckedCreateWithoutExamInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerUncheckedCreateWithoutExamInput(
          id: json['id'] as String?,
          grade: (json['grade'] as num?)?.toDouble(),
          finishCalculation: json['finishCalculation'] as bool?,
          examSessionId: json['examSessionId'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ExamAnswerUncheckedCreateWithoutExamInputToJson(
        Input$ExamAnswerUncheckedCreateWithoutExamInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'grade': instance.grade,
      'finishCalculation': instance.finishCalculation,
      'examSessionId': instance.examSessionId,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ExamAnswerUncheckedCreateWithoutExamSessionInput
    _$Input$ExamAnswerUncheckedCreateWithoutExamSessionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerUncheckedCreateWithoutExamSessionInput(
          id: json['id'] as String?,
          examId: json['examId'] as String,
          grade: (json['grade'] as num?)?.toDouble(),
          finishCalculation: json['finishCalculation'] as bool?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic>
    _$Input$ExamAnswerUncheckedCreateWithoutExamSessionInputToJson(
            Input$ExamAnswerUncheckedCreateWithoutExamSessionInput instance) =>
        <String, dynamic>{
          'id': instance.id,
          'examId': instance.examId,
          'grade': instance.grade,
          'finishCalculation': instance.finishCalculation,
          'createdAt': instance.createdAt,
          'updatedAt': instance.updatedAt,
        };

Input$ExamAnswerUncheckedUpdateInput
    _$Input$ExamAnswerUncheckedUpdateInputFromJson(Map<String, dynamic> json) =>
        Input$ExamAnswerUncheckedUpdateInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          examId: json['examId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['examId'] as Map<String, dynamic>),
          grade: json['grade'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['grade'] as Map<String, dynamic>),
          finishCalculation: json['finishCalculation'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['finishCalculation'] as Map<String, dynamic>),
          examSessionId: json['examSessionId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['examSessionId'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamAnswerUncheckedUpdateInputToJson(
        Input$ExamAnswerUncheckedUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'examId': instance.examId?.toJson(),
      'grade': instance.grade?.toJson(),
      'finishCalculation': instance.finishCalculation?.toJson(),
      'examSessionId': instance.examSessionId?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ExamAnswerUncheckedUpdateManyInput
    _$Input$ExamAnswerUncheckedUpdateManyInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerUncheckedUpdateManyInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          examId: json['examId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['examId'] as Map<String, dynamic>),
          grade: json['grade'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['grade'] as Map<String, dynamic>),
          finishCalculation: json['finishCalculation'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['finishCalculation'] as Map<String, dynamic>),
          examSessionId: json['examSessionId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['examSessionId'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamAnswerUncheckedUpdateManyInputToJson(
        Input$ExamAnswerUncheckedUpdateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'examId': instance.examId?.toJson(),
      'grade': instance.grade?.toJson(),
      'finishCalculation': instance.finishCalculation?.toJson(),
      'examSessionId': instance.examSessionId?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ExamAnswerUncheckedUpdateManyWithoutExamAnswersInput
    _$Input$ExamAnswerUncheckedUpdateManyWithoutExamAnswersInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerUncheckedUpdateManyWithoutExamAnswersInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          grade: json['grade'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['grade'] as Map<String, dynamic>),
          finishCalculation: json['finishCalculation'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['finishCalculation'] as Map<String, dynamic>),
          examSessionId: json['examSessionId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['examSessionId'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String,
    dynamic> _$Input$ExamAnswerUncheckedUpdateManyWithoutExamAnswersInputToJson(
        Input$ExamAnswerUncheckedUpdateManyWithoutExamAnswersInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'grade': instance.grade?.toJson(),
      'finishCalculation': instance.finishCalculation?.toJson(),
      'examSessionId': instance.examSessionId?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ExamAnswerUncheckedUpdateManyWithoutExamInput
    _$Input$ExamAnswerUncheckedUpdateManyWithoutExamInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerUncheckedUpdateManyWithoutExamInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerCreateWithoutExamInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerCreateOrConnectWithoutExamInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerUpsertWithWhereUniqueWithoutExamInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ExamAnswerCreateManyExamInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerUpdateWithWhereUniqueWithoutExamInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerUpdateManyWithWhereWithoutExamInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$ExamAnswerUncheckedUpdateManyWithoutExamInputToJson(
            Input$ExamAnswerUncheckedUpdateManyWithoutExamInput instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'set': instance.$set?.map((e) => e?.toJson()).toList(),
          'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
          'delete': instance.delete?.map((e) => e?.toJson()).toList(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
          'update': instance.update?.map((e) => e?.toJson()).toList(),
          'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
          'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
        };

Input$ExamAnswerUncheckedUpdateManyWithoutExamSessionInput
    _$Input$ExamAnswerUncheckedUpdateManyWithoutExamSessionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerUncheckedUpdateManyWithoutExamSessionInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerCreateWithoutExamSessionInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerCreateOrConnectWithoutExamSessionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerUpsertWithWhereUniqueWithoutExamSessionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ExamAnswerCreateManyExamSessionInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerUpdateWithWhereUniqueWithoutExamSessionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerUpdateManyWithWhereWithoutExamSessionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String,
    dynamic> _$Input$ExamAnswerUncheckedUpdateManyWithoutExamSessionInputToJson(
        Input$ExamAnswerUncheckedUpdateManyWithoutExamSessionInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$ExamAnswerUncheckedUpdateWithoutExamInput
    _$Input$ExamAnswerUncheckedUpdateWithoutExamInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerUncheckedUpdateWithoutExamInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          grade: json['grade'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['grade'] as Map<String, dynamic>),
          finishCalculation: json['finishCalculation'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['finishCalculation'] as Map<String, dynamic>),
          examSessionId: json['examSessionId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['examSessionId'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamAnswerUncheckedUpdateWithoutExamInputToJson(
        Input$ExamAnswerUncheckedUpdateWithoutExamInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'grade': instance.grade?.toJson(),
      'finishCalculation': instance.finishCalculation?.toJson(),
      'examSessionId': instance.examSessionId?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ExamAnswerUncheckedUpdateWithoutExamSessionInput
    _$Input$ExamAnswerUncheckedUpdateWithoutExamSessionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerUncheckedUpdateWithoutExamSessionInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          examId: json['examId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['examId'] as Map<String, dynamic>),
          grade: json['grade'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['grade'] as Map<String, dynamic>),
          finishCalculation: json['finishCalculation'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['finishCalculation'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ExamAnswerUncheckedUpdateWithoutExamSessionInputToJson(
            Input$ExamAnswerUncheckedUpdateWithoutExamSessionInput instance) =>
        <String, dynamic>{
          'id': instance.id?.toJson(),
          'examId': instance.examId?.toJson(),
          'grade': instance.grade?.toJson(),
          'finishCalculation': instance.finishCalculation?.toJson(),
          'createdAt': instance.createdAt?.toJson(),
          'updatedAt': instance.updatedAt?.toJson(),
        };

Input$ExamAnswerUpdateInput _$Input$ExamAnswerUpdateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamAnswerUpdateInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      exam: json['exam'] == null
          ? null
          : Input$ExamUpdateOneRequiredWithoutExamAnswersInput.fromJson(
              json['exam'] as Map<String, dynamic>),
      grade: json['grade'] == null
          ? null
          : Input$FloatFieldUpdateOperationsInput.fromJson(
              json['grade'] as Map<String, dynamic>),
      finishCalculation: json['finishCalculation'] == null
          ? null
          : Input$BoolFieldUpdateOperationsInput.fromJson(
              json['finishCalculation'] as Map<String, dynamic>),
      examSession: json['examSession'] == null
          ? null
          : Input$ExamSessionUpdateOneWithoutExamAnswersInput.fromJson(
              json['examSession'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ExamAnswerUpdateInputToJson(
        Input$ExamAnswerUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'exam': instance.exam?.toJson(),
      'grade': instance.grade?.toJson(),
      'finishCalculation': instance.finishCalculation?.toJson(),
      'examSession': instance.examSession?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ExamAnswerUpdateManyMutationInput
    _$Input$ExamAnswerUpdateManyMutationInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerUpdateManyMutationInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          grade: json['grade'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['grade'] as Map<String, dynamic>),
          finishCalculation: json['finishCalculation'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['finishCalculation'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamAnswerUpdateManyMutationInputToJson(
        Input$ExamAnswerUpdateManyMutationInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'grade': instance.grade?.toJson(),
      'finishCalculation': instance.finishCalculation?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ExamAnswerUpdateManyWithoutExamInput
    _$Input$ExamAnswerUpdateManyWithoutExamInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerUpdateManyWithoutExamInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerCreateWithoutExamInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerCreateOrConnectWithoutExamInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerUpsertWithWhereUniqueWithoutExamInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ExamAnswerCreateManyExamInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerUpdateWithWhereUniqueWithoutExamInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerUpdateManyWithWhereWithoutExamInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$ExamAnswerUpdateManyWithoutExamInputToJson(
        Input$ExamAnswerUpdateManyWithoutExamInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$ExamAnswerUpdateManyWithoutExamSessionInput
    _$Input$ExamAnswerUpdateManyWithoutExamSessionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerUpdateManyWithoutExamSessionInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerCreateWithoutExamSessionInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerCreateOrConnectWithoutExamSessionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerUpsertWithWhereUniqueWithoutExamSessionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ExamAnswerCreateManyExamSessionInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerUpdateWithWhereUniqueWithoutExamSessionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerUpdateManyWithWhereWithoutExamSessionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamAnswerScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$ExamAnswerUpdateManyWithoutExamSessionInputToJson(
        Input$ExamAnswerUpdateManyWithoutExamSessionInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$ExamAnswerUpdateManyWithWhereWithoutExamInput
    _$Input$ExamAnswerUpdateManyWithWhereWithoutExamInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerUpdateManyWithWhereWithoutExamInput(
          where: Input$ExamAnswerScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$ExamAnswerUncheckedUpdateManyWithoutExamAnswersInput
              .fromJson(json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ExamAnswerUpdateManyWithWhereWithoutExamInputToJson(
            Input$ExamAnswerUpdateManyWithWhereWithoutExamInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$ExamAnswerUpdateManyWithWhereWithoutExamSessionInput
    _$Input$ExamAnswerUpdateManyWithWhereWithoutExamSessionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerUpdateManyWithWhereWithoutExamSessionInput(
          where: Input$ExamAnswerScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$ExamAnswerUncheckedUpdateManyWithoutExamAnswersInput
              .fromJson(json['data'] as Map<String, dynamic>),
        );

Map<String,
    dynamic> _$Input$ExamAnswerUpdateManyWithWhereWithoutExamSessionInputToJson(
        Input$ExamAnswerUpdateManyWithWhereWithoutExamSessionInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

Input$ExamAnswerUpdateWithoutExamInput
    _$Input$ExamAnswerUpdateWithoutExamInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerUpdateWithoutExamInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          grade: json['grade'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['grade'] as Map<String, dynamic>),
          finishCalculation: json['finishCalculation'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['finishCalculation'] as Map<String, dynamic>),
          examSession: json['examSession'] == null
              ? null
              : Input$ExamSessionUpdateOneWithoutExamAnswersInput.fromJson(
                  json['examSession'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamAnswerUpdateWithoutExamInputToJson(
        Input$ExamAnswerUpdateWithoutExamInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'grade': instance.grade?.toJson(),
      'finishCalculation': instance.finishCalculation?.toJson(),
      'examSession': instance.examSession?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ExamAnswerUpdateWithoutExamSessionInput
    _$Input$ExamAnswerUpdateWithoutExamSessionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerUpdateWithoutExamSessionInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          exam: json['exam'] == null
              ? null
              : Input$ExamUpdateOneRequiredWithoutExamAnswersInput.fromJson(
                  json['exam'] as Map<String, dynamic>),
          grade: json['grade'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['grade'] as Map<String, dynamic>),
          finishCalculation: json['finishCalculation'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['finishCalculation'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamAnswerUpdateWithoutExamSessionInputToJson(
        Input$ExamAnswerUpdateWithoutExamSessionInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'exam': instance.exam?.toJson(),
      'grade': instance.grade?.toJson(),
      'finishCalculation': instance.finishCalculation?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ExamAnswerUpdateWithWhereUniqueWithoutExamInput
    _$Input$ExamAnswerUpdateWithWhereUniqueWithoutExamInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerUpdateWithWhereUniqueWithoutExamInput(
          where: Input$ExamAnswerWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$ExamAnswerUncheckedUpdateWithoutExamInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ExamAnswerUpdateWithWhereUniqueWithoutExamInputToJson(
            Input$ExamAnswerUpdateWithWhereUniqueWithoutExamInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$ExamAnswerUpdateWithWhereUniqueWithoutExamSessionInput
    _$Input$ExamAnswerUpdateWithWhereUniqueWithoutExamSessionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerUpdateWithWhereUniqueWithoutExamSessionInput(
          where: Input$ExamAnswerWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$ExamAnswerUncheckedUpdateWithoutExamSessionInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ExamAnswerUpdateWithWhereUniqueWithoutExamSessionInputToJson(
            Input$ExamAnswerUpdateWithWhereUniqueWithoutExamSessionInput
                instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$ExamAnswerUpsertWithWhereUniqueWithoutExamInput
    _$Input$ExamAnswerUpsertWithWhereUniqueWithoutExamInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerUpsertWithWhereUniqueWithoutExamInput(
          where: Input$ExamAnswerWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: Input$ExamAnswerUncheckedUpdateWithoutExamInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$ExamAnswerUncheckedCreateWithoutExamInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ExamAnswerUpsertWithWhereUniqueWithoutExamInputToJson(
            Input$ExamAnswerUpsertWithWhereUniqueWithoutExamInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

Input$ExamAnswerUpsertWithWhereUniqueWithoutExamSessionInput
    _$Input$ExamAnswerUpsertWithWhereUniqueWithoutExamSessionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamAnswerUpsertWithWhereUniqueWithoutExamSessionInput(
          where: Input$ExamAnswerWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update:
              Input$ExamAnswerUncheckedUpdateWithoutExamSessionInput.fromJson(
                  json['update'] as Map<String, dynamic>),
          create:
              Input$ExamAnswerUncheckedCreateWithoutExamSessionInput.fromJson(
                  json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ExamAnswerUpsertWithWhereUniqueWithoutExamSessionInputToJson(
            Input$ExamAnswerUpsertWithWhereUniqueWithoutExamSessionInput
                instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

Input$ExamAnswerWhereInput _$Input$ExamAnswerWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamAnswerWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ExamAnswerWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ExamAnswerWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ExamAnswerWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      examId: json['examId'] == null
          ? null
          : Input$StringFilter.fromJson(json['examId'] as Map<String, dynamic>),
      exam: json['exam'] == null
          ? null
          : Input$ExamWhereInput.fromJson(json['exam'] as Map<String, dynamic>),
      grade: json['grade'] == null
          ? null
          : Input$FloatFilter.fromJson(json['grade'] as Map<String, dynamic>),
      finishCalculation: json['finishCalculation'] == null
          ? null
          : Input$BoolFilter.fromJson(
              json['finishCalculation'] as Map<String, dynamic>),
      examSessionId: json['examSessionId'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['examSessionId'] as Map<String, dynamic>),
      examSession: json['examSession'] == null
          ? null
          : Input$ExamSessionWhereInput.fromJson(
              json['examSession'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ExamAnswerWhereInputToJson(
        Input$ExamAnswerWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'examId': instance.examId?.toJson(),
      'exam': instance.exam?.toJson(),
      'grade': instance.grade?.toJson(),
      'finishCalculation': instance.finishCalculation?.toJson(),
      'examSessionId': instance.examSessionId?.toJson(),
      'examSession': instance.examSession?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ExamAnswerWhereUniqueInput _$Input$ExamAnswerWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamAnswerWhereUniqueInput(
      id: json['id'] as String?,
    );

Map<String, dynamic> _$Input$ExamAnswerWhereUniqueInputToJson(
        Input$ExamAnswerWhereUniqueInput instance) =>
    <String, dynamic>{
      'id': instance.id,
    };

Input$ExamCountOrderByAggregateInput
    _$Input$ExamCountOrderByAggregateInputFromJson(Map<String, dynamic> json) =>
        Input$ExamCountOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ExamCountOrderByAggregateInputToJson(
        Input$ExamCountOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$ExamCreateInput _$Input$ExamCreateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamCreateInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      user: Input$UserCreateNestedOneWithoutExaminationsInput.fromJson(
          json['user'] as Map<String, dynamic>),
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
      examquestions: json['examquestions'] == null
          ? null
          : Input$ExamQuestionCreateNestedManyWithoutExamInput.fromJson(
              json['examquestions'] as Map<String, dynamic>),
      examAnswers: json['examAnswers'] == null
          ? null
          : Input$ExamAnswerCreateNestedManyWithoutExamInput.fromJson(
              json['examAnswers'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ExamCreateInputToJson(
        Input$ExamCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'user': instance.user.toJson(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'examquestions': instance.examquestions?.toJson(),
      'examAnswers': instance.examAnswers?.toJson(),
    };

Input$ExamCreateManyInput _$Input$ExamCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamCreateManyInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      userId: json['userId'] as String,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
    );

Map<String, dynamic> _$Input$ExamCreateManyInputToJson(
        Input$ExamCreateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'userId': instance.userId,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ExamCreateManyUserInput _$Input$ExamCreateManyUserInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamCreateManyUserInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
    );

Map<String, dynamic> _$Input$ExamCreateManyUserInputToJson(
        Input$ExamCreateManyUserInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ExamCreateManyUserInputEnvelope
    _$Input$ExamCreateManyUserInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        Input$ExamCreateManyUserInputEnvelope(
          data: Input$ExamCreateManyUserInput.fromJson(
              json['data'] as Map<String, dynamic>),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$Input$ExamCreateManyUserInputEnvelopeToJson(
        Input$ExamCreateManyUserInputEnvelope instance) =>
    <String, dynamic>{
      'data': instance.data.toJson(),
      'skipDuplicates': instance.skipDuplicates,
    };

Input$ExamCreateNestedManyWithoutUserInput
    _$Input$ExamCreateNestedManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamCreateNestedManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ExamCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$ExamCreateNestedManyWithoutUserInputToJson(
        Input$ExamCreateNestedManyWithoutUserInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$ExamCreateNestedOneWithoutExamAnswersInput
    _$Input$ExamCreateNestedOneWithoutExamAnswersInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamCreateNestedOneWithoutExamAnswersInput(
          create: json['create'] == null
              ? null
              : Input$ExamUncheckedCreateWithoutExamAnswersInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$ExamCreateOrConnectWithoutExamAnswersInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$ExamWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamCreateNestedOneWithoutExamAnswersInputToJson(
        Input$ExamCreateNestedOneWithoutExamAnswersInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'connect': instance.connect?.toJson(),
    };

Input$ExamCreateNestedOneWithoutExamquestionsInput
    _$Input$ExamCreateNestedOneWithoutExamquestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamCreateNestedOneWithoutExamquestionsInput(
          create: json['create'] == null
              ? null
              : Input$ExamUncheckedCreateWithoutExamquestionsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$ExamCreateOrConnectWithoutExamquestionsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$ExamWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamCreateNestedOneWithoutExamquestionsInputToJson(
        Input$ExamCreateNestedOneWithoutExamquestionsInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'connect': instance.connect?.toJson(),
    };

Input$ExamCreateOrConnectWithoutExamAnswersInput
    _$Input$ExamCreateOrConnectWithoutExamAnswersInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamCreateOrConnectWithoutExamAnswersInput(
          where: Input$ExamWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$ExamUncheckedCreateWithoutExamAnswersInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamCreateOrConnectWithoutExamAnswersInputToJson(
        Input$ExamCreateOrConnectWithoutExamAnswersInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$ExamCreateOrConnectWithoutExamquestionsInput
    _$Input$ExamCreateOrConnectWithoutExamquestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamCreateOrConnectWithoutExamquestionsInput(
          where: Input$ExamWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$ExamUncheckedCreateWithoutExamquestionsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamCreateOrConnectWithoutExamquestionsInputToJson(
        Input$ExamCreateOrConnectWithoutExamquestionsInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$ExamCreateOrConnectWithoutUserInput
    _$Input$ExamCreateOrConnectWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamCreateOrConnectWithoutUserInput(
          where: Input$ExamWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$ExamUncheckedCreateWithoutUserInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamCreateOrConnectWithoutUserInputToJson(
        Input$ExamCreateOrConnectWithoutUserInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$ExamCreateWithoutExamAnswersInput
    _$Input$ExamCreateWithoutExamAnswersInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamCreateWithoutExamAnswersInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          user: Input$UserCreateNestedOneWithoutExaminationsInput.fromJson(
              json['user'] as Map<String, dynamic>),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          examquestions: json['examquestions'] == null
              ? null
              : Input$ExamQuestionCreateNestedManyWithoutExamInput.fromJson(
                  json['examquestions'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamCreateWithoutExamAnswersInputToJson(
        Input$ExamCreateWithoutExamAnswersInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'user': instance.user.toJson(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'examquestions': instance.examquestions?.toJson(),
    };

Input$ExamCreateWithoutExamquestionsInput
    _$Input$ExamCreateWithoutExamquestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamCreateWithoutExamquestionsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          user: Input$UserCreateNestedOneWithoutExaminationsInput.fromJson(
              json['user'] as Map<String, dynamic>),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          examAnswers: json['examAnswers'] == null
              ? null
              : Input$ExamAnswerCreateNestedManyWithoutExamInput.fromJson(
                  json['examAnswers'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamCreateWithoutExamquestionsInputToJson(
        Input$ExamCreateWithoutExamquestionsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'user': instance.user.toJson(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'examAnswers': instance.examAnswers?.toJson(),
    };

Input$ExamCreateWithoutUserInput _$Input$ExamCreateWithoutUserInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamCreateWithoutUserInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
      examquestions: json['examquestions'] == null
          ? null
          : Input$ExamQuestionCreateNestedManyWithoutExamInput.fromJson(
              json['examquestions'] as Map<String, dynamic>),
      examAnswers: json['examAnswers'] == null
          ? null
          : Input$ExamAnswerCreateNestedManyWithoutExamInput.fromJson(
              json['examAnswers'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ExamCreateWithoutUserInputToJson(
        Input$ExamCreateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'examquestions': instance.examquestions?.toJson(),
      'examAnswers': instance.examAnswers?.toJson(),
    };

Input$ExamListRelationFilter _$Input$ExamListRelationFilterFromJson(
        Map<String, dynamic> json) =>
    Input$ExamListRelationFilter(
      every: json['every'] == null
          ? null
          : Input$ExamWhereInput.fromJson(
              json['every'] as Map<String, dynamic>),
      some: json['some'] == null
          ? null
          : Input$ExamWhereInput.fromJson(json['some'] as Map<String, dynamic>),
      none: json['none'] == null
          ? null
          : Input$ExamWhereInput.fromJson(json['none'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ExamListRelationFilterToJson(
        Input$ExamListRelationFilter instance) =>
    <String, dynamic>{
      'every': instance.every?.toJson(),
      'some': instance.some?.toJson(),
      'none': instance.none?.toJson(),
    };

Input$ExamMaxOrderByAggregateInput _$Input$ExamMaxOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamMaxOrderByAggregateInput(
      id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
          unknownValue: Enum$SortOrder.$unknown),
      name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
          unknownValue: Enum$SortOrder.$unknown),
      userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
          unknownValue: Enum$SortOrder.$unknown),
      createdAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['createdAt'],
          unknownValue: Enum$SortOrder.$unknown),
      updatedAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['updatedAt'],
          unknownValue: Enum$SortOrder.$unknown),
    );

Map<String, dynamic> _$Input$ExamMaxOrderByAggregateInputToJson(
        Input$ExamMaxOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$ExamMinOrderByAggregateInput _$Input$ExamMinOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamMinOrderByAggregateInput(
      id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
          unknownValue: Enum$SortOrder.$unknown),
      name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
          unknownValue: Enum$SortOrder.$unknown),
      userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
          unknownValue: Enum$SortOrder.$unknown),
      createdAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['createdAt'],
          unknownValue: Enum$SortOrder.$unknown),
      updatedAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['updatedAt'],
          unknownValue: Enum$SortOrder.$unknown),
    );

Map<String, dynamic> _$Input$ExamMinOrderByAggregateInputToJson(
        Input$ExamMinOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$ExamOrderByRelationAggregateInput
    _$Input$ExamOrderByRelationAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamOrderByRelationAggregateInput(
          $_count: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['_count'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ExamOrderByRelationAggregateInputToJson(
        Input$ExamOrderByRelationAggregateInput instance) =>
    <String, dynamic>{
      '_count': _$Enum$SortOrderEnumMap[instance.$_count],
    };

Input$ExamOrderByWithAggregationInput
    _$Input$ExamOrderByWithAggregationInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamOrderByWithAggregationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          $_count: json['_count'] == null
              ? null
              : Input$ExamCountOrderByAggregateInput.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$ExamMaxOrderByAggregateInput.fromJson(
                  json['_max'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$ExamMinOrderByAggregateInput.fromJson(
                  json['_min'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamOrderByWithAggregationInputToJson(
        Input$ExamOrderByWithAggregationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      '_count': instance.$_count?.toJson(),
      '_max': instance.$_max?.toJson(),
      '_min': instance.$_min?.toJson(),
    };

Input$ExamOrderByWithRelationInput _$Input$ExamOrderByWithRelationInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamOrderByWithRelationInput(
      id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
          unknownValue: Enum$SortOrder.$unknown),
      name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
          unknownValue: Enum$SortOrder.$unknown),
      userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
          unknownValue: Enum$SortOrder.$unknown),
      user: json['user'] == null
          ? null
          : Input$UserOrderByWithRelationInput.fromJson(
              json['user'] as Map<String, dynamic>),
      createdAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['createdAt'],
          unknownValue: Enum$SortOrder.$unknown),
      updatedAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['updatedAt'],
          unknownValue: Enum$SortOrder.$unknown),
      examquestions: json['examquestions'] == null
          ? null
          : Input$ExamQuestionOrderByRelationAggregateInput.fromJson(
              json['examquestions'] as Map<String, dynamic>),
      examAnswers: json['examAnswers'] == null
          ? null
          : Input$ExamAnswerOrderByRelationAggregateInput.fromJson(
              json['examAnswers'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ExamOrderByWithRelationInputToJson(
        Input$ExamOrderByWithRelationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'user': instance.user?.toJson(),
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      'examquestions': instance.examquestions?.toJson(),
      'examAnswers': instance.examAnswers?.toJson(),
    };

Input$ExamQuestionCountOrderByAggregateInput
    _$Input$ExamQuestionCountOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionCountOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          questionId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['questionId'],
              unknownValue: Enum$SortOrder.$unknown),
          examId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['examId'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ExamQuestionCountOrderByAggregateInputToJson(
        Input$ExamQuestionCountOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'questionId': _$Enum$SortOrderEnumMap[instance.questionId],
      'examId': _$Enum$SortOrderEnumMap[instance.examId],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$ExamQuestionCreateInput _$Input$ExamQuestionCreateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamQuestionCreateInput(
      id: json['id'] as String?,
      question: Input$QuestionCreateNestedOneWithoutExamquestionsInput.fromJson(
          json['question'] as Map<String, dynamic>),
      exam: Input$ExamCreateNestedOneWithoutExamquestionsInput.fromJson(
          json['exam'] as Map<String, dynamic>),
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
    );

Map<String, dynamic> _$Input$ExamQuestionCreateInputToJson(
        Input$ExamQuestionCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'question': instance.question.toJson(),
      'exam': instance.exam.toJson(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ExamQuestionCreateManyExamInput
    _$Input$ExamQuestionCreateManyExamInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionCreateManyExamInput(
          id: json['id'] as String?,
          questionId: json['questionId'] as String,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ExamQuestionCreateManyExamInputToJson(
        Input$ExamQuestionCreateManyExamInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'questionId': instance.questionId,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ExamQuestionCreateManyExamInputEnvelope
    _$Input$ExamQuestionCreateManyExamInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionCreateManyExamInputEnvelope(
          data: Input$ExamQuestionCreateManyExamInput.fromJson(
              json['data'] as Map<String, dynamic>),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$Input$ExamQuestionCreateManyExamInputEnvelopeToJson(
        Input$ExamQuestionCreateManyExamInputEnvelope instance) =>
    <String, dynamic>{
      'data': instance.data.toJson(),
      'skipDuplicates': instance.skipDuplicates,
    };

Input$ExamQuestionCreateManyInput _$Input$ExamQuestionCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamQuestionCreateManyInput(
      id: json['id'] as String?,
      questionId: json['questionId'] as String,
      examId: json['examId'] as String,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
    );

Map<String, dynamic> _$Input$ExamQuestionCreateManyInputToJson(
        Input$ExamQuestionCreateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'questionId': instance.questionId,
      'examId': instance.examId,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ExamQuestionCreateManyQuestionInput
    _$Input$ExamQuestionCreateManyQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionCreateManyQuestionInput(
          id: json['id'] as String?,
          examId: json['examId'] as String,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ExamQuestionCreateManyQuestionInputToJson(
        Input$ExamQuestionCreateManyQuestionInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'examId': instance.examId,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ExamQuestionCreateManyQuestionInputEnvelope
    _$Input$ExamQuestionCreateManyQuestionInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionCreateManyQuestionInputEnvelope(
          data: Input$ExamQuestionCreateManyQuestionInput.fromJson(
              json['data'] as Map<String, dynamic>),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$Input$ExamQuestionCreateManyQuestionInputEnvelopeToJson(
        Input$ExamQuestionCreateManyQuestionInputEnvelope instance) =>
    <String, dynamic>{
      'data': instance.data.toJson(),
      'skipDuplicates': instance.skipDuplicates,
    };

Input$ExamQuestionCreateNestedManyWithoutExamInput
    _$Input$ExamQuestionCreateNestedManyWithoutExamInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionCreateNestedManyWithoutExamInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionCreateWithoutExamInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionCreateOrConnectWithoutExamInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ExamQuestionCreateManyExamInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$ExamQuestionCreateNestedManyWithoutExamInputToJson(
        Input$ExamQuestionCreateNestedManyWithoutExamInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$ExamQuestionCreateNestedManyWithoutQuestionInput
    _$Input$ExamQuestionCreateNestedManyWithoutQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionCreateNestedManyWithoutQuestionInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionCreateWithoutQuestionInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionCreateOrConnectWithoutQuestionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ExamQuestionCreateManyQuestionInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$ExamQuestionCreateNestedManyWithoutQuestionInputToJson(
            Input$ExamQuestionCreateNestedManyWithoutQuestionInput instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
        };

Input$ExamQuestionCreateOrConnectWithoutExamInput
    _$Input$ExamQuestionCreateOrConnectWithoutExamInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionCreateOrConnectWithoutExamInput(
          where: Input$ExamQuestionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$ExamQuestionUncheckedCreateWithoutExamInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamQuestionCreateOrConnectWithoutExamInputToJson(
        Input$ExamQuestionCreateOrConnectWithoutExamInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$ExamQuestionCreateOrConnectWithoutQuestionInput
    _$Input$ExamQuestionCreateOrConnectWithoutQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionCreateOrConnectWithoutQuestionInput(
          where: Input$ExamQuestionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create:
              Input$ExamQuestionUncheckedCreateWithoutQuestionInput.fromJson(
                  json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ExamQuestionCreateOrConnectWithoutQuestionInputToJson(
            Input$ExamQuestionCreateOrConnectWithoutQuestionInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'create': instance.create.toJson(),
        };

Input$ExamQuestionCreateWithoutExamInput
    _$Input$ExamQuestionCreateWithoutExamInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionCreateWithoutExamInput(
          id: json['id'] as String?,
          question:
              Input$QuestionCreateNestedOneWithoutExamquestionsInput.fromJson(
                  json['question'] as Map<String, dynamic>),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ExamQuestionCreateWithoutExamInputToJson(
        Input$ExamQuestionCreateWithoutExamInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'question': instance.question.toJson(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ExamQuestionCreateWithoutQuestionInput
    _$Input$ExamQuestionCreateWithoutQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionCreateWithoutQuestionInput(
          id: json['id'] as String?,
          exam: Input$ExamCreateNestedOneWithoutExamquestionsInput.fromJson(
              json['exam'] as Map<String, dynamic>),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ExamQuestionCreateWithoutQuestionInputToJson(
        Input$ExamQuestionCreateWithoutQuestionInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'exam': instance.exam.toJson(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ExamQuestionListRelationFilter
    _$Input$ExamQuestionListRelationFilterFromJson(Map<String, dynamic> json) =>
        Input$ExamQuestionListRelationFilter(
          every: json['every'] == null
              ? null
              : Input$ExamQuestionWhereInput.fromJson(
                  json['every'] as Map<String, dynamic>),
          some: json['some'] == null
              ? null
              : Input$ExamQuestionWhereInput.fromJson(
                  json['some'] as Map<String, dynamic>),
          none: json['none'] == null
              ? null
              : Input$ExamQuestionWhereInput.fromJson(
                  json['none'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamQuestionListRelationFilterToJson(
        Input$ExamQuestionListRelationFilter instance) =>
    <String, dynamic>{
      'every': instance.every?.toJson(),
      'some': instance.some?.toJson(),
      'none': instance.none?.toJson(),
    };

Input$ExamQuestionMaxOrderByAggregateInput
    _$Input$ExamQuestionMaxOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionMaxOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          questionId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['questionId'],
              unknownValue: Enum$SortOrder.$unknown),
          examId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['examId'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ExamQuestionMaxOrderByAggregateInputToJson(
        Input$ExamQuestionMaxOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'questionId': _$Enum$SortOrderEnumMap[instance.questionId],
      'examId': _$Enum$SortOrderEnumMap[instance.examId],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$ExamQuestionMinOrderByAggregateInput
    _$Input$ExamQuestionMinOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionMinOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          questionId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['questionId'],
              unknownValue: Enum$SortOrder.$unknown),
          examId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['examId'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ExamQuestionMinOrderByAggregateInputToJson(
        Input$ExamQuestionMinOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'questionId': _$Enum$SortOrderEnumMap[instance.questionId],
      'examId': _$Enum$SortOrderEnumMap[instance.examId],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$ExamQuestionOrderByRelationAggregateInput
    _$Input$ExamQuestionOrderByRelationAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionOrderByRelationAggregateInput(
          $_count: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['_count'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ExamQuestionOrderByRelationAggregateInputToJson(
        Input$ExamQuestionOrderByRelationAggregateInput instance) =>
    <String, dynamic>{
      '_count': _$Enum$SortOrderEnumMap[instance.$_count],
    };

Input$ExamQuestionOrderByWithAggregationInput
    _$Input$ExamQuestionOrderByWithAggregationInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionOrderByWithAggregationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          questionId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['questionId'],
              unknownValue: Enum$SortOrder.$unknown),
          examId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['examId'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          $_count: json['_count'] == null
              ? null
              : Input$ExamQuestionCountOrderByAggregateInput.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$ExamQuestionMaxOrderByAggregateInput.fromJson(
                  json['_max'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$ExamQuestionMinOrderByAggregateInput.fromJson(
                  json['_min'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamQuestionOrderByWithAggregationInputToJson(
        Input$ExamQuestionOrderByWithAggregationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'questionId': _$Enum$SortOrderEnumMap[instance.questionId],
      'examId': _$Enum$SortOrderEnumMap[instance.examId],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      '_count': instance.$_count?.toJson(),
      '_max': instance.$_max?.toJson(),
      '_min': instance.$_min?.toJson(),
    };

Input$ExamQuestionOrderByWithRelationInput
    _$Input$ExamQuestionOrderByWithRelationInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionOrderByWithRelationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          questionId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['questionId'],
              unknownValue: Enum$SortOrder.$unknown),
          question: json['question'] == null
              ? null
              : Input$QuestionOrderByWithRelationInput.fromJson(
                  json['question'] as Map<String, dynamic>),
          examId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['examId'],
              unknownValue: Enum$SortOrder.$unknown),
          exam: json['exam'] == null
              ? null
              : Input$ExamOrderByWithRelationInput.fromJson(
                  json['exam'] as Map<String, dynamic>),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ExamQuestionOrderByWithRelationInputToJson(
        Input$ExamQuestionOrderByWithRelationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'questionId': _$Enum$SortOrderEnumMap[instance.questionId],
      'question': instance.question?.toJson(),
      'examId': _$Enum$SortOrderEnumMap[instance.examId],
      'exam': instance.exam?.toJson(),
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$ExamQuestionScalarWhereInput _$Input$ExamQuestionScalarWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamQuestionScalarWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ExamQuestionScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ExamQuestionScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ExamQuestionScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      questionId: json['questionId'] == null
          ? null
          : Input$StringFilter.fromJson(
              json['questionId'] as Map<String, dynamic>),
      examId: json['examId'] == null
          ? null
          : Input$StringFilter.fromJson(json['examId'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ExamQuestionScalarWhereInputToJson(
        Input$ExamQuestionScalarWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'questionId': instance.questionId?.toJson(),
      'examId': instance.examId?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ExamQuestionScalarWhereWithAggregatesInput
    _$Input$ExamQuestionScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          OR: (json['OR'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          NOT: (json['NOT'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          id: json['id'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['id'] as Map<String, dynamic>),
          questionId: json['questionId'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['questionId'] as Map<String, dynamic>),
          examId: json['examId'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['examId'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamQuestionScalarWhereWithAggregatesInputToJson(
        Input$ExamQuestionScalarWhereWithAggregatesInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'questionId': instance.questionId?.toJson(),
      'examId': instance.examId?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ExamQuestionUncheckedCreateInput
    _$Input$ExamQuestionUncheckedCreateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionUncheckedCreateInput(
          id: json['id'] as String?,
          questionId: json['questionId'] as String,
          examId: json['examId'] as String,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ExamQuestionUncheckedCreateInputToJson(
        Input$ExamQuestionUncheckedCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'questionId': instance.questionId,
      'examId': instance.examId,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ExamQuestionUncheckedCreateNestedManyWithoutExamInput
    _$Input$ExamQuestionUncheckedCreateNestedManyWithoutExamInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionUncheckedCreateNestedManyWithoutExamInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionCreateWithoutExamInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionCreateOrConnectWithoutExamInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ExamQuestionCreateManyExamInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$ExamQuestionUncheckedCreateNestedManyWithoutExamInputToJson(
            Input$ExamQuestionUncheckedCreateNestedManyWithoutExamInput
                instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
        };

Input$ExamQuestionUncheckedCreateNestedManyWithoutQuestionInput
    _$Input$ExamQuestionUncheckedCreateNestedManyWithoutQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionUncheckedCreateNestedManyWithoutQuestionInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionCreateWithoutQuestionInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionCreateOrConnectWithoutQuestionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ExamQuestionCreateManyQuestionInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$ExamQuestionUncheckedCreateNestedManyWithoutQuestionInputToJson(
            Input$ExamQuestionUncheckedCreateNestedManyWithoutQuestionInput
                instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
        };

Input$ExamQuestionUncheckedCreateWithoutExamInput
    _$Input$ExamQuestionUncheckedCreateWithoutExamInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionUncheckedCreateWithoutExamInput(
          id: json['id'] as String?,
          questionId: json['questionId'] as String,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$ExamQuestionUncheckedCreateWithoutExamInputToJson(
        Input$ExamQuestionUncheckedCreateWithoutExamInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'questionId': instance.questionId,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ExamQuestionUncheckedCreateWithoutQuestionInput
    _$Input$ExamQuestionUncheckedCreateWithoutQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionUncheckedCreateWithoutQuestionInput(
          id: json['id'] as String?,
          examId: json['examId'] as String,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic>
    _$Input$ExamQuestionUncheckedCreateWithoutQuestionInputToJson(
            Input$ExamQuestionUncheckedCreateWithoutQuestionInput instance) =>
        <String, dynamic>{
          'id': instance.id,
          'examId': instance.examId,
          'createdAt': instance.createdAt,
          'updatedAt': instance.updatedAt,
        };

Input$ExamQuestionUncheckedUpdateInput
    _$Input$ExamQuestionUncheckedUpdateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionUncheckedUpdateInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          questionId: json['questionId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['questionId'] as Map<String, dynamic>),
          examId: json['examId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['examId'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamQuestionUncheckedUpdateInputToJson(
        Input$ExamQuestionUncheckedUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'questionId': instance.questionId?.toJson(),
      'examId': instance.examId?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ExamQuestionUncheckedUpdateManyInput
    _$Input$ExamQuestionUncheckedUpdateManyInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionUncheckedUpdateManyInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          questionId: json['questionId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['questionId'] as Map<String, dynamic>),
          examId: json['examId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['examId'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamQuestionUncheckedUpdateManyInputToJson(
        Input$ExamQuestionUncheckedUpdateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'questionId': instance.questionId?.toJson(),
      'examId': instance.examId?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ExamQuestionUncheckedUpdateManyWithoutExamInput
    _$Input$ExamQuestionUncheckedUpdateManyWithoutExamInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionUncheckedUpdateManyWithoutExamInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionCreateWithoutExamInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionCreateOrConnectWithoutExamInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionUpsertWithWhereUniqueWithoutExamInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ExamQuestionCreateManyExamInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionUpdateWithWhereUniqueWithoutExamInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionUpdateManyWithWhereWithoutExamInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$ExamQuestionUncheckedUpdateManyWithoutExamInputToJson(
            Input$ExamQuestionUncheckedUpdateManyWithoutExamInput instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'set': instance.$set?.map((e) => e?.toJson()).toList(),
          'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
          'delete': instance.delete?.map((e) => e?.toJson()).toList(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
          'update': instance.update?.map((e) => e?.toJson()).toList(),
          'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
          'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
        };

Input$ExamQuestionUncheckedUpdateManyWithoutExamquestionsInput
    _$Input$ExamQuestionUncheckedUpdateManyWithoutExamquestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionUncheckedUpdateManyWithoutExamquestionsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          questionId: json['questionId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['questionId'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ExamQuestionUncheckedUpdateManyWithoutExamquestionsInputToJson(
            Input$ExamQuestionUncheckedUpdateManyWithoutExamquestionsInput
                instance) =>
        <String, dynamic>{
          'id': instance.id?.toJson(),
          'questionId': instance.questionId?.toJson(),
          'createdAt': instance.createdAt?.toJson(),
          'updatedAt': instance.updatedAt?.toJson(),
        };

Input$ExamQuestionUncheckedUpdateManyWithoutQuestionInput
    _$Input$ExamQuestionUncheckedUpdateManyWithoutQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionUncheckedUpdateManyWithoutQuestionInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionCreateWithoutQuestionInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionCreateOrConnectWithoutQuestionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionUpsertWithWhereUniqueWithoutQuestionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ExamQuestionCreateManyQuestionInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionUpdateWithWhereUniqueWithoutQuestionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionUpdateManyWithWhereWithoutQuestionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String,
    dynamic> _$Input$ExamQuestionUncheckedUpdateManyWithoutQuestionInputToJson(
        Input$ExamQuestionUncheckedUpdateManyWithoutQuestionInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$ExamQuestionUncheckedUpdateWithoutExamInput
    _$Input$ExamQuestionUncheckedUpdateWithoutExamInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionUncheckedUpdateWithoutExamInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          questionId: json['questionId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['questionId'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamQuestionUncheckedUpdateWithoutExamInputToJson(
        Input$ExamQuestionUncheckedUpdateWithoutExamInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'questionId': instance.questionId?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ExamQuestionUncheckedUpdateWithoutQuestionInput
    _$Input$ExamQuestionUncheckedUpdateWithoutQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionUncheckedUpdateWithoutQuestionInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          examId: json['examId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['examId'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ExamQuestionUncheckedUpdateWithoutQuestionInputToJson(
            Input$ExamQuestionUncheckedUpdateWithoutQuestionInput instance) =>
        <String, dynamic>{
          'id': instance.id?.toJson(),
          'examId': instance.examId?.toJson(),
          'createdAt': instance.createdAt?.toJson(),
          'updatedAt': instance.updatedAt?.toJson(),
        };

Input$ExamQuestionUpdateInput _$Input$ExamQuestionUpdateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamQuestionUpdateInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      question: json['question'] == null
          ? null
          : Input$QuestionUpdateOneRequiredWithoutExamquestionsInput.fromJson(
              json['question'] as Map<String, dynamic>),
      exam: json['exam'] == null
          ? null
          : Input$ExamUpdateOneRequiredWithoutExamquestionsInput.fromJson(
              json['exam'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ExamQuestionUpdateInputToJson(
        Input$ExamQuestionUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'question': instance.question?.toJson(),
      'exam': instance.exam?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ExamQuestionUpdateManyMutationInput
    _$Input$ExamQuestionUpdateManyMutationInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionUpdateManyMutationInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamQuestionUpdateManyMutationInputToJson(
        Input$ExamQuestionUpdateManyMutationInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ExamQuestionUpdateManyWithoutExamInput
    _$Input$ExamQuestionUpdateManyWithoutExamInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionUpdateManyWithoutExamInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionCreateWithoutExamInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionCreateOrConnectWithoutExamInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionUpsertWithWhereUniqueWithoutExamInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ExamQuestionCreateManyExamInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionUpdateWithWhereUniqueWithoutExamInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionUpdateManyWithWhereWithoutExamInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$ExamQuestionUpdateManyWithoutExamInputToJson(
        Input$ExamQuestionUpdateManyWithoutExamInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$ExamQuestionUpdateManyWithoutQuestionInput
    _$Input$ExamQuestionUpdateManyWithoutQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionUpdateManyWithoutQuestionInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionCreateWithoutQuestionInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionCreateOrConnectWithoutQuestionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionUpsertWithWhereUniqueWithoutQuestionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ExamQuestionCreateManyQuestionInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionUpdateWithWhereUniqueWithoutQuestionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionUpdateManyWithWhereWithoutQuestionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamQuestionScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$ExamQuestionUpdateManyWithoutQuestionInputToJson(
        Input$ExamQuestionUpdateManyWithoutQuestionInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$ExamQuestionUpdateManyWithWhereWithoutExamInput
    _$Input$ExamQuestionUpdateManyWithWhereWithoutExamInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionUpdateManyWithWhereWithoutExamInput(
          where: Input$ExamQuestionScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$ExamQuestionUncheckedUpdateManyWithoutExamquestionsInput
              .fromJson(json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ExamQuestionUpdateManyWithWhereWithoutExamInputToJson(
            Input$ExamQuestionUpdateManyWithWhereWithoutExamInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$ExamQuestionUpdateManyWithWhereWithoutQuestionInput
    _$Input$ExamQuestionUpdateManyWithWhereWithoutQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionUpdateManyWithWhereWithoutQuestionInput(
          where: Input$ExamQuestionScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$ExamQuestionUncheckedUpdateManyWithoutExamquestionsInput
              .fromJson(json['data'] as Map<String, dynamic>),
        );

Map<String,
    dynamic> _$Input$ExamQuestionUpdateManyWithWhereWithoutQuestionInputToJson(
        Input$ExamQuestionUpdateManyWithWhereWithoutQuestionInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

Input$ExamQuestionUpdateWithoutExamInput
    _$Input$ExamQuestionUpdateWithoutExamInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionUpdateWithoutExamInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          question: json['question'] == null
              ? null
              : Input$QuestionUpdateOneRequiredWithoutExamquestionsInput
                  .fromJson(json['question'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamQuestionUpdateWithoutExamInputToJson(
        Input$ExamQuestionUpdateWithoutExamInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'question': instance.question?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ExamQuestionUpdateWithoutQuestionInput
    _$Input$ExamQuestionUpdateWithoutQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionUpdateWithoutQuestionInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          exam: json['exam'] == null
              ? null
              : Input$ExamUpdateOneRequiredWithoutExamquestionsInput.fromJson(
                  json['exam'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamQuestionUpdateWithoutQuestionInputToJson(
        Input$ExamQuestionUpdateWithoutQuestionInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'exam': instance.exam?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ExamQuestionUpdateWithWhereUniqueWithoutExamInput
    _$Input$ExamQuestionUpdateWithWhereUniqueWithoutExamInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionUpdateWithWhereUniqueWithoutExamInput(
          where: Input$ExamQuestionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$ExamQuestionUncheckedUpdateWithoutExamInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ExamQuestionUpdateWithWhereUniqueWithoutExamInputToJson(
            Input$ExamQuestionUpdateWithWhereUniqueWithoutExamInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$ExamQuestionUpdateWithWhereUniqueWithoutQuestionInput
    _$Input$ExamQuestionUpdateWithWhereUniqueWithoutQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionUpdateWithWhereUniqueWithoutQuestionInput(
          where: Input$ExamQuestionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$ExamQuestionUncheckedUpdateWithoutQuestionInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ExamQuestionUpdateWithWhereUniqueWithoutQuestionInputToJson(
            Input$ExamQuestionUpdateWithWhereUniqueWithoutQuestionInput
                instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$ExamQuestionUpsertWithWhereUniqueWithoutExamInput
    _$Input$ExamQuestionUpsertWithWhereUniqueWithoutExamInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionUpsertWithWhereUniqueWithoutExamInput(
          where: Input$ExamQuestionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: Input$ExamQuestionUncheckedUpdateWithoutExamInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$ExamQuestionUncheckedCreateWithoutExamInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ExamQuestionUpsertWithWhereUniqueWithoutExamInputToJson(
            Input$ExamQuestionUpsertWithWhereUniqueWithoutExamInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

Input$ExamQuestionUpsertWithWhereUniqueWithoutQuestionInput
    _$Input$ExamQuestionUpsertWithWhereUniqueWithoutQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamQuestionUpsertWithWhereUniqueWithoutQuestionInput(
          where: Input$ExamQuestionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update:
              Input$ExamQuestionUncheckedUpdateWithoutQuestionInput.fromJson(
                  json['update'] as Map<String, dynamic>),
          create:
              Input$ExamQuestionUncheckedCreateWithoutQuestionInput.fromJson(
                  json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ExamQuestionUpsertWithWhereUniqueWithoutQuestionInputToJson(
            Input$ExamQuestionUpsertWithWhereUniqueWithoutQuestionInput
                instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

Input$ExamQuestionWhereInput _$Input$ExamQuestionWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamQuestionWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ExamQuestionWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ExamQuestionWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ExamQuestionWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      questionId: json['questionId'] == null
          ? null
          : Input$StringFilter.fromJson(
              json['questionId'] as Map<String, dynamic>),
      question: json['question'] == null
          ? null
          : Input$QuestionWhereInput.fromJson(
              json['question'] as Map<String, dynamic>),
      examId: json['examId'] == null
          ? null
          : Input$StringFilter.fromJson(json['examId'] as Map<String, dynamic>),
      exam: json['exam'] == null
          ? null
          : Input$ExamWhereInput.fromJson(json['exam'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ExamQuestionWhereInputToJson(
        Input$ExamQuestionWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'questionId': instance.questionId?.toJson(),
      'question': instance.question?.toJson(),
      'examId': instance.examId?.toJson(),
      'exam': instance.exam?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ExamQuestionWhereUniqueInput _$Input$ExamQuestionWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamQuestionWhereUniqueInput(
      id: json['id'] as String?,
    );

Map<String, dynamic> _$Input$ExamQuestionWhereUniqueInputToJson(
        Input$ExamQuestionWhereUniqueInput instance) =>
    <String, dynamic>{
      'id': instance.id,
    };

Input$ExamRelationFilter _$Input$ExamRelationFilterFromJson(
        Map<String, dynamic> json) =>
    Input$ExamRelationFilter(
      $is: json['is'] == null
          ? null
          : Input$ExamWhereInput.fromJson(json['is'] as Map<String, dynamic>),
      isNot: json['isNot'] == null
          ? null
          : Input$ExamWhereInput.fromJson(
              json['isNot'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ExamRelationFilterToJson(
        Input$ExamRelationFilter instance) =>
    <String, dynamic>{
      'is': instance.$is?.toJson(),
      'isNot': instance.isNot?.toJson(),
    };

Input$ExamScalarWhereInput _$Input$ExamScalarWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamScalarWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ExamScalarWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ExamScalarWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ExamScalarWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : Input$StringFilter.fromJson(json['userId'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ExamScalarWhereInputToJson(
        Input$ExamScalarWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'userId': instance.userId?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ExamScalarWhereWithAggregatesInput
    _$Input$ExamScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          OR: (json['OR'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          NOT: (json['NOT'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          id: json['id'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['name'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['userId'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamScalarWhereWithAggregatesInputToJson(
        Input$ExamScalarWhereWithAggregatesInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'userId': instance.userId?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ExamSessionAvgOrderByAggregateInput
    _$Input$ExamSessionAvgOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionAvgOrderByAggregateInput(
          maxPlayer: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['maxPlayer'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ExamSessionAvgOrderByAggregateInputToJson(
        Input$ExamSessionAvgOrderByAggregateInput instance) =>
    <String, dynamic>{
      'maxPlayer': _$Enum$SortOrderEnumMap[instance.maxPlayer],
    };

Input$ExamSessionCountOrderByAggregateInput
    _$Input$ExamSessionCountOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionCountOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          openAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['openAt'],
              unknownValue: Enum$SortOrder.$unknown),
          closeAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['closeAt'],
              unknownValue: Enum$SortOrder.$unknown),
          maxPlayer: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['maxPlayer'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ExamSessionCountOrderByAggregateInputToJson(
        Input$ExamSessionCountOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'openAt': _$Enum$SortOrderEnumMap[instance.openAt],
      'closeAt': _$Enum$SortOrderEnumMap[instance.closeAt],
      'maxPlayer': _$Enum$SortOrderEnumMap[instance.maxPlayer],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
    };

Input$ExamSessionCreateInput _$Input$ExamSessionCreateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamSessionCreateInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      openAt: json['openAt'] as String?,
      closeAt: json['closeAt'] as String?,
      maxPlayer: json['maxPlayer'] as int?,
      user: Input$UserCreateNestedOneWithoutExamsessionsInput.fromJson(
          json['user'] as Map<String, dynamic>),
      examAnswers: json['examAnswers'] == null
          ? null
          : Input$ExamAnswerCreateNestedManyWithoutExamSessionInput.fromJson(
              json['examAnswers'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ExamSessionCreateInputToJson(
        Input$ExamSessionCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'openAt': instance.openAt,
      'closeAt': instance.closeAt,
      'maxPlayer': instance.maxPlayer,
      'user': instance.user.toJson(),
      'examAnswers': instance.examAnswers?.toJson(),
    };

Input$ExamSessionCreateManyInput _$Input$ExamSessionCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamSessionCreateManyInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      openAt: json['openAt'] as String?,
      closeAt: json['closeAt'] as String?,
      maxPlayer: json['maxPlayer'] as int?,
      userId: json['userId'] as String,
    );

Map<String, dynamic> _$Input$ExamSessionCreateManyInputToJson(
        Input$ExamSessionCreateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'openAt': instance.openAt,
      'closeAt': instance.closeAt,
      'maxPlayer': instance.maxPlayer,
      'userId': instance.userId,
    };

Input$ExamSessionCreateManyUserInput
    _$Input$ExamSessionCreateManyUserInputFromJson(Map<String, dynamic> json) =>
        Input$ExamSessionCreateManyUserInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          openAt: json['openAt'] as String?,
          closeAt: json['closeAt'] as String?,
          maxPlayer: json['maxPlayer'] as int?,
        );

Map<String, dynamic> _$Input$ExamSessionCreateManyUserInputToJson(
        Input$ExamSessionCreateManyUserInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'openAt': instance.openAt,
      'closeAt': instance.closeAt,
      'maxPlayer': instance.maxPlayer,
    };

Input$ExamSessionCreateManyUserInputEnvelope
    _$Input$ExamSessionCreateManyUserInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionCreateManyUserInputEnvelope(
          data: Input$ExamSessionCreateManyUserInput.fromJson(
              json['data'] as Map<String, dynamic>),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$Input$ExamSessionCreateManyUserInputEnvelopeToJson(
        Input$ExamSessionCreateManyUserInputEnvelope instance) =>
    <String, dynamic>{
      'data': instance.data.toJson(),
      'skipDuplicates': instance.skipDuplicates,
    };

Input$ExamSessionCreateNestedManyWithoutUserInput
    _$Input$ExamSessionCreateNestedManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionCreateNestedManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ExamSessionCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$ExamSessionCreateNestedManyWithoutUserInputToJson(
        Input$ExamSessionCreateNestedManyWithoutUserInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$ExamSessionCreateNestedOneWithoutExamAnswersInput
    _$Input$ExamSessionCreateNestedOneWithoutExamAnswersInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionCreateNestedOneWithoutExamAnswersInput(
          create: json['create'] == null
              ? null
              : Input$ExamSessionUncheckedCreateWithoutExamAnswersInput
                  .fromJson(json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$ExamSessionCreateOrConnectWithoutExamAnswersInput
                  .fromJson(json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$ExamSessionWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ExamSessionCreateNestedOneWithoutExamAnswersInputToJson(
            Input$ExamSessionCreateNestedOneWithoutExamAnswersInput instance) =>
        <String, dynamic>{
          'create': instance.create?.toJson(),
          'connectOrCreate': instance.connectOrCreate?.toJson(),
          'connect': instance.connect?.toJson(),
        };

Input$ExamSessionCreateOrConnectWithoutExamAnswersInput
    _$Input$ExamSessionCreateOrConnectWithoutExamAnswersInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionCreateOrConnectWithoutExamAnswersInput(
          where: Input$ExamSessionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create:
              Input$ExamSessionUncheckedCreateWithoutExamAnswersInput.fromJson(
                  json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ExamSessionCreateOrConnectWithoutExamAnswersInputToJson(
            Input$ExamSessionCreateOrConnectWithoutExamAnswersInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'create': instance.create.toJson(),
        };

Input$ExamSessionCreateOrConnectWithoutUserInput
    _$Input$ExamSessionCreateOrConnectWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionCreateOrConnectWithoutUserInput(
          where: Input$ExamSessionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$ExamSessionUncheckedCreateWithoutUserInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamSessionCreateOrConnectWithoutUserInputToJson(
        Input$ExamSessionCreateOrConnectWithoutUserInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$ExamSessionCreateWithoutExamAnswersInput
    _$Input$ExamSessionCreateWithoutExamAnswersInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionCreateWithoutExamAnswersInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          openAt: json['openAt'] as String?,
          closeAt: json['closeAt'] as String?,
          maxPlayer: json['maxPlayer'] as int?,
          user: Input$UserCreateNestedOneWithoutExamsessionsInput.fromJson(
              json['user'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamSessionCreateWithoutExamAnswersInputToJson(
        Input$ExamSessionCreateWithoutExamAnswersInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'openAt': instance.openAt,
      'closeAt': instance.closeAt,
      'maxPlayer': instance.maxPlayer,
      'user': instance.user.toJson(),
    };

Input$ExamSessionCreateWithoutUserInput
    _$Input$ExamSessionCreateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionCreateWithoutUserInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          openAt: json['openAt'] as String?,
          closeAt: json['closeAt'] as String?,
          maxPlayer: json['maxPlayer'] as int?,
          examAnswers: json['examAnswers'] == null
              ? null
              : Input$ExamAnswerCreateNestedManyWithoutExamSessionInput
                  .fromJson(json['examAnswers'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamSessionCreateWithoutUserInputToJson(
        Input$ExamSessionCreateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'openAt': instance.openAt,
      'closeAt': instance.closeAt,
      'maxPlayer': instance.maxPlayer,
      'examAnswers': instance.examAnswers?.toJson(),
    };

Input$ExamSessionListRelationFilter
    _$Input$ExamSessionListRelationFilterFromJson(Map<String, dynamic> json) =>
        Input$ExamSessionListRelationFilter(
          every: json['every'] == null
              ? null
              : Input$ExamSessionWhereInput.fromJson(
                  json['every'] as Map<String, dynamic>),
          some: json['some'] == null
              ? null
              : Input$ExamSessionWhereInput.fromJson(
                  json['some'] as Map<String, dynamic>),
          none: json['none'] == null
              ? null
              : Input$ExamSessionWhereInput.fromJson(
                  json['none'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamSessionListRelationFilterToJson(
        Input$ExamSessionListRelationFilter instance) =>
    <String, dynamic>{
      'every': instance.every?.toJson(),
      'some': instance.some?.toJson(),
      'none': instance.none?.toJson(),
    };

Input$ExamSessionMaxOrderByAggregateInput
    _$Input$ExamSessionMaxOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionMaxOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          openAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['openAt'],
              unknownValue: Enum$SortOrder.$unknown),
          closeAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['closeAt'],
              unknownValue: Enum$SortOrder.$unknown),
          maxPlayer: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['maxPlayer'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ExamSessionMaxOrderByAggregateInputToJson(
        Input$ExamSessionMaxOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'openAt': _$Enum$SortOrderEnumMap[instance.openAt],
      'closeAt': _$Enum$SortOrderEnumMap[instance.closeAt],
      'maxPlayer': _$Enum$SortOrderEnumMap[instance.maxPlayer],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
    };

Input$ExamSessionMinOrderByAggregateInput
    _$Input$ExamSessionMinOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionMinOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          openAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['openAt'],
              unknownValue: Enum$SortOrder.$unknown),
          closeAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['closeAt'],
              unknownValue: Enum$SortOrder.$unknown),
          maxPlayer: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['maxPlayer'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ExamSessionMinOrderByAggregateInputToJson(
        Input$ExamSessionMinOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'openAt': _$Enum$SortOrderEnumMap[instance.openAt],
      'closeAt': _$Enum$SortOrderEnumMap[instance.closeAt],
      'maxPlayer': _$Enum$SortOrderEnumMap[instance.maxPlayer],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
    };

Input$ExamSessionOrderByRelationAggregateInput
    _$Input$ExamSessionOrderByRelationAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionOrderByRelationAggregateInput(
          $_count: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['_count'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ExamSessionOrderByRelationAggregateInputToJson(
        Input$ExamSessionOrderByRelationAggregateInput instance) =>
    <String, dynamic>{
      '_count': _$Enum$SortOrderEnumMap[instance.$_count],
    };

Input$ExamSessionOrderByWithAggregationInput
    _$Input$ExamSessionOrderByWithAggregationInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionOrderByWithAggregationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          openAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['openAt'],
              unknownValue: Enum$SortOrder.$unknown),
          closeAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['closeAt'],
              unknownValue: Enum$SortOrder.$unknown),
          maxPlayer: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['maxPlayer'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          $_count: json['_count'] == null
              ? null
              : Input$ExamSessionCountOrderByAggregateInput.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_avg: json['_avg'] == null
              ? null
              : Input$ExamSessionAvgOrderByAggregateInput.fromJson(
                  json['_avg'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$ExamSessionMaxOrderByAggregateInput.fromJson(
                  json['_max'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$ExamSessionMinOrderByAggregateInput.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_sum: json['_sum'] == null
              ? null
              : Input$ExamSessionSumOrderByAggregateInput.fromJson(
                  json['_sum'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamSessionOrderByWithAggregationInputToJson(
        Input$ExamSessionOrderByWithAggregationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'openAt': _$Enum$SortOrderEnumMap[instance.openAt],
      'closeAt': _$Enum$SortOrderEnumMap[instance.closeAt],
      'maxPlayer': _$Enum$SortOrderEnumMap[instance.maxPlayer],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      '_count': instance.$_count?.toJson(),
      '_avg': instance.$_avg?.toJson(),
      '_max': instance.$_max?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_sum': instance.$_sum?.toJson(),
    };

Input$ExamSessionOrderByWithRelationInput
    _$Input$ExamSessionOrderByWithRelationInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionOrderByWithRelationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          openAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['openAt'],
              unknownValue: Enum$SortOrder.$unknown),
          closeAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['closeAt'],
              unknownValue: Enum$SortOrder.$unknown),
          maxPlayer: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['maxPlayer'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          user: json['user'] == null
              ? null
              : Input$UserOrderByWithRelationInput.fromJson(
                  json['user'] as Map<String, dynamic>),
          examAnswers: json['examAnswers'] == null
              ? null
              : Input$ExamAnswerOrderByRelationAggregateInput.fromJson(
                  json['examAnswers'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamSessionOrderByWithRelationInputToJson(
        Input$ExamSessionOrderByWithRelationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'openAt': _$Enum$SortOrderEnumMap[instance.openAt],
      'closeAt': _$Enum$SortOrderEnumMap[instance.closeAt],
      'maxPlayer': _$Enum$SortOrderEnumMap[instance.maxPlayer],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'user': instance.user?.toJson(),
      'examAnswers': instance.examAnswers?.toJson(),
    };

Input$ExamSessionRelationFilter _$Input$ExamSessionRelationFilterFromJson(
        Map<String, dynamic> json) =>
    Input$ExamSessionRelationFilter(
      $is: json['is'] == null
          ? null
          : Input$ExamSessionWhereInput.fromJson(
              json['is'] as Map<String, dynamic>),
      isNot: json['isNot'] == null
          ? null
          : Input$ExamSessionWhereInput.fromJson(
              json['isNot'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ExamSessionRelationFilterToJson(
        Input$ExamSessionRelationFilter instance) =>
    <String, dynamic>{
      'is': instance.$is?.toJson(),
      'isNot': instance.isNot?.toJson(),
    };

Input$ExamSessionScalarWhereInput _$Input$ExamSessionScalarWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamSessionScalarWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ExamSessionScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ExamSessionScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ExamSessionScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      openAt: json['openAt'] == null
          ? null
          : Input$DateTimeNullableFilter.fromJson(
              json['openAt'] as Map<String, dynamic>),
      closeAt: json['closeAt'] == null
          ? null
          : Input$DateTimeNullableFilter.fromJson(
              json['closeAt'] as Map<String, dynamic>),
      maxPlayer: json['maxPlayer'] == null
          ? null
          : Input$IntNullableFilter.fromJson(
              json['maxPlayer'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : Input$StringFilter.fromJson(json['userId'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ExamSessionScalarWhereInputToJson(
        Input$ExamSessionScalarWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'openAt': instance.openAt?.toJson(),
      'closeAt': instance.closeAt?.toJson(),
      'maxPlayer': instance.maxPlayer?.toJson(),
      'userId': instance.userId?.toJson(),
    };

Input$ExamSessionScalarWhereWithAggregatesInput
    _$Input$ExamSessionScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          OR: (json['OR'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          NOT: (json['NOT'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          id: json['id'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['name'] as Map<String, dynamic>),
          openAt: json['openAt'] == null
              ? null
              : Input$DateTimeNullableWithAggregatesFilter.fromJson(
                  json['openAt'] as Map<String, dynamic>),
          closeAt: json['closeAt'] == null
              ? null
              : Input$DateTimeNullableWithAggregatesFilter.fromJson(
                  json['closeAt'] as Map<String, dynamic>),
          maxPlayer: json['maxPlayer'] == null
              ? null
              : Input$IntNullableWithAggregatesFilter.fromJson(
                  json['maxPlayer'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['userId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamSessionScalarWhereWithAggregatesInputToJson(
        Input$ExamSessionScalarWhereWithAggregatesInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'openAt': instance.openAt?.toJson(),
      'closeAt': instance.closeAt?.toJson(),
      'maxPlayer': instance.maxPlayer?.toJson(),
      'userId': instance.userId?.toJson(),
    };

Input$ExamSessionSumOrderByAggregateInput
    _$Input$ExamSessionSumOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionSumOrderByAggregateInput(
          maxPlayer: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['maxPlayer'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ExamSessionSumOrderByAggregateInputToJson(
        Input$ExamSessionSumOrderByAggregateInput instance) =>
    <String, dynamic>{
      'maxPlayer': _$Enum$SortOrderEnumMap[instance.maxPlayer],
    };

Input$ExamSessionUncheckedCreateInput
    _$Input$ExamSessionUncheckedCreateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionUncheckedCreateInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          openAt: json['openAt'] as String?,
          closeAt: json['closeAt'] as String?,
          maxPlayer: json['maxPlayer'] as int?,
          userId: json['userId'] as String,
          examAnswers: json['examAnswers'] == null
              ? null
              : Input$ExamAnswerUncheckedCreateNestedManyWithoutExamSessionInput
                  .fromJson(json['examAnswers'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamSessionUncheckedCreateInputToJson(
        Input$ExamSessionUncheckedCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'openAt': instance.openAt,
      'closeAt': instance.closeAt,
      'maxPlayer': instance.maxPlayer,
      'userId': instance.userId,
      'examAnswers': instance.examAnswers?.toJson(),
    };

Input$ExamSessionUncheckedCreateNestedManyWithoutUserInput
    _$Input$ExamSessionUncheckedCreateNestedManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionUncheckedCreateNestedManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ExamSessionCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String,
    dynamic> _$Input$ExamSessionUncheckedCreateNestedManyWithoutUserInputToJson(
        Input$ExamSessionUncheckedCreateNestedManyWithoutUserInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$ExamSessionUncheckedCreateWithoutExamAnswersInput
    _$Input$ExamSessionUncheckedCreateWithoutExamAnswersInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionUncheckedCreateWithoutExamAnswersInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          openAt: json['openAt'] as String?,
          closeAt: json['closeAt'] as String?,
          maxPlayer: json['maxPlayer'] as int?,
          userId: json['userId'] as String,
        );

Map<String, dynamic>
    _$Input$ExamSessionUncheckedCreateWithoutExamAnswersInputToJson(
            Input$ExamSessionUncheckedCreateWithoutExamAnswersInput instance) =>
        <String, dynamic>{
          'id': instance.id,
          'name': instance.name,
          'openAt': instance.openAt,
          'closeAt': instance.closeAt,
          'maxPlayer': instance.maxPlayer,
          'userId': instance.userId,
        };

Input$ExamSessionUncheckedCreateWithoutUserInput
    _$Input$ExamSessionUncheckedCreateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionUncheckedCreateWithoutUserInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          openAt: json['openAt'] as String?,
          closeAt: json['closeAt'] as String?,
          maxPlayer: json['maxPlayer'] as int?,
          examAnswers: json['examAnswers'] == null
              ? null
              : Input$ExamAnswerUncheckedCreateNestedManyWithoutExamSessionInput
                  .fromJson(json['examAnswers'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamSessionUncheckedCreateWithoutUserInputToJson(
        Input$ExamSessionUncheckedCreateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'openAt': instance.openAt,
      'closeAt': instance.closeAt,
      'maxPlayer': instance.maxPlayer,
      'examAnswers': instance.examAnswers?.toJson(),
    };

Input$ExamSessionUncheckedUpdateInput
    _$Input$ExamSessionUncheckedUpdateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionUncheckedUpdateInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          openAt: json['openAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['openAt'] as Map<String, dynamic>),
          closeAt: json['closeAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['closeAt'] as Map<String, dynamic>),
          maxPlayer: json['maxPlayer'] == null
              ? null
              : Input$NullableIntFieldUpdateOperationsInput.fromJson(
                  json['maxPlayer'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          examAnswers: json['examAnswers'] == null
              ? null
              : Input$ExamAnswerUncheckedUpdateManyWithoutExamSessionInput
                  .fromJson(json['examAnswers'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamSessionUncheckedUpdateInputToJson(
        Input$ExamSessionUncheckedUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'openAt': instance.openAt?.toJson(),
      'closeAt': instance.closeAt?.toJson(),
      'maxPlayer': instance.maxPlayer?.toJson(),
      'userId': instance.userId?.toJson(),
      'examAnswers': instance.examAnswers?.toJson(),
    };

Input$ExamSessionUncheckedUpdateManyInput
    _$Input$ExamSessionUncheckedUpdateManyInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionUncheckedUpdateManyInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          openAt: json['openAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['openAt'] as Map<String, dynamic>),
          closeAt: json['closeAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['closeAt'] as Map<String, dynamic>),
          maxPlayer: json['maxPlayer'] == null
              ? null
              : Input$NullableIntFieldUpdateOperationsInput.fromJson(
                  json['maxPlayer'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamSessionUncheckedUpdateManyInputToJson(
        Input$ExamSessionUncheckedUpdateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'openAt': instance.openAt?.toJson(),
      'closeAt': instance.closeAt?.toJson(),
      'maxPlayer': instance.maxPlayer?.toJson(),
      'userId': instance.userId?.toJson(),
    };

Input$ExamSessionUncheckedUpdateManyWithoutExamsessionsInput
    _$Input$ExamSessionUncheckedUpdateManyWithoutExamsessionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionUncheckedUpdateManyWithoutExamsessionsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          openAt: json['openAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['openAt'] as Map<String, dynamic>),
          closeAt: json['closeAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['closeAt'] as Map<String, dynamic>),
          maxPlayer: json['maxPlayer'] == null
              ? null
              : Input$NullableIntFieldUpdateOperationsInput.fromJson(
                  json['maxPlayer'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ExamSessionUncheckedUpdateManyWithoutExamsessionsInputToJson(
            Input$ExamSessionUncheckedUpdateManyWithoutExamsessionsInput
                instance) =>
        <String, dynamic>{
          'id': instance.id?.toJson(),
          'name': instance.name?.toJson(),
          'openAt': instance.openAt?.toJson(),
          'closeAt': instance.closeAt?.toJson(),
          'maxPlayer': instance.maxPlayer?.toJson(),
        };

Input$ExamSessionUncheckedUpdateManyWithoutUserInput
    _$Input$ExamSessionUncheckedUpdateManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionUncheckedUpdateManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionUpsertWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ExamSessionCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionUpdateWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionUpdateManyWithWhereWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$ExamSessionUncheckedUpdateManyWithoutUserInputToJson(
            Input$ExamSessionUncheckedUpdateManyWithoutUserInput instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'set': instance.$set?.map((e) => e?.toJson()).toList(),
          'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
          'delete': instance.delete?.map((e) => e?.toJson()).toList(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
          'update': instance.update?.map((e) => e?.toJson()).toList(),
          'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
          'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
        };

Input$ExamSessionUncheckedUpdateWithoutExamAnswersInput
    _$Input$ExamSessionUncheckedUpdateWithoutExamAnswersInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionUncheckedUpdateWithoutExamAnswersInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          openAt: json['openAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['openAt'] as Map<String, dynamic>),
          closeAt: json['closeAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['closeAt'] as Map<String, dynamic>),
          maxPlayer: json['maxPlayer'] == null
              ? null
              : Input$NullableIntFieldUpdateOperationsInput.fromJson(
                  json['maxPlayer'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ExamSessionUncheckedUpdateWithoutExamAnswersInputToJson(
            Input$ExamSessionUncheckedUpdateWithoutExamAnswersInput instance) =>
        <String, dynamic>{
          'id': instance.id?.toJson(),
          'name': instance.name?.toJson(),
          'openAt': instance.openAt?.toJson(),
          'closeAt': instance.closeAt?.toJson(),
          'maxPlayer': instance.maxPlayer?.toJson(),
          'userId': instance.userId?.toJson(),
        };

Input$ExamSessionUncheckedUpdateWithoutUserInput
    _$Input$ExamSessionUncheckedUpdateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionUncheckedUpdateWithoutUserInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          openAt: json['openAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['openAt'] as Map<String, dynamic>),
          closeAt: json['closeAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['closeAt'] as Map<String, dynamic>),
          maxPlayer: json['maxPlayer'] == null
              ? null
              : Input$NullableIntFieldUpdateOperationsInput.fromJson(
                  json['maxPlayer'] as Map<String, dynamic>),
          examAnswers: json['examAnswers'] == null
              ? null
              : Input$ExamAnswerUncheckedUpdateManyWithoutExamSessionInput
                  .fromJson(json['examAnswers'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamSessionUncheckedUpdateWithoutUserInputToJson(
        Input$ExamSessionUncheckedUpdateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'openAt': instance.openAt?.toJson(),
      'closeAt': instance.closeAt?.toJson(),
      'maxPlayer': instance.maxPlayer?.toJson(),
      'examAnswers': instance.examAnswers?.toJson(),
    };

Input$ExamSessionUpdateInput _$Input$ExamSessionUpdateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamSessionUpdateInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      openAt: json['openAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['openAt'] as Map<String, dynamic>),
      closeAt: json['closeAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['closeAt'] as Map<String, dynamic>),
      maxPlayer: json['maxPlayer'] == null
          ? null
          : Input$NullableIntFieldUpdateOperationsInput.fromJson(
              json['maxPlayer'] as Map<String, dynamic>),
      user: json['user'] == null
          ? null
          : Input$UserUpdateOneRequiredWithoutExamsessionsInput.fromJson(
              json['user'] as Map<String, dynamic>),
      examAnswers: json['examAnswers'] == null
          ? null
          : Input$ExamAnswerUpdateManyWithoutExamSessionInput.fromJson(
              json['examAnswers'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ExamSessionUpdateInputToJson(
        Input$ExamSessionUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'openAt': instance.openAt?.toJson(),
      'closeAt': instance.closeAt?.toJson(),
      'maxPlayer': instance.maxPlayer?.toJson(),
      'user': instance.user?.toJson(),
      'examAnswers': instance.examAnswers?.toJson(),
    };

Input$ExamSessionUpdateManyMutationInput
    _$Input$ExamSessionUpdateManyMutationInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionUpdateManyMutationInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          openAt: json['openAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['openAt'] as Map<String, dynamic>),
          closeAt: json['closeAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['closeAt'] as Map<String, dynamic>),
          maxPlayer: json['maxPlayer'] == null
              ? null
              : Input$NullableIntFieldUpdateOperationsInput.fromJson(
                  json['maxPlayer'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamSessionUpdateManyMutationInputToJson(
        Input$ExamSessionUpdateManyMutationInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'openAt': instance.openAt?.toJson(),
      'closeAt': instance.closeAt?.toJson(),
      'maxPlayer': instance.maxPlayer?.toJson(),
    };

Input$ExamSessionUpdateManyWithoutUserInput
    _$Input$ExamSessionUpdateManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionUpdateManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionUpsertWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ExamSessionCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionUpdateWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionUpdateManyWithWhereWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamSessionScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$ExamSessionUpdateManyWithoutUserInputToJson(
        Input$ExamSessionUpdateManyWithoutUserInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$ExamSessionUpdateManyWithWhereWithoutUserInput
    _$Input$ExamSessionUpdateManyWithWhereWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionUpdateManyWithWhereWithoutUserInput(
          where: Input$ExamSessionScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$ExamSessionUncheckedUpdateManyWithoutExamsessionsInput
              .fromJson(json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ExamSessionUpdateManyWithWhereWithoutUserInputToJson(
            Input$ExamSessionUpdateManyWithWhereWithoutUserInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$ExamSessionUpdateOneWithoutExamAnswersInput
    _$Input$ExamSessionUpdateOneWithoutExamAnswersInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionUpdateOneWithoutExamAnswersInput(
          create: json['create'] == null
              ? null
              : Input$ExamSessionUncheckedCreateWithoutExamAnswersInput
                  .fromJson(json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$ExamSessionCreateOrConnectWithoutExamAnswersInput
                  .fromJson(json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : Input$ExamSessionUpsertWithoutExamAnswersInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          disconnect: json['disconnect'] as bool?,
          delete: json['delete'] as bool?,
          connect: json['connect'] == null
              ? null
              : Input$ExamSessionWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : Input$ExamSessionUncheckedUpdateWithoutExamAnswersInput
                  .fromJson(json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamSessionUpdateOneWithoutExamAnswersInputToJson(
        Input$ExamSessionUpdateOneWithoutExamAnswersInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'upsert': instance.upsert?.toJson(),
      'disconnect': instance.disconnect,
      'delete': instance.delete,
      'connect': instance.connect?.toJson(),
      'update': instance.update?.toJson(),
    };

Input$ExamSessionUpdateWithoutExamAnswersInput
    _$Input$ExamSessionUpdateWithoutExamAnswersInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionUpdateWithoutExamAnswersInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          openAt: json['openAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['openAt'] as Map<String, dynamic>),
          closeAt: json['closeAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['closeAt'] as Map<String, dynamic>),
          maxPlayer: json['maxPlayer'] == null
              ? null
              : Input$NullableIntFieldUpdateOperationsInput.fromJson(
                  json['maxPlayer'] as Map<String, dynamic>),
          user: json['user'] == null
              ? null
              : Input$UserUpdateOneRequiredWithoutExamsessionsInput.fromJson(
                  json['user'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamSessionUpdateWithoutExamAnswersInputToJson(
        Input$ExamSessionUpdateWithoutExamAnswersInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'openAt': instance.openAt?.toJson(),
      'closeAt': instance.closeAt?.toJson(),
      'maxPlayer': instance.maxPlayer?.toJson(),
      'user': instance.user?.toJson(),
    };

Input$ExamSessionUpdateWithoutUserInput
    _$Input$ExamSessionUpdateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionUpdateWithoutUserInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          openAt: json['openAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['openAt'] as Map<String, dynamic>),
          closeAt: json['closeAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['closeAt'] as Map<String, dynamic>),
          maxPlayer: json['maxPlayer'] == null
              ? null
              : Input$NullableIntFieldUpdateOperationsInput.fromJson(
                  json['maxPlayer'] as Map<String, dynamic>),
          examAnswers: json['examAnswers'] == null
              ? null
              : Input$ExamAnswerUpdateManyWithoutExamSessionInput.fromJson(
                  json['examAnswers'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamSessionUpdateWithoutUserInputToJson(
        Input$ExamSessionUpdateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'openAt': instance.openAt?.toJson(),
      'closeAt': instance.closeAt?.toJson(),
      'maxPlayer': instance.maxPlayer?.toJson(),
      'examAnswers': instance.examAnswers?.toJson(),
    };

Input$ExamSessionUpdateWithWhereUniqueWithoutUserInput
    _$Input$ExamSessionUpdateWithWhereUniqueWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionUpdateWithWhereUniqueWithoutUserInput(
          where: Input$ExamSessionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$ExamSessionUncheckedUpdateWithoutUserInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ExamSessionUpdateWithWhereUniqueWithoutUserInputToJson(
            Input$ExamSessionUpdateWithWhereUniqueWithoutUserInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$ExamSessionUpsertWithoutExamAnswersInput
    _$Input$ExamSessionUpsertWithoutExamAnswersInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionUpsertWithoutExamAnswersInput(
          update:
              Input$ExamSessionUncheckedUpdateWithoutExamAnswersInput.fromJson(
                  json['update'] as Map<String, dynamic>),
          create:
              Input$ExamSessionUncheckedCreateWithoutExamAnswersInput.fromJson(
                  json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamSessionUpsertWithoutExamAnswersInputToJson(
        Input$ExamSessionUpsertWithoutExamAnswersInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$ExamSessionUpsertWithWhereUniqueWithoutUserInput
    _$Input$ExamSessionUpsertWithWhereUniqueWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamSessionUpsertWithWhereUniqueWithoutUserInput(
          where: Input$ExamSessionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: Input$ExamSessionUncheckedUpdateWithoutUserInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$ExamSessionUncheckedCreateWithoutUserInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ExamSessionUpsertWithWhereUniqueWithoutUserInputToJson(
            Input$ExamSessionUpsertWithWhereUniqueWithoutUserInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

Input$ExamSessionWhereInput _$Input$ExamSessionWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamSessionWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ExamSessionWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ExamSessionWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ExamSessionWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      openAt: json['openAt'] == null
          ? null
          : Input$DateTimeNullableFilter.fromJson(
              json['openAt'] as Map<String, dynamic>),
      closeAt: json['closeAt'] == null
          ? null
          : Input$DateTimeNullableFilter.fromJson(
              json['closeAt'] as Map<String, dynamic>),
      maxPlayer: json['maxPlayer'] == null
          ? null
          : Input$IntNullableFilter.fromJson(
              json['maxPlayer'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : Input$StringFilter.fromJson(json['userId'] as Map<String, dynamic>),
      user: json['user'] == null
          ? null
          : Input$UserWhereInput.fromJson(json['user'] as Map<String, dynamic>),
      examAnswers: json['examAnswers'] == null
          ? null
          : Input$ExamAnswerListRelationFilter.fromJson(
              json['examAnswers'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ExamSessionWhereInputToJson(
        Input$ExamSessionWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'openAt': instance.openAt?.toJson(),
      'closeAt': instance.closeAt?.toJson(),
      'maxPlayer': instance.maxPlayer?.toJson(),
      'userId': instance.userId?.toJson(),
      'user': instance.user?.toJson(),
      'examAnswers': instance.examAnswers?.toJson(),
    };

Input$ExamSessionWhereUniqueInput _$Input$ExamSessionWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamSessionWhereUniqueInput(
      id: json['id'] as String?,
    );

Map<String, dynamic> _$Input$ExamSessionWhereUniqueInputToJson(
        Input$ExamSessionWhereUniqueInput instance) =>
    <String, dynamic>{
      'id': instance.id,
    };

Input$ExamUncheckedCreateInput _$Input$ExamUncheckedCreateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamUncheckedCreateInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      userId: json['userId'] as String,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
      examquestions: json['examquestions'] == null
          ? null
          : Input$ExamQuestionUncheckedCreateNestedManyWithoutExamInput
              .fromJson(json['examquestions'] as Map<String, dynamic>),
      examAnswers: json['examAnswers'] == null
          ? null
          : Input$ExamAnswerUncheckedCreateNestedManyWithoutExamInput.fromJson(
              json['examAnswers'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ExamUncheckedCreateInputToJson(
        Input$ExamUncheckedCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'userId': instance.userId,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'examquestions': instance.examquestions?.toJson(),
      'examAnswers': instance.examAnswers?.toJson(),
    };

Input$ExamUncheckedCreateNestedManyWithoutUserInput
    _$Input$ExamUncheckedCreateNestedManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamUncheckedCreateNestedManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ExamCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$ExamUncheckedCreateNestedManyWithoutUserInputToJson(
            Input$ExamUncheckedCreateNestedManyWithoutUserInput instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
        };

Input$ExamUncheckedCreateWithoutExamAnswersInput
    _$Input$ExamUncheckedCreateWithoutExamAnswersInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamUncheckedCreateWithoutExamAnswersInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          userId: json['userId'] as String,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          examquestions: json['examquestions'] == null
              ? null
              : Input$ExamQuestionUncheckedCreateNestedManyWithoutExamInput
                  .fromJson(json['examquestions'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamUncheckedCreateWithoutExamAnswersInputToJson(
        Input$ExamUncheckedCreateWithoutExamAnswersInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'userId': instance.userId,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'examquestions': instance.examquestions?.toJson(),
    };

Input$ExamUncheckedCreateWithoutExamquestionsInput
    _$Input$ExamUncheckedCreateWithoutExamquestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamUncheckedCreateWithoutExamquestionsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          userId: json['userId'] as String,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          examAnswers: json['examAnswers'] == null
              ? null
              : Input$ExamAnswerUncheckedCreateNestedManyWithoutExamInput
                  .fromJson(json['examAnswers'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamUncheckedCreateWithoutExamquestionsInputToJson(
        Input$ExamUncheckedCreateWithoutExamquestionsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'userId': instance.userId,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'examAnswers': instance.examAnswers?.toJson(),
    };

Input$ExamUncheckedCreateWithoutUserInput
    _$Input$ExamUncheckedCreateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamUncheckedCreateWithoutUserInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          examquestions: json['examquestions'] == null
              ? null
              : Input$ExamQuestionUncheckedCreateNestedManyWithoutExamInput
                  .fromJson(json['examquestions'] as Map<String, dynamic>),
          examAnswers: json['examAnswers'] == null
              ? null
              : Input$ExamAnswerUncheckedCreateNestedManyWithoutExamInput
                  .fromJson(json['examAnswers'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamUncheckedCreateWithoutUserInputToJson(
        Input$ExamUncheckedCreateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'examquestions': instance.examquestions?.toJson(),
      'examAnswers': instance.examAnswers?.toJson(),
    };

Input$ExamUncheckedUpdateInput _$Input$ExamUncheckedUpdateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamUncheckedUpdateInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['userId'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      examquestions: json['examquestions'] == null
          ? null
          : Input$ExamQuestionUncheckedUpdateManyWithoutExamInput.fromJson(
              json['examquestions'] as Map<String, dynamic>),
      examAnswers: json['examAnswers'] == null
          ? null
          : Input$ExamAnswerUncheckedUpdateManyWithoutExamInput.fromJson(
              json['examAnswers'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ExamUncheckedUpdateInputToJson(
        Input$ExamUncheckedUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'userId': instance.userId?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'examquestions': instance.examquestions?.toJson(),
      'examAnswers': instance.examAnswers?.toJson(),
    };

Input$ExamUncheckedUpdateManyInput _$Input$ExamUncheckedUpdateManyInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamUncheckedUpdateManyInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['userId'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ExamUncheckedUpdateManyInputToJson(
        Input$ExamUncheckedUpdateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'userId': instance.userId?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ExamUncheckedUpdateManyWithoutExaminationsInput
    _$Input$ExamUncheckedUpdateManyWithoutExaminationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamUncheckedUpdateManyWithoutExaminationsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ExamUncheckedUpdateManyWithoutExaminationsInputToJson(
            Input$ExamUncheckedUpdateManyWithoutExaminationsInput instance) =>
        <String, dynamic>{
          'id': instance.id?.toJson(),
          'name': instance.name?.toJson(),
          'createdAt': instance.createdAt?.toJson(),
          'updatedAt': instance.updatedAt?.toJson(),
        };

Input$ExamUncheckedUpdateManyWithoutUserInput
    _$Input$ExamUncheckedUpdateManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamUncheckedUpdateManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamUpsertWithWhereUniqueWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ExamCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamUpdateWithWhereUniqueWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamUpdateManyWithWhereWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$ExamUncheckedUpdateManyWithoutUserInputToJson(
        Input$ExamUncheckedUpdateManyWithoutUserInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$ExamUncheckedUpdateWithoutExamAnswersInput
    _$Input$ExamUncheckedUpdateWithoutExamAnswersInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamUncheckedUpdateWithoutExamAnswersInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          examquestions: json['examquestions'] == null
              ? null
              : Input$ExamQuestionUncheckedUpdateManyWithoutExamInput.fromJson(
                  json['examquestions'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamUncheckedUpdateWithoutExamAnswersInputToJson(
        Input$ExamUncheckedUpdateWithoutExamAnswersInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'userId': instance.userId?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'examquestions': instance.examquestions?.toJson(),
    };

Input$ExamUncheckedUpdateWithoutExamquestionsInput
    _$Input$ExamUncheckedUpdateWithoutExamquestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamUncheckedUpdateWithoutExamquestionsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          examAnswers: json['examAnswers'] == null
              ? null
              : Input$ExamAnswerUncheckedUpdateManyWithoutExamInput.fromJson(
                  json['examAnswers'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamUncheckedUpdateWithoutExamquestionsInputToJson(
        Input$ExamUncheckedUpdateWithoutExamquestionsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'userId': instance.userId?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'examAnswers': instance.examAnswers?.toJson(),
    };

Input$ExamUncheckedUpdateWithoutUserInput
    _$Input$ExamUncheckedUpdateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamUncheckedUpdateWithoutUserInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          examquestions: json['examquestions'] == null
              ? null
              : Input$ExamQuestionUncheckedUpdateManyWithoutExamInput.fromJson(
                  json['examquestions'] as Map<String, dynamic>),
          examAnswers: json['examAnswers'] == null
              ? null
              : Input$ExamAnswerUncheckedUpdateManyWithoutExamInput.fromJson(
                  json['examAnswers'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamUncheckedUpdateWithoutUserInputToJson(
        Input$ExamUncheckedUpdateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'examquestions': instance.examquestions?.toJson(),
      'examAnswers': instance.examAnswers?.toJson(),
    };

Input$ExamUpdateInput _$Input$ExamUpdateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamUpdateInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      user: json['user'] == null
          ? null
          : Input$UserUpdateOneRequiredWithoutExaminationsInput.fromJson(
              json['user'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      examquestions: json['examquestions'] == null
          ? null
          : Input$ExamQuestionUpdateManyWithoutExamInput.fromJson(
              json['examquestions'] as Map<String, dynamic>),
      examAnswers: json['examAnswers'] == null
          ? null
          : Input$ExamAnswerUpdateManyWithoutExamInput.fromJson(
              json['examAnswers'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ExamUpdateInputToJson(
        Input$ExamUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'user': instance.user?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'examquestions': instance.examquestions?.toJson(),
      'examAnswers': instance.examAnswers?.toJson(),
    };

Input$ExamUpdateManyMutationInput _$Input$ExamUpdateManyMutationInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamUpdateManyMutationInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ExamUpdateManyMutationInputToJson(
        Input$ExamUpdateManyMutationInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ExamUpdateManyWithoutUserInput
    _$Input$ExamUpdateManyWithoutUserInputFromJson(Map<String, dynamic> json) =>
        Input$ExamUpdateManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamUpsertWithWhereUniqueWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$ExamCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamUpdateWithWhereUniqueWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamUpdateManyWithWhereWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ExamScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$ExamUpdateManyWithoutUserInputToJson(
        Input$ExamUpdateManyWithoutUserInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$ExamUpdateManyWithWhereWithoutUserInput
    _$Input$ExamUpdateManyWithWhereWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamUpdateManyWithWhereWithoutUserInput(
          where: Input$ExamScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$ExamUncheckedUpdateManyWithoutExaminationsInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamUpdateManyWithWhereWithoutUserInputToJson(
        Input$ExamUpdateManyWithWhereWithoutUserInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

Input$ExamUpdateOneRequiredWithoutExamAnswersInput
    _$Input$ExamUpdateOneRequiredWithoutExamAnswersInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamUpdateOneRequiredWithoutExamAnswersInput(
          create: json['create'] == null
              ? null
              : Input$ExamUncheckedCreateWithoutExamAnswersInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$ExamCreateOrConnectWithoutExamAnswersInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : Input$ExamUpsertWithoutExamAnswersInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$ExamWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : Input$ExamUncheckedUpdateWithoutExamAnswersInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamUpdateOneRequiredWithoutExamAnswersInputToJson(
        Input$ExamUpdateOneRequiredWithoutExamAnswersInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'upsert': instance.upsert?.toJson(),
      'connect': instance.connect?.toJson(),
      'update': instance.update?.toJson(),
    };

Input$ExamUpdateOneRequiredWithoutExamquestionsInput
    _$Input$ExamUpdateOneRequiredWithoutExamquestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamUpdateOneRequiredWithoutExamquestionsInput(
          create: json['create'] == null
              ? null
              : Input$ExamUncheckedCreateWithoutExamquestionsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$ExamCreateOrConnectWithoutExamquestionsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : Input$ExamUpsertWithoutExamquestionsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$ExamWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : Input$ExamUncheckedUpdateWithoutExamquestionsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ExamUpdateOneRequiredWithoutExamquestionsInputToJson(
            Input$ExamUpdateOneRequiredWithoutExamquestionsInput instance) =>
        <String, dynamic>{
          'create': instance.create?.toJson(),
          'connectOrCreate': instance.connectOrCreate?.toJson(),
          'upsert': instance.upsert?.toJson(),
          'connect': instance.connect?.toJson(),
          'update': instance.update?.toJson(),
        };

Input$ExamUpdateWithoutExamAnswersInput
    _$Input$ExamUpdateWithoutExamAnswersInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamUpdateWithoutExamAnswersInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          user: json['user'] == null
              ? null
              : Input$UserUpdateOneRequiredWithoutExaminationsInput.fromJson(
                  json['user'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          examquestions: json['examquestions'] == null
              ? null
              : Input$ExamQuestionUpdateManyWithoutExamInput.fromJson(
                  json['examquestions'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamUpdateWithoutExamAnswersInputToJson(
        Input$ExamUpdateWithoutExamAnswersInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'user': instance.user?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'examquestions': instance.examquestions?.toJson(),
    };

Input$ExamUpdateWithoutExamquestionsInput
    _$Input$ExamUpdateWithoutExamquestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamUpdateWithoutExamquestionsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          user: json['user'] == null
              ? null
              : Input$UserUpdateOneRequiredWithoutExaminationsInput.fromJson(
                  json['user'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          examAnswers: json['examAnswers'] == null
              ? null
              : Input$ExamAnswerUpdateManyWithoutExamInput.fromJson(
                  json['examAnswers'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamUpdateWithoutExamquestionsInputToJson(
        Input$ExamUpdateWithoutExamquestionsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'user': instance.user?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'examAnswers': instance.examAnswers?.toJson(),
    };

Input$ExamUpdateWithoutUserInput _$Input$ExamUpdateWithoutUserInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamUpdateWithoutUserInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      examquestions: json['examquestions'] == null
          ? null
          : Input$ExamQuestionUpdateManyWithoutExamInput.fromJson(
              json['examquestions'] as Map<String, dynamic>),
      examAnswers: json['examAnswers'] == null
          ? null
          : Input$ExamAnswerUpdateManyWithoutExamInput.fromJson(
              json['examAnswers'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ExamUpdateWithoutUserInputToJson(
        Input$ExamUpdateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'examquestions': instance.examquestions?.toJson(),
      'examAnswers': instance.examAnswers?.toJson(),
    };

Input$ExamUpdateWithWhereUniqueWithoutUserInput
    _$Input$ExamUpdateWithWhereUniqueWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamUpdateWithWhereUniqueWithoutUserInput(
          where: Input$ExamWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$ExamUncheckedUpdateWithoutUserInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamUpdateWithWhereUniqueWithoutUserInputToJson(
        Input$ExamUpdateWithWhereUniqueWithoutUserInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

Input$ExamUpsertWithoutExamAnswersInput
    _$Input$ExamUpsertWithoutExamAnswersInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamUpsertWithoutExamAnswersInput(
          update: Input$ExamUncheckedUpdateWithoutExamAnswersInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$ExamUncheckedCreateWithoutExamAnswersInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamUpsertWithoutExamAnswersInputToJson(
        Input$ExamUpsertWithoutExamAnswersInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$ExamUpsertWithoutExamquestionsInput
    _$Input$ExamUpsertWithoutExamquestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamUpsertWithoutExamquestionsInput(
          update: Input$ExamUncheckedUpdateWithoutExamquestionsInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$ExamUncheckedCreateWithoutExamquestionsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamUpsertWithoutExamquestionsInputToJson(
        Input$ExamUpsertWithoutExamquestionsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$ExamUpsertWithWhereUniqueWithoutUserInput
    _$Input$ExamUpsertWithWhereUniqueWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$ExamUpsertWithWhereUniqueWithoutUserInput(
          where: Input$ExamWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: Input$ExamUncheckedUpdateWithoutUserInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$ExamUncheckedCreateWithoutUserInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ExamUpsertWithWhereUniqueWithoutUserInputToJson(
        Input$ExamUpsertWithWhereUniqueWithoutUserInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$ExamWhereInput _$Input$ExamWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ExamWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ExamWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ExamWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : Input$StringFilter.fromJson(json['userId'] as Map<String, dynamic>),
      user: json['user'] == null
          ? null
          : Input$UserWhereInput.fromJson(json['user'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      examquestions: json['examquestions'] == null
          ? null
          : Input$ExamQuestionListRelationFilter.fromJson(
              json['examquestions'] as Map<String, dynamic>),
      examAnswers: json['examAnswers'] == null
          ? null
          : Input$ExamAnswerListRelationFilter.fromJson(
              json['examAnswers'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ExamWhereInputToJson(
        Input$ExamWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'userId': instance.userId?.toJson(),
      'user': instance.user?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'examquestions': instance.examquestions?.toJson(),
      'examAnswers': instance.examAnswers?.toJson(),
    };

Input$ExamWhereUniqueInput _$Input$ExamWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    Input$ExamWhereUniqueInput(
      id: json['id'] as String?,
    );

Map<String, dynamic> _$Input$ExamWhereUniqueInputToJson(
        Input$ExamWhereUniqueInput instance) =>
    <String, dynamic>{
      'id': instance.id,
    };

Input$FloatFieldUpdateOperationsInput
    _$Input$FloatFieldUpdateOperationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$FloatFieldUpdateOperationsInput(
          $set: (json['set'] as num?)?.toDouble(),
          increment: (json['increment'] as num?)?.toDouble(),
          decrement: (json['decrement'] as num?)?.toDouble(),
          multiply: (json['multiply'] as num?)?.toDouble(),
          divide: (json['divide'] as num?)?.toDouble(),
        );

Map<String, dynamic> _$Input$FloatFieldUpdateOperationsInputToJson(
        Input$FloatFieldUpdateOperationsInput instance) =>
    <String, dynamic>{
      'set': instance.$set,
      'increment': instance.increment,
      'decrement': instance.decrement,
      'multiply': instance.multiply,
      'divide': instance.divide,
    };

Input$FloatFilter _$Input$FloatFilterFromJson(Map<String, dynamic> json) =>
    Input$FloatFilter(
      equals: (json['equals'] as num?)?.toDouble(),
      $in: (json['in'] as List<dynamic>?)
          ?.map((e) => (e as num?)?.toDouble())
          .toList(),
      notIn: (json['notIn'] as List<dynamic>?)
          ?.map((e) => (e as num?)?.toDouble())
          .toList(),
      lt: (json['lt'] as num?)?.toDouble(),
      lte: (json['lte'] as num?)?.toDouble(),
      gt: (json['gt'] as num?)?.toDouble(),
      gte: (json['gte'] as num?)?.toDouble(),
      not: json['not'] == null
          ? null
          : Input$NestedFloatFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$FloatFilterToJson(Input$FloatFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'not': instance.not?.toJson(),
    };

Input$FloatWithAggregatesFilter _$Input$FloatWithAggregatesFilterFromJson(
        Map<String, dynamic> json) =>
    Input$FloatWithAggregatesFilter(
      equals: (json['equals'] as num?)?.toDouble(),
      $in: (json['in'] as List<dynamic>?)
          ?.map((e) => (e as num?)?.toDouble())
          .toList(),
      notIn: (json['notIn'] as List<dynamic>?)
          ?.map((e) => (e as num?)?.toDouble())
          .toList(),
      lt: (json['lt'] as num?)?.toDouble(),
      lte: (json['lte'] as num?)?.toDouble(),
      gt: (json['gt'] as num?)?.toDouble(),
      gte: (json['gte'] as num?)?.toDouble(),
      not: json['not'] == null
          ? null
          : Input$NestedFloatWithAggregatesFilter.fromJson(
              json['not'] as Map<String, dynamic>),
      $_count: json['_count'] == null
          ? null
          : Input$NestedIntFilter.fromJson(
              json['_count'] as Map<String, dynamic>),
      $_avg: json['_avg'] == null
          ? null
          : Input$NestedFloatFilter.fromJson(
              json['_avg'] as Map<String, dynamic>),
      $_sum: json['_sum'] == null
          ? null
          : Input$NestedFloatFilter.fromJson(
              json['_sum'] as Map<String, dynamic>),
      $_min: json['_min'] == null
          ? null
          : Input$NestedFloatFilter.fromJson(
              json['_min'] as Map<String, dynamic>),
      $_max: json['_max'] == null
          ? null
          : Input$NestedFloatFilter.fromJson(
              json['_max'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$FloatWithAggregatesFilterToJson(
        Input$FloatWithAggregatesFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'not': instance.not?.toJson(),
      '_count': instance.$_count?.toJson(),
      '_avg': instance.$_avg?.toJson(),
      '_sum': instance.$_sum?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_max': instance.$_max?.toJson(),
    };

Input$IdentityFileCountOrderByAggregateInput
    _$Input$IdentityFileCountOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileCountOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          url: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['url'],
              unknownValue: Enum$SortOrder.$unknown),
          type: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['type'],
              unknownValue: Enum$SortOrder.$unknown),
          number: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['number'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$IdentityFileCountOrderByAggregateInputToJson(
        Input$IdentityFileCountOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'url': _$Enum$SortOrderEnumMap[instance.url],
      'type': _$Enum$SortOrderEnumMap[instance.type],
      'number': _$Enum$SortOrderEnumMap[instance.number],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
    };

Input$IdentityFileCreateInput _$Input$IdentityFileCreateInputFromJson(
        Map<String, dynamic> json) =>
    Input$IdentityFileCreateInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      url: json['url'] as String,
      type: $enumDecode(_$Enum$IdentityFileTypeEnumMap, json['type'],
          unknownValue: Enum$IdentityFileType.$unknown),
      number: json['number'] as String,
      user: Input$UserCreateNestedOneWithoutIdentityFilesInput.fromJson(
          json['user'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$IdentityFileCreateInputToJson(
        Input$IdentityFileCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'url': instance.url,
      'type': _$Enum$IdentityFileTypeEnumMap[instance.type],
      'number': instance.number,
      'user': instance.user.toJson(),
    };

Input$IdentityFileCreateManyInput _$Input$IdentityFileCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    Input$IdentityFileCreateManyInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      url: json['url'] as String,
      type: $enumDecode(_$Enum$IdentityFileTypeEnumMap, json['type'],
          unknownValue: Enum$IdentityFileType.$unknown),
      number: json['number'] as String,
      userId: json['userId'] as String,
    );

Map<String, dynamic> _$Input$IdentityFileCreateManyInputToJson(
        Input$IdentityFileCreateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'url': instance.url,
      'type': _$Enum$IdentityFileTypeEnumMap[instance.type],
      'number': instance.number,
      'userId': instance.userId,
    };

Input$IdentityFileCreateManyUserInput
    _$Input$IdentityFileCreateManyUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileCreateManyUserInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          url: json['url'] as String,
          type: $enumDecode(_$Enum$IdentityFileTypeEnumMap, json['type'],
              unknownValue: Enum$IdentityFileType.$unknown),
          number: json['number'] as String,
        );

Map<String, dynamic> _$Input$IdentityFileCreateManyUserInputToJson(
        Input$IdentityFileCreateManyUserInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'url': instance.url,
      'type': _$Enum$IdentityFileTypeEnumMap[instance.type],
      'number': instance.number,
    };

Input$IdentityFileCreateManyUserInputEnvelope
    _$Input$IdentityFileCreateManyUserInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileCreateManyUserInputEnvelope(
          data: Input$IdentityFileCreateManyUserInput.fromJson(
              json['data'] as Map<String, dynamic>),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$Input$IdentityFileCreateManyUserInputEnvelopeToJson(
        Input$IdentityFileCreateManyUserInputEnvelope instance) =>
    <String, dynamic>{
      'data': instance.data.toJson(),
      'skipDuplicates': instance.skipDuplicates,
    };

Input$IdentityFileCreateNestedManyWithoutUserInput
    _$Input$IdentityFileCreateNestedManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileCreateNestedManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$IdentityFileCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$IdentityFileCreateNestedManyWithoutUserInputToJson(
        Input$IdentityFileCreateNestedManyWithoutUserInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$IdentityFileCreateOrConnectWithoutUserInput
    _$Input$IdentityFileCreateOrConnectWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileCreateOrConnectWithoutUserInput(
          where: Input$IdentityFileWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$IdentityFileUncheckedCreateWithoutUserInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$IdentityFileCreateOrConnectWithoutUserInputToJson(
        Input$IdentityFileCreateOrConnectWithoutUserInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$IdentityFileCreateWithoutUserInput
    _$Input$IdentityFileCreateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileCreateWithoutUserInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          url: json['url'] as String,
          type: $enumDecode(_$Enum$IdentityFileTypeEnumMap, json['type'],
              unknownValue: Enum$IdentityFileType.$unknown),
          number: json['number'] as String,
        );

Map<String, dynamic> _$Input$IdentityFileCreateWithoutUserInputToJson(
        Input$IdentityFileCreateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'url': instance.url,
      'type': _$Enum$IdentityFileTypeEnumMap[instance.type],
      'number': instance.number,
    };

Input$IdentityFileListRelationFilter
    _$Input$IdentityFileListRelationFilterFromJson(Map<String, dynamic> json) =>
        Input$IdentityFileListRelationFilter(
          every: json['every'] == null
              ? null
              : Input$IdentityFileWhereInput.fromJson(
                  json['every'] as Map<String, dynamic>),
          some: json['some'] == null
              ? null
              : Input$IdentityFileWhereInput.fromJson(
                  json['some'] as Map<String, dynamic>),
          none: json['none'] == null
              ? null
              : Input$IdentityFileWhereInput.fromJson(
                  json['none'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$IdentityFileListRelationFilterToJson(
        Input$IdentityFileListRelationFilter instance) =>
    <String, dynamic>{
      'every': instance.every?.toJson(),
      'some': instance.some?.toJson(),
      'none': instance.none?.toJson(),
    };

Input$IdentityFileMaxOrderByAggregateInput
    _$Input$IdentityFileMaxOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileMaxOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          url: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['url'],
              unknownValue: Enum$SortOrder.$unknown),
          type: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['type'],
              unknownValue: Enum$SortOrder.$unknown),
          number: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['number'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$IdentityFileMaxOrderByAggregateInputToJson(
        Input$IdentityFileMaxOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'url': _$Enum$SortOrderEnumMap[instance.url],
      'type': _$Enum$SortOrderEnumMap[instance.type],
      'number': _$Enum$SortOrderEnumMap[instance.number],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
    };

Input$IdentityFileMinOrderByAggregateInput
    _$Input$IdentityFileMinOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileMinOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          url: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['url'],
              unknownValue: Enum$SortOrder.$unknown),
          type: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['type'],
              unknownValue: Enum$SortOrder.$unknown),
          number: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['number'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$IdentityFileMinOrderByAggregateInputToJson(
        Input$IdentityFileMinOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'url': _$Enum$SortOrderEnumMap[instance.url],
      'type': _$Enum$SortOrderEnumMap[instance.type],
      'number': _$Enum$SortOrderEnumMap[instance.number],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
    };

Input$IdentityFileOrderByRelationAggregateInput
    _$Input$IdentityFileOrderByRelationAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileOrderByRelationAggregateInput(
          $_count: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['_count'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$IdentityFileOrderByRelationAggregateInputToJson(
        Input$IdentityFileOrderByRelationAggregateInput instance) =>
    <String, dynamic>{
      '_count': _$Enum$SortOrderEnumMap[instance.$_count],
    };

Input$IdentityFileOrderByWithAggregationInput
    _$Input$IdentityFileOrderByWithAggregationInputFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileOrderByWithAggregationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          url: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['url'],
              unknownValue: Enum$SortOrder.$unknown),
          type: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['type'],
              unknownValue: Enum$SortOrder.$unknown),
          number: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['number'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          $_count: json['_count'] == null
              ? null
              : Input$IdentityFileCountOrderByAggregateInput.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$IdentityFileMaxOrderByAggregateInput.fromJson(
                  json['_max'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$IdentityFileMinOrderByAggregateInput.fromJson(
                  json['_min'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$IdentityFileOrderByWithAggregationInputToJson(
        Input$IdentityFileOrderByWithAggregationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'url': _$Enum$SortOrderEnumMap[instance.url],
      'type': _$Enum$SortOrderEnumMap[instance.type],
      'number': _$Enum$SortOrderEnumMap[instance.number],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      '_count': instance.$_count?.toJson(),
      '_max': instance.$_max?.toJson(),
      '_min': instance.$_min?.toJson(),
    };

Input$IdentityFileOrderByWithRelationInput
    _$Input$IdentityFileOrderByWithRelationInputFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileOrderByWithRelationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          url: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['url'],
              unknownValue: Enum$SortOrder.$unknown),
          type: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['type'],
              unknownValue: Enum$SortOrder.$unknown),
          number: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['number'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          user: json['user'] == null
              ? null
              : Input$UserOrderByWithRelationInput.fromJson(
                  json['user'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$IdentityFileOrderByWithRelationInputToJson(
        Input$IdentityFileOrderByWithRelationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'url': _$Enum$SortOrderEnumMap[instance.url],
      'type': _$Enum$SortOrderEnumMap[instance.type],
      'number': _$Enum$SortOrderEnumMap[instance.number],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'user': instance.user?.toJson(),
    };

Input$IdentityFileScalarWhereInput _$Input$IdentityFileScalarWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$IdentityFileScalarWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$IdentityFileScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$IdentityFileScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$IdentityFileScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      url: json['url'] == null
          ? null
          : Input$StringFilter.fromJson(json['url'] as Map<String, dynamic>),
      type: json['type'] == null
          ? null
          : Input$EnumIdentityFileTypeFilter.fromJson(
              json['type'] as Map<String, dynamic>),
      number: json['number'] == null
          ? null
          : Input$StringFilter.fromJson(json['number'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : Input$StringFilter.fromJson(json['userId'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$IdentityFileScalarWhereInputToJson(
        Input$IdentityFileScalarWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'url': instance.url?.toJson(),
      'type': instance.type?.toJson(),
      'number': instance.number?.toJson(),
      'userId': instance.userId?.toJson(),
    };

Input$IdentityFileScalarWhereWithAggregatesInput
    _$Input$IdentityFileScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          OR: (json['OR'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          NOT: (json['NOT'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          id: json['id'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['name'] as Map<String, dynamic>),
          url: json['url'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['url'] as Map<String, dynamic>),
          type: json['type'] == null
              ? null
              : Input$EnumIdentityFileTypeWithAggregatesFilter.fromJson(
                  json['type'] as Map<String, dynamic>),
          number: json['number'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['number'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['userId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$IdentityFileScalarWhereWithAggregatesInputToJson(
        Input$IdentityFileScalarWhereWithAggregatesInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'url': instance.url?.toJson(),
      'type': instance.type?.toJson(),
      'number': instance.number?.toJson(),
      'userId': instance.userId?.toJson(),
    };

Input$IdentityFileUncheckedCreateInput
    _$Input$IdentityFileUncheckedCreateInputFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileUncheckedCreateInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          url: json['url'] as String,
          type: $enumDecode(_$Enum$IdentityFileTypeEnumMap, json['type'],
              unknownValue: Enum$IdentityFileType.$unknown),
          number: json['number'] as String,
          userId: json['userId'] as String,
        );

Map<String, dynamic> _$Input$IdentityFileUncheckedCreateInputToJson(
        Input$IdentityFileUncheckedCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'url': instance.url,
      'type': _$Enum$IdentityFileTypeEnumMap[instance.type],
      'number': instance.number,
      'userId': instance.userId,
    };

Input$IdentityFileUncheckedCreateNestedManyWithoutUserInput
    _$Input$IdentityFileUncheckedCreateNestedManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileUncheckedCreateNestedManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$IdentityFileCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$IdentityFileUncheckedCreateNestedManyWithoutUserInputToJson(
            Input$IdentityFileUncheckedCreateNestedManyWithoutUserInput
                instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
        };

Input$IdentityFileUncheckedCreateWithoutUserInput
    _$Input$IdentityFileUncheckedCreateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileUncheckedCreateWithoutUserInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          url: json['url'] as String,
          type: $enumDecode(_$Enum$IdentityFileTypeEnumMap, json['type'],
              unknownValue: Enum$IdentityFileType.$unknown),
          number: json['number'] as String,
        );

Map<String, dynamic> _$Input$IdentityFileUncheckedCreateWithoutUserInputToJson(
        Input$IdentityFileUncheckedCreateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'url': instance.url,
      'type': _$Enum$IdentityFileTypeEnumMap[instance.type],
      'number': instance.number,
    };

Input$IdentityFileUncheckedUpdateInput
    _$Input$IdentityFileUncheckedUpdateInputFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileUncheckedUpdateInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          url: json['url'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['url'] as Map<String, dynamic>),
          type: json['type'] == null
              ? null
              : Input$EnumIdentityFileTypeFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          number: json['number'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['number'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$IdentityFileUncheckedUpdateInputToJson(
        Input$IdentityFileUncheckedUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'url': instance.url?.toJson(),
      'type': instance.type?.toJson(),
      'number': instance.number?.toJson(),
      'userId': instance.userId?.toJson(),
    };

Input$IdentityFileUncheckedUpdateManyInput
    _$Input$IdentityFileUncheckedUpdateManyInputFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileUncheckedUpdateManyInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          url: json['url'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['url'] as Map<String, dynamic>),
          type: json['type'] == null
              ? null
              : Input$EnumIdentityFileTypeFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          number: json['number'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['number'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$IdentityFileUncheckedUpdateManyInputToJson(
        Input$IdentityFileUncheckedUpdateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'url': instance.url?.toJson(),
      'type': instance.type?.toJson(),
      'number': instance.number?.toJson(),
      'userId': instance.userId?.toJson(),
    };

Input$IdentityFileUncheckedUpdateManyWithoutIdentityFilesInput
    _$Input$IdentityFileUncheckedUpdateManyWithoutIdentityFilesInputFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileUncheckedUpdateManyWithoutIdentityFilesInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          url: json['url'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['url'] as Map<String, dynamic>),
          type: json['type'] == null
              ? null
              : Input$EnumIdentityFileTypeFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          number: json['number'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['number'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$IdentityFileUncheckedUpdateManyWithoutIdentityFilesInputToJson(
            Input$IdentityFileUncheckedUpdateManyWithoutIdentityFilesInput
                instance) =>
        <String, dynamic>{
          'id': instance.id?.toJson(),
          'name': instance.name?.toJson(),
          'url': instance.url?.toJson(),
          'type': instance.type?.toJson(),
          'number': instance.number?.toJson(),
        };

Input$IdentityFileUncheckedUpdateManyWithoutUserInput
    _$Input$IdentityFileUncheckedUpdateManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileUncheckedUpdateManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileUpsertWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$IdentityFileCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileUpdateWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileUpdateManyWithWhereWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$IdentityFileUncheckedUpdateManyWithoutUserInputToJson(
            Input$IdentityFileUncheckedUpdateManyWithoutUserInput instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'set': instance.$set?.map((e) => e?.toJson()).toList(),
          'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
          'delete': instance.delete?.map((e) => e?.toJson()).toList(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
          'update': instance.update?.map((e) => e?.toJson()).toList(),
          'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
          'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
        };

Input$IdentityFileUncheckedUpdateWithoutUserInput
    _$Input$IdentityFileUncheckedUpdateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileUncheckedUpdateWithoutUserInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          url: json['url'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['url'] as Map<String, dynamic>),
          type: json['type'] == null
              ? null
              : Input$EnumIdentityFileTypeFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          number: json['number'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['number'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$IdentityFileUncheckedUpdateWithoutUserInputToJson(
        Input$IdentityFileUncheckedUpdateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'url': instance.url?.toJson(),
      'type': instance.type?.toJson(),
      'number': instance.number?.toJson(),
    };

Input$IdentityFileUpdateInput _$Input$IdentityFileUpdateInputFromJson(
        Map<String, dynamic> json) =>
    Input$IdentityFileUpdateInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      url: json['url'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['url'] as Map<String, dynamic>),
      type: json['type'] == null
          ? null
          : Input$EnumIdentityFileTypeFieldUpdateOperationsInput.fromJson(
              json['type'] as Map<String, dynamic>),
      number: json['number'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['number'] as Map<String, dynamic>),
      user: json['user'] == null
          ? null
          : Input$UserUpdateOneRequiredWithoutIdentityFilesInput.fromJson(
              json['user'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$IdentityFileUpdateInputToJson(
        Input$IdentityFileUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'url': instance.url?.toJson(),
      'type': instance.type?.toJson(),
      'number': instance.number?.toJson(),
      'user': instance.user?.toJson(),
    };

Input$IdentityFileUpdateManyMutationInput
    _$Input$IdentityFileUpdateManyMutationInputFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileUpdateManyMutationInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          url: json['url'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['url'] as Map<String, dynamic>),
          type: json['type'] == null
              ? null
              : Input$EnumIdentityFileTypeFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          number: json['number'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['number'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$IdentityFileUpdateManyMutationInputToJson(
        Input$IdentityFileUpdateManyMutationInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'url': instance.url?.toJson(),
      'type': instance.type?.toJson(),
      'number': instance.number?.toJson(),
    };

Input$IdentityFileUpdateManyWithoutUserInput
    _$Input$IdentityFileUpdateManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileUpdateManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileUpsertWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$IdentityFileCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileUpdateWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileUpdateManyWithWhereWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$IdentityFileScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$IdentityFileUpdateManyWithoutUserInputToJson(
        Input$IdentityFileUpdateManyWithoutUserInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$IdentityFileUpdateManyWithWhereWithoutUserInput
    _$Input$IdentityFileUpdateManyWithWhereWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileUpdateManyWithWhereWithoutUserInput(
          where: Input$IdentityFileScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$IdentityFileUncheckedUpdateManyWithoutIdentityFilesInput
              .fromJson(json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$IdentityFileUpdateManyWithWhereWithoutUserInputToJson(
            Input$IdentityFileUpdateManyWithWhereWithoutUserInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$IdentityFileUpdateWithoutUserInput
    _$Input$IdentityFileUpdateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileUpdateWithoutUserInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          url: json['url'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['url'] as Map<String, dynamic>),
          type: json['type'] == null
              ? null
              : Input$EnumIdentityFileTypeFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          number: json['number'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['number'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$IdentityFileUpdateWithoutUserInputToJson(
        Input$IdentityFileUpdateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'url': instance.url?.toJson(),
      'type': instance.type?.toJson(),
      'number': instance.number?.toJson(),
    };

Input$IdentityFileUpdateWithWhereUniqueWithoutUserInput
    _$Input$IdentityFileUpdateWithWhereUniqueWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileUpdateWithWhereUniqueWithoutUserInput(
          where: Input$IdentityFileWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$IdentityFileUncheckedUpdateWithoutUserInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$IdentityFileUpdateWithWhereUniqueWithoutUserInputToJson(
            Input$IdentityFileUpdateWithWhereUniqueWithoutUserInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$IdentityFileUpsertWithWhereUniqueWithoutUserInput
    _$Input$IdentityFileUpsertWithWhereUniqueWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$IdentityFileUpsertWithWhereUniqueWithoutUserInput(
          where: Input$IdentityFileWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: Input$IdentityFileUncheckedUpdateWithoutUserInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$IdentityFileUncheckedCreateWithoutUserInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$IdentityFileUpsertWithWhereUniqueWithoutUserInputToJson(
            Input$IdentityFileUpsertWithWhereUniqueWithoutUserInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

Input$IdentityFileWhereInput _$Input$IdentityFileWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$IdentityFileWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$IdentityFileWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$IdentityFileWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$IdentityFileWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      url: json['url'] == null
          ? null
          : Input$StringFilter.fromJson(json['url'] as Map<String, dynamic>),
      type: json['type'] == null
          ? null
          : Input$EnumIdentityFileTypeFilter.fromJson(
              json['type'] as Map<String, dynamic>),
      number: json['number'] == null
          ? null
          : Input$StringFilter.fromJson(json['number'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : Input$StringFilter.fromJson(json['userId'] as Map<String, dynamic>),
      user: json['user'] == null
          ? null
          : Input$UserWhereInput.fromJson(json['user'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$IdentityFileWhereInputToJson(
        Input$IdentityFileWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'url': instance.url?.toJson(),
      'type': instance.type?.toJson(),
      'number': instance.number?.toJson(),
      'userId': instance.userId?.toJson(),
      'user': instance.user?.toJson(),
    };

Input$IdentityFileWhereUniqueInput _$Input$IdentityFileWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    Input$IdentityFileWhereUniqueInput(
      id: json['id'] as String?,
    );

Map<String, dynamic> _$Input$IdentityFileWhereUniqueInputToJson(
        Input$IdentityFileWhereUniqueInput instance) =>
    <String, dynamic>{
      'id': instance.id,
    };

Input$IntFieldUpdateOperationsInput
    _$Input$IntFieldUpdateOperationsInputFromJson(Map<String, dynamic> json) =>
        Input$IntFieldUpdateOperationsInput(
          $set: json['set'] as int?,
          increment: json['increment'] as int?,
          decrement: json['decrement'] as int?,
          multiply: json['multiply'] as int?,
          divide: json['divide'] as int?,
        );

Map<String, dynamic> _$Input$IntFieldUpdateOperationsInputToJson(
        Input$IntFieldUpdateOperationsInput instance) =>
    <String, dynamic>{
      'set': instance.$set,
      'increment': instance.increment,
      'decrement': instance.decrement,
      'multiply': instance.multiply,
      'divide': instance.divide,
    };

Input$IntFilter _$Input$IntFilterFromJson(Map<String, dynamic> json) =>
    Input$IntFilter(
      equals: json['equals'] as int?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as int?).toList(),
      notIn: (json['notIn'] as List<dynamic>?)?.map((e) => e as int?).toList(),
      lt: json['lt'] as int?,
      lte: json['lte'] as int?,
      gt: json['gt'] as int?,
      gte: json['gte'] as int?,
      not: json['not'] == null
          ? null
          : Input$NestedIntFilter.fromJson(json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$IntFilterToJson(Input$IntFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'not': instance.not?.toJson(),
    };

Input$IntNullableFilter _$Input$IntNullableFilterFromJson(
        Map<String, dynamic> json) =>
    Input$IntNullableFilter(
      equals: json['equals'] as int?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as int?).toList(),
      notIn: (json['notIn'] as List<dynamic>?)?.map((e) => e as int?).toList(),
      lt: json['lt'] as int?,
      lte: json['lte'] as int?,
      gt: json['gt'] as int?,
      gte: json['gte'] as int?,
      not: json['not'] == null
          ? null
          : Input$NestedIntNullableFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$IntNullableFilterToJson(
        Input$IntNullableFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'not': instance.not?.toJson(),
    };

Input$IntNullableListFilter _$Input$IntNullableListFilterFromJson(
        Map<String, dynamic> json) =>
    Input$IntNullableListFilter(
      equals:
          (json['equals'] as List<dynamic>?)?.map((e) => e as int?).toList(),
      has: json['has'] as int?,
      hasEvery:
          (json['hasEvery'] as List<dynamic>?)?.map((e) => e as int?).toList(),
      hasSome:
          (json['hasSome'] as List<dynamic>?)?.map((e) => e as int?).toList(),
      isEmpty: json['isEmpty'] as bool?,
    );

Map<String, dynamic> _$Input$IntNullableListFilterToJson(
        Input$IntNullableListFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'has': instance.has,
      'hasEvery': instance.hasEvery,
      'hasSome': instance.hasSome,
      'isEmpty': instance.isEmpty,
    };

Input$IntNullableWithAggregatesFilter
    _$Input$IntNullableWithAggregatesFilterFromJson(
            Map<String, dynamic> json) =>
        Input$IntNullableWithAggregatesFilter(
          equals: json['equals'] as int?,
          $in: (json['in'] as List<dynamic>?)?.map((e) => e as int?).toList(),
          notIn:
              (json['notIn'] as List<dynamic>?)?.map((e) => e as int?).toList(),
          lt: json['lt'] as int?,
          lte: json['lte'] as int?,
          gt: json['gt'] as int?,
          gte: json['gte'] as int?,
          not: json['not'] == null
              ? null
              : Input$NestedIntNullableWithAggregatesFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
          $_count: json['_count'] == null
              ? null
              : Input$NestedIntNullableFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_avg: json['_avg'] == null
              ? null
              : Input$NestedFloatNullableFilter.fromJson(
                  json['_avg'] as Map<String, dynamic>),
          $_sum: json['_sum'] == null
              ? null
              : Input$NestedIntNullableFilter.fromJson(
                  json['_sum'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$NestedIntNullableFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$NestedIntNullableFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$IntNullableWithAggregatesFilterToJson(
        Input$IntNullableWithAggregatesFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'not': instance.not?.toJson(),
      '_count': instance.$_count?.toJson(),
      '_avg': instance.$_avg?.toJson(),
      '_sum': instance.$_sum?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_max': instance.$_max?.toJson(),
    };

Input$IntWithAggregatesFilter _$Input$IntWithAggregatesFilterFromJson(
        Map<String, dynamic> json) =>
    Input$IntWithAggregatesFilter(
      equals: json['equals'] as int?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as int?).toList(),
      notIn: (json['notIn'] as List<dynamic>?)?.map((e) => e as int?).toList(),
      lt: json['lt'] as int?,
      lte: json['lte'] as int?,
      gt: json['gt'] as int?,
      gte: json['gte'] as int?,
      not: json['not'] == null
          ? null
          : Input$NestedIntWithAggregatesFilter.fromJson(
              json['not'] as Map<String, dynamic>),
      $_count: json['_count'] == null
          ? null
          : Input$NestedIntFilter.fromJson(
              json['_count'] as Map<String, dynamic>),
      $_avg: json['_avg'] == null
          ? null
          : Input$NestedFloatFilter.fromJson(
              json['_avg'] as Map<String, dynamic>),
      $_sum: json['_sum'] == null
          ? null
          : Input$NestedIntFilter.fromJson(
              json['_sum'] as Map<String, dynamic>),
      $_min: json['_min'] == null
          ? null
          : Input$NestedIntFilter.fromJson(
              json['_min'] as Map<String, dynamic>),
      $_max: json['_max'] == null
          ? null
          : Input$NestedIntFilter.fromJson(
              json['_max'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$IntWithAggregatesFilterToJson(
        Input$IntWithAggregatesFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'not': instance.not?.toJson(),
      '_count': instance.$_count?.toJson(),
      '_avg': instance.$_avg?.toJson(),
      '_sum': instance.$_sum?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_max': instance.$_max?.toJson(),
    };

Input$NestedBoolFilter _$Input$NestedBoolFilterFromJson(
        Map<String, dynamic> json) =>
    Input$NestedBoolFilter(
      equals: json['equals'] as bool?,
      not: json['not'] == null
          ? null
          : Input$NestedBoolFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$NestedBoolFilterToJson(
        Input$NestedBoolFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'not': instance.not?.toJson(),
    };

Input$NestedBoolWithAggregatesFilter
    _$Input$NestedBoolWithAggregatesFilterFromJson(Map<String, dynamic> json) =>
        Input$NestedBoolWithAggregatesFilter(
          equals: json['equals'] as bool?,
          not: json['not'] == null
              ? null
              : Input$NestedBoolWithAggregatesFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
          $_count: json['_count'] == null
              ? null
              : Input$NestedIntFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$NestedBoolFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$NestedBoolFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$NestedBoolWithAggregatesFilterToJson(
        Input$NestedBoolWithAggregatesFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'not': instance.not?.toJson(),
      '_count': instance.$_count?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_max': instance.$_max?.toJson(),
    };

Input$NestedDateTimeFilter _$Input$NestedDateTimeFilterFromJson(
        Map<String, dynamic> json) =>
    Input$NestedDateTimeFilter(
      equals: json['equals'] as String?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as String?).toList(),
      notIn:
          (json['notIn'] as List<dynamic>?)?.map((e) => e as String?).toList(),
      lt: json['lt'] as String?,
      lte: json['lte'] as String?,
      gt: json['gt'] as String?,
      gte: json['gte'] as String?,
      not: json['not'] == null
          ? null
          : Input$NestedDateTimeFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$NestedDateTimeFilterToJson(
        Input$NestedDateTimeFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'not': instance.not?.toJson(),
    };

Input$NestedDateTimeNullableFilter _$Input$NestedDateTimeNullableFilterFromJson(
        Map<String, dynamic> json) =>
    Input$NestedDateTimeNullableFilter(
      equals: json['equals'] as String?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as String?).toList(),
      notIn:
          (json['notIn'] as List<dynamic>?)?.map((e) => e as String?).toList(),
      lt: json['lt'] as String?,
      lte: json['lte'] as String?,
      gt: json['gt'] as String?,
      gte: json['gte'] as String?,
      not: json['not'] == null
          ? null
          : Input$NestedDateTimeNullableFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$NestedDateTimeNullableFilterToJson(
        Input$NestedDateTimeNullableFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'not': instance.not?.toJson(),
    };

Input$NestedDateTimeNullableWithAggregatesFilter
    _$Input$NestedDateTimeNullableWithAggregatesFilterFromJson(
            Map<String, dynamic> json) =>
        Input$NestedDateTimeNullableWithAggregatesFilter(
          equals: json['equals'] as String?,
          $in:
              (json['in'] as List<dynamic>?)?.map((e) => e as String?).toList(),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          lt: json['lt'] as String?,
          lte: json['lte'] as String?,
          gt: json['gt'] as String?,
          gte: json['gte'] as String?,
          not: json['not'] == null
              ? null
              : Input$NestedDateTimeNullableWithAggregatesFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
          $_count: json['_count'] == null
              ? null
              : Input$NestedIntNullableFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$NestedDateTimeNullableFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$NestedDateTimeNullableFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$NestedDateTimeNullableWithAggregatesFilterToJson(
        Input$NestedDateTimeNullableWithAggregatesFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'not': instance.not?.toJson(),
      '_count': instance.$_count?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_max': instance.$_max?.toJson(),
    };

Input$NestedDateTimeWithAggregatesFilter
    _$Input$NestedDateTimeWithAggregatesFilterFromJson(
            Map<String, dynamic> json) =>
        Input$NestedDateTimeWithAggregatesFilter(
          equals: json['equals'] as String?,
          $in:
              (json['in'] as List<dynamic>?)?.map((e) => e as String?).toList(),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          lt: json['lt'] as String?,
          lte: json['lte'] as String?,
          gt: json['gt'] as String?,
          gte: json['gte'] as String?,
          not: json['not'] == null
              ? null
              : Input$NestedDateTimeWithAggregatesFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
          $_count: json['_count'] == null
              ? null
              : Input$NestedIntFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$NestedDateTimeFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$NestedDateTimeFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$NestedDateTimeWithAggregatesFilterToJson(
        Input$NestedDateTimeWithAggregatesFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'not': instance.not?.toJson(),
      '_count': instance.$_count?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_max': instance.$_max?.toJson(),
    };

Input$NestedEnumClassroomStudentStatusFilter
    _$Input$NestedEnumClassroomStudentStatusFilterFromJson(
            Map<String, dynamic> json) =>
        Input$NestedEnumClassroomStudentStatusFilter(
          equals: $enumDecodeNullable(
              _$Enum$ClassroomStudentStatusEnumMap, json['equals'],
              unknownValue: Enum$ClassroomStudentStatus.$unknown),
          $in: (json['in'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$ClassroomStudentStatusEnumMap, e,
                  unknownValue: Enum$ClassroomStudentStatus.$unknown))
              .toList(),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$ClassroomStudentStatusEnumMap, e,
                  unknownValue: Enum$ClassroomStudentStatus.$unknown))
              .toList(),
          not: json['not'] == null
              ? null
              : Input$NestedEnumClassroomStudentStatusFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$NestedEnumClassroomStudentStatusFilterToJson(
        Input$NestedEnumClassroomStudentStatusFilter instance) =>
    <String, dynamic>{
      'equals': _$Enum$ClassroomStudentStatusEnumMap[instance.equals],
      'in': instance.$in
          ?.map((e) => _$Enum$ClassroomStudentStatusEnumMap[e])
          .toList(),
      'notIn': instance.notIn
          ?.map((e) => _$Enum$ClassroomStudentStatusEnumMap[e])
          .toList(),
      'not': instance.not?.toJson(),
    };

Input$NestedEnumClassroomStudentStatusWithAggregatesFilter
    _$Input$NestedEnumClassroomStudentStatusWithAggregatesFilterFromJson(
            Map<String, dynamic> json) =>
        Input$NestedEnumClassroomStudentStatusWithAggregatesFilter(
          equals: $enumDecodeNullable(
              _$Enum$ClassroomStudentStatusEnumMap, json['equals'],
              unknownValue: Enum$ClassroomStudentStatus.$unknown),
          $in: (json['in'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$ClassroomStudentStatusEnumMap, e,
                  unknownValue: Enum$ClassroomStudentStatus.$unknown))
              .toList(),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$ClassroomStudentStatusEnumMap, e,
                  unknownValue: Enum$ClassroomStudentStatus.$unknown))
              .toList(),
          not: json['not'] == null
              ? null
              : Input$NestedEnumClassroomStudentStatusWithAggregatesFilter
                  .fromJson(json['not'] as Map<String, dynamic>),
          $_count: json['_count'] == null
              ? null
              : Input$NestedIntFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$NestedEnumClassroomStudentStatusFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$NestedEnumClassroomStudentStatusFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String,
    dynamic> _$Input$NestedEnumClassroomStudentStatusWithAggregatesFilterToJson(
        Input$NestedEnumClassroomStudentStatusWithAggregatesFilter instance) =>
    <String, dynamic>{
      'equals': _$Enum$ClassroomStudentStatusEnumMap[instance.equals],
      'in': instance.$in
          ?.map((e) => _$Enum$ClassroomStudentStatusEnumMap[e])
          .toList(),
      'notIn': instance.notIn
          ?.map((e) => _$Enum$ClassroomStudentStatusEnumMap[e])
          .toList(),
      'not': instance.not?.toJson(),
      '_count': instance.$_count?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_max': instance.$_max?.toJson(),
    };

Input$NestedEnumContentTypeFilter _$Input$NestedEnumContentTypeFilterFromJson(
        Map<String, dynamic> json) =>
    Input$NestedEnumContentTypeFilter(
      equals: $enumDecodeNullable(_$Enum$ContentTypeEnumMap, json['equals'],
          unknownValue: Enum$ContentType.$unknown),
      $in: (json['in'] as List<dynamic>?)
          ?.map((e) => $enumDecodeNullable(_$Enum$ContentTypeEnumMap, e,
              unknownValue: Enum$ContentType.$unknown))
          .toList(),
      notIn: (json['notIn'] as List<dynamic>?)
          ?.map((e) => $enumDecodeNullable(_$Enum$ContentTypeEnumMap, e,
              unknownValue: Enum$ContentType.$unknown))
          .toList(),
      not: json['not'] == null
          ? null
          : Input$NestedEnumContentTypeFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$NestedEnumContentTypeFilterToJson(
        Input$NestedEnumContentTypeFilter instance) =>
    <String, dynamic>{
      'equals': _$Enum$ContentTypeEnumMap[instance.equals],
      'in': instance.$in?.map((e) => _$Enum$ContentTypeEnumMap[e]).toList(),
      'notIn':
          instance.notIn?.map((e) => _$Enum$ContentTypeEnumMap[e]).toList(),
      'not': instance.not?.toJson(),
    };

Input$NestedEnumContentTypeWithAggregatesFilter
    _$Input$NestedEnumContentTypeWithAggregatesFilterFromJson(
            Map<String, dynamic> json) =>
        Input$NestedEnumContentTypeWithAggregatesFilter(
          equals: $enumDecodeNullable(_$Enum$ContentTypeEnumMap, json['equals'],
              unknownValue: Enum$ContentType.$unknown),
          $in: (json['in'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(_$Enum$ContentTypeEnumMap, e,
                  unknownValue: Enum$ContentType.$unknown))
              .toList(),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(_$Enum$ContentTypeEnumMap, e,
                  unknownValue: Enum$ContentType.$unknown))
              .toList(),
          not: json['not'] == null
              ? null
              : Input$NestedEnumContentTypeWithAggregatesFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
          $_count: json['_count'] == null
              ? null
              : Input$NestedIntFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$NestedEnumContentTypeFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$NestedEnumContentTypeFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$NestedEnumContentTypeWithAggregatesFilterToJson(
        Input$NestedEnumContentTypeWithAggregatesFilter instance) =>
    <String, dynamic>{
      'equals': _$Enum$ContentTypeEnumMap[instance.equals],
      'in': instance.$in?.map((e) => _$Enum$ContentTypeEnumMap[e]).toList(),
      'notIn':
          instance.notIn?.map((e) => _$Enum$ContentTypeEnumMap[e]).toList(),
      'not': instance.not?.toJson(),
      '_count': instance.$_count?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_max': instance.$_max?.toJson(),
    };

Input$NestedEnumIdentityFileTypeFilter
    _$Input$NestedEnumIdentityFileTypeFilterFromJson(
            Map<String, dynamic> json) =>
        Input$NestedEnumIdentityFileTypeFilter(
          equals: $enumDecodeNullable(
              _$Enum$IdentityFileTypeEnumMap, json['equals'],
              unknownValue: Enum$IdentityFileType.$unknown),
          $in: (json['in'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$IdentityFileTypeEnumMap, e,
                  unknownValue: Enum$IdentityFileType.$unknown))
              .toList(),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$IdentityFileTypeEnumMap, e,
                  unknownValue: Enum$IdentityFileType.$unknown))
              .toList(),
          not: json['not'] == null
              ? null
              : Input$NestedEnumIdentityFileTypeFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$NestedEnumIdentityFileTypeFilterToJson(
        Input$NestedEnumIdentityFileTypeFilter instance) =>
    <String, dynamic>{
      'equals': _$Enum$IdentityFileTypeEnumMap[instance.equals],
      'in':
          instance.$in?.map((e) => _$Enum$IdentityFileTypeEnumMap[e]).toList(),
      'notIn': instance.notIn
          ?.map((e) => _$Enum$IdentityFileTypeEnumMap[e])
          .toList(),
      'not': instance.not?.toJson(),
    };

Input$NestedEnumIdentityFileTypeWithAggregatesFilter
    _$Input$NestedEnumIdentityFileTypeWithAggregatesFilterFromJson(
            Map<String, dynamic> json) =>
        Input$NestedEnumIdentityFileTypeWithAggregatesFilter(
          equals: $enumDecodeNullable(
              _$Enum$IdentityFileTypeEnumMap, json['equals'],
              unknownValue: Enum$IdentityFileType.$unknown),
          $in: (json['in'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$IdentityFileTypeEnumMap, e,
                  unknownValue: Enum$IdentityFileType.$unknown))
              .toList(),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$IdentityFileTypeEnumMap, e,
                  unknownValue: Enum$IdentityFileType.$unknown))
              .toList(),
          not: json['not'] == null
              ? null
              : Input$NestedEnumIdentityFileTypeWithAggregatesFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
          $_count: json['_count'] == null
              ? null
              : Input$NestedIntFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$NestedEnumIdentityFileTypeFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$NestedEnumIdentityFileTypeFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$NestedEnumIdentityFileTypeWithAggregatesFilterToJson(
            Input$NestedEnumIdentityFileTypeWithAggregatesFilter instance) =>
        <String, dynamic>{
          'equals': _$Enum$IdentityFileTypeEnumMap[instance.equals],
          'in': instance.$in
              ?.map((e) => _$Enum$IdentityFileTypeEnumMap[e])
              .toList(),
          'notIn': instance.notIn
              ?.map((e) => _$Enum$IdentityFileTypeEnumMap[e])
              .toList(),
          'not': instance.not?.toJson(),
          '_count': instance.$_count?.toJson(),
          '_min': instance.$_min?.toJson(),
          '_max': instance.$_max?.toJson(),
        };

Input$NestedEnumQuestionTypeFilter _$Input$NestedEnumQuestionTypeFilterFromJson(
        Map<String, dynamic> json) =>
    Input$NestedEnumQuestionTypeFilter(
      equals: $enumDecodeNullable(_$Enum$QuestionTypeEnumMap, json['equals'],
          unknownValue: Enum$QuestionType.$unknown),
      $in: (json['in'] as List<dynamic>?)
          ?.map((e) => $enumDecodeNullable(_$Enum$QuestionTypeEnumMap, e,
              unknownValue: Enum$QuestionType.$unknown))
          .toList(),
      notIn: (json['notIn'] as List<dynamic>?)
          ?.map((e) => $enumDecodeNullable(_$Enum$QuestionTypeEnumMap, e,
              unknownValue: Enum$QuestionType.$unknown))
          .toList(),
      not: json['not'] == null
          ? null
          : Input$NestedEnumQuestionTypeFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$NestedEnumQuestionTypeFilterToJson(
        Input$NestedEnumQuestionTypeFilter instance) =>
    <String, dynamic>{
      'equals': _$Enum$QuestionTypeEnumMap[instance.equals],
      'in': instance.$in?.map((e) => _$Enum$QuestionTypeEnumMap[e]).toList(),
      'notIn':
          instance.notIn?.map((e) => _$Enum$QuestionTypeEnumMap[e]).toList(),
      'not': instance.not?.toJson(),
    };

Input$NestedEnumQuestionTypeWithAggregatesFilter
    _$Input$NestedEnumQuestionTypeWithAggregatesFilterFromJson(
            Map<String, dynamic> json) =>
        Input$NestedEnumQuestionTypeWithAggregatesFilter(
          equals: $enumDecodeNullable(
              _$Enum$QuestionTypeEnumMap, json['equals'],
              unknownValue: Enum$QuestionType.$unknown),
          $in: (json['in'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(_$Enum$QuestionTypeEnumMap, e,
                  unknownValue: Enum$QuestionType.$unknown))
              .toList(),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(_$Enum$QuestionTypeEnumMap, e,
                  unknownValue: Enum$QuestionType.$unknown))
              .toList(),
          not: json['not'] == null
              ? null
              : Input$NestedEnumQuestionTypeWithAggregatesFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
          $_count: json['_count'] == null
              ? null
              : Input$NestedIntFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$NestedEnumQuestionTypeFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$NestedEnumQuestionTypeFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$NestedEnumQuestionTypeWithAggregatesFilterToJson(
        Input$NestedEnumQuestionTypeWithAggregatesFilter instance) =>
    <String, dynamic>{
      'equals': _$Enum$QuestionTypeEnumMap[instance.equals],
      'in': instance.$in?.map((e) => _$Enum$QuestionTypeEnumMap[e]).toList(),
      'notIn':
          instance.notIn?.map((e) => _$Enum$QuestionTypeEnumMap[e]).toList(),
      'not': instance.not?.toJson(),
      '_count': instance.$_count?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_max': instance.$_max?.toJson(),
    };

Input$NestedEnumRolesFilter _$Input$NestedEnumRolesFilterFromJson(
        Map<String, dynamic> json) =>
    Input$NestedEnumRolesFilter(
      equals: $enumDecodeNullable(_$Enum$RolesEnumMap, json['equals'],
          unknownValue: Enum$Roles.$unknown),
      $in: (json['in'] as List<dynamic>?)
          ?.map((e) => $enumDecodeNullable(_$Enum$RolesEnumMap, e,
              unknownValue: Enum$Roles.$unknown))
          .toList(),
      notIn: (json['notIn'] as List<dynamic>?)
          ?.map((e) => $enumDecodeNullable(_$Enum$RolesEnumMap, e,
              unknownValue: Enum$Roles.$unknown))
          .toList(),
      not: json['not'] == null
          ? null
          : Input$NestedEnumRolesFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$NestedEnumRolesFilterToJson(
        Input$NestedEnumRolesFilter instance) =>
    <String, dynamic>{
      'equals': _$Enum$RolesEnumMap[instance.equals],
      'in': instance.$in?.map((e) => _$Enum$RolesEnumMap[e]).toList(),
      'notIn': instance.notIn?.map((e) => _$Enum$RolesEnumMap[e]).toList(),
      'not': instance.not?.toJson(),
    };

Input$NestedEnumRolesWithAggregatesFilter
    _$Input$NestedEnumRolesWithAggregatesFilterFromJson(
            Map<String, dynamic> json) =>
        Input$NestedEnumRolesWithAggregatesFilter(
          equals: $enumDecodeNullable(_$Enum$RolesEnumMap, json['equals'],
              unknownValue: Enum$Roles.$unknown),
          $in: (json['in'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(_$Enum$RolesEnumMap, e,
                  unknownValue: Enum$Roles.$unknown))
              .toList(),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(_$Enum$RolesEnumMap, e,
                  unknownValue: Enum$Roles.$unknown))
              .toList(),
          not: json['not'] == null
              ? null
              : Input$NestedEnumRolesWithAggregatesFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
          $_count: json['_count'] == null
              ? null
              : Input$NestedIntFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$NestedEnumRolesFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$NestedEnumRolesFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$NestedEnumRolesWithAggregatesFilterToJson(
        Input$NestedEnumRolesWithAggregatesFilter instance) =>
    <String, dynamic>{
      'equals': _$Enum$RolesEnumMap[instance.equals],
      'in': instance.$in?.map((e) => _$Enum$RolesEnumMap[e]).toList(),
      'notIn': instance.notIn?.map((e) => _$Enum$RolesEnumMap[e]).toList(),
      'not': instance.not?.toJson(),
      '_count': instance.$_count?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_max': instance.$_max?.toJson(),
    };

Input$NestedEnumVerifyTypeNullableFilter
    _$Input$NestedEnumVerifyTypeNullableFilterFromJson(
            Map<String, dynamic> json) =>
        Input$NestedEnumVerifyTypeNullableFilter(
          equals: $enumDecodeNullable(_$Enum$VerifyTypeEnumMap, json['equals'],
              unknownValue: Enum$VerifyType.$unknown),
          $in: (json['in'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(_$Enum$VerifyTypeEnumMap, e,
                  unknownValue: Enum$VerifyType.$unknown))
              .toList(),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(_$Enum$VerifyTypeEnumMap, e,
                  unknownValue: Enum$VerifyType.$unknown))
              .toList(),
          not: json['not'] == null
              ? null
              : Input$NestedEnumVerifyTypeNullableFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$NestedEnumVerifyTypeNullableFilterToJson(
        Input$NestedEnumVerifyTypeNullableFilter instance) =>
    <String, dynamic>{
      'equals': _$Enum$VerifyTypeEnumMap[instance.equals],
      'in': instance.$in?.map((e) => _$Enum$VerifyTypeEnumMap[e]).toList(),
      'notIn': instance.notIn?.map((e) => _$Enum$VerifyTypeEnumMap[e]).toList(),
      'not': instance.not?.toJson(),
    };

Input$NestedEnumVerifyTypeNullableWithAggregatesFilter
    _$Input$NestedEnumVerifyTypeNullableWithAggregatesFilterFromJson(
            Map<String, dynamic> json) =>
        Input$NestedEnumVerifyTypeNullableWithAggregatesFilter(
          equals: $enumDecodeNullable(_$Enum$VerifyTypeEnumMap, json['equals'],
              unknownValue: Enum$VerifyType.$unknown),
          $in: (json['in'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(_$Enum$VerifyTypeEnumMap, e,
                  unknownValue: Enum$VerifyType.$unknown))
              .toList(),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(_$Enum$VerifyTypeEnumMap, e,
                  unknownValue: Enum$VerifyType.$unknown))
              .toList(),
          not: json['not'] == null
              ? null
              : Input$NestedEnumVerifyTypeNullableWithAggregatesFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
          $_count: json['_count'] == null
              ? null
              : Input$NestedIntNullableFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$NestedEnumVerifyTypeNullableFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$NestedEnumVerifyTypeNullableFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$NestedEnumVerifyTypeNullableWithAggregatesFilterToJson(
            Input$NestedEnumVerifyTypeNullableWithAggregatesFilter instance) =>
        <String, dynamic>{
          'equals': _$Enum$VerifyTypeEnumMap[instance.equals],
          'in': instance.$in?.map((e) => _$Enum$VerifyTypeEnumMap[e]).toList(),
          'notIn':
              instance.notIn?.map((e) => _$Enum$VerifyTypeEnumMap[e]).toList(),
          'not': instance.not?.toJson(),
          '_count': instance.$_count?.toJson(),
          '_min': instance.$_min?.toJson(),
          '_max': instance.$_max?.toJson(),
        };

Input$NestedFloatFilter _$Input$NestedFloatFilterFromJson(
        Map<String, dynamic> json) =>
    Input$NestedFloatFilter(
      equals: (json['equals'] as num?)?.toDouble(),
      $in: (json['in'] as List<dynamic>?)
          ?.map((e) => (e as num?)?.toDouble())
          .toList(),
      notIn: (json['notIn'] as List<dynamic>?)
          ?.map((e) => (e as num?)?.toDouble())
          .toList(),
      lt: (json['lt'] as num?)?.toDouble(),
      lte: (json['lte'] as num?)?.toDouble(),
      gt: (json['gt'] as num?)?.toDouble(),
      gte: (json['gte'] as num?)?.toDouble(),
      not: json['not'] == null
          ? null
          : Input$NestedFloatFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$NestedFloatFilterToJson(
        Input$NestedFloatFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'not': instance.not?.toJson(),
    };

Input$NestedFloatNullableFilter _$Input$NestedFloatNullableFilterFromJson(
        Map<String, dynamic> json) =>
    Input$NestedFloatNullableFilter(
      equals: (json['equals'] as num?)?.toDouble(),
      $in: (json['in'] as List<dynamic>?)
          ?.map((e) => (e as num?)?.toDouble())
          .toList(),
      notIn: (json['notIn'] as List<dynamic>?)
          ?.map((e) => (e as num?)?.toDouble())
          .toList(),
      lt: (json['lt'] as num?)?.toDouble(),
      lte: (json['lte'] as num?)?.toDouble(),
      gt: (json['gt'] as num?)?.toDouble(),
      gte: (json['gte'] as num?)?.toDouble(),
      not: json['not'] == null
          ? null
          : Input$NestedFloatNullableFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$NestedFloatNullableFilterToJson(
        Input$NestedFloatNullableFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'not': instance.not?.toJson(),
    };

Input$NestedFloatWithAggregatesFilter
    _$Input$NestedFloatWithAggregatesFilterFromJson(
            Map<String, dynamic> json) =>
        Input$NestedFloatWithAggregatesFilter(
          equals: (json['equals'] as num?)?.toDouble(),
          $in: (json['in'] as List<dynamic>?)
              ?.map((e) => (e as num?)?.toDouble())
              .toList(),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => (e as num?)?.toDouble())
              .toList(),
          lt: (json['lt'] as num?)?.toDouble(),
          lte: (json['lte'] as num?)?.toDouble(),
          gt: (json['gt'] as num?)?.toDouble(),
          gte: (json['gte'] as num?)?.toDouble(),
          not: json['not'] == null
              ? null
              : Input$NestedFloatWithAggregatesFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
          $_count: json['_count'] == null
              ? null
              : Input$NestedIntFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_avg: json['_avg'] == null
              ? null
              : Input$NestedFloatFilter.fromJson(
                  json['_avg'] as Map<String, dynamic>),
          $_sum: json['_sum'] == null
              ? null
              : Input$NestedFloatFilter.fromJson(
                  json['_sum'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$NestedFloatFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$NestedFloatFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$NestedFloatWithAggregatesFilterToJson(
        Input$NestedFloatWithAggregatesFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'not': instance.not?.toJson(),
      '_count': instance.$_count?.toJson(),
      '_avg': instance.$_avg?.toJson(),
      '_sum': instance.$_sum?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_max': instance.$_max?.toJson(),
    };

Input$NestedIntFilter _$Input$NestedIntFilterFromJson(
        Map<String, dynamic> json) =>
    Input$NestedIntFilter(
      equals: json['equals'] as int?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as int?).toList(),
      notIn: (json['notIn'] as List<dynamic>?)?.map((e) => e as int?).toList(),
      lt: json['lt'] as int?,
      lte: json['lte'] as int?,
      gt: json['gt'] as int?,
      gte: json['gte'] as int?,
      not: json['not'] == null
          ? null
          : Input$NestedIntFilter.fromJson(json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$NestedIntFilterToJson(
        Input$NestedIntFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'not': instance.not?.toJson(),
    };

Input$NestedIntNullableFilter _$Input$NestedIntNullableFilterFromJson(
        Map<String, dynamic> json) =>
    Input$NestedIntNullableFilter(
      equals: json['equals'] as int?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as int?).toList(),
      notIn: (json['notIn'] as List<dynamic>?)?.map((e) => e as int?).toList(),
      lt: json['lt'] as int?,
      lte: json['lte'] as int?,
      gt: json['gt'] as int?,
      gte: json['gte'] as int?,
      not: json['not'] == null
          ? null
          : Input$NestedIntNullableFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$NestedIntNullableFilterToJson(
        Input$NestedIntNullableFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'not': instance.not?.toJson(),
    };

Input$NestedIntNullableWithAggregatesFilter
    _$Input$NestedIntNullableWithAggregatesFilterFromJson(
            Map<String, dynamic> json) =>
        Input$NestedIntNullableWithAggregatesFilter(
          equals: json['equals'] as int?,
          $in: (json['in'] as List<dynamic>?)?.map((e) => e as int?).toList(),
          notIn:
              (json['notIn'] as List<dynamic>?)?.map((e) => e as int?).toList(),
          lt: json['lt'] as int?,
          lte: json['lte'] as int?,
          gt: json['gt'] as int?,
          gte: json['gte'] as int?,
          not: json['not'] == null
              ? null
              : Input$NestedIntNullableWithAggregatesFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
          $_count: json['_count'] == null
              ? null
              : Input$NestedIntNullableFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_avg: json['_avg'] == null
              ? null
              : Input$NestedFloatNullableFilter.fromJson(
                  json['_avg'] as Map<String, dynamic>),
          $_sum: json['_sum'] == null
              ? null
              : Input$NestedIntNullableFilter.fromJson(
                  json['_sum'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$NestedIntNullableFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$NestedIntNullableFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$NestedIntNullableWithAggregatesFilterToJson(
        Input$NestedIntNullableWithAggregatesFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'not': instance.not?.toJson(),
      '_count': instance.$_count?.toJson(),
      '_avg': instance.$_avg?.toJson(),
      '_sum': instance.$_sum?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_max': instance.$_max?.toJson(),
    };

Input$NestedIntWithAggregatesFilter
    _$Input$NestedIntWithAggregatesFilterFromJson(Map<String, dynamic> json) =>
        Input$NestedIntWithAggregatesFilter(
          equals: json['equals'] as int?,
          $in: (json['in'] as List<dynamic>?)?.map((e) => e as int?).toList(),
          notIn:
              (json['notIn'] as List<dynamic>?)?.map((e) => e as int?).toList(),
          lt: json['lt'] as int?,
          lte: json['lte'] as int?,
          gt: json['gt'] as int?,
          gte: json['gte'] as int?,
          not: json['not'] == null
              ? null
              : Input$NestedIntWithAggregatesFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
          $_count: json['_count'] == null
              ? null
              : Input$NestedIntFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_avg: json['_avg'] == null
              ? null
              : Input$NestedFloatFilter.fromJson(
                  json['_avg'] as Map<String, dynamic>),
          $_sum: json['_sum'] == null
              ? null
              : Input$NestedIntFilter.fromJson(
                  json['_sum'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$NestedIntFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$NestedIntFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$NestedIntWithAggregatesFilterToJson(
        Input$NestedIntWithAggregatesFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'not': instance.not?.toJson(),
      '_count': instance.$_count?.toJson(),
      '_avg': instance.$_avg?.toJson(),
      '_sum': instance.$_sum?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_max': instance.$_max?.toJson(),
    };

Input$NestedStringFilter _$Input$NestedStringFilterFromJson(
        Map<String, dynamic> json) =>
    Input$NestedStringFilter(
      equals: json['equals'] as String?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as String?).toList(),
      notIn:
          (json['notIn'] as List<dynamic>?)?.map((e) => e as String?).toList(),
      lt: json['lt'] as String?,
      lte: json['lte'] as String?,
      gt: json['gt'] as String?,
      gte: json['gte'] as String?,
      contains: json['contains'] as String?,
      startsWith: json['startsWith'] as String?,
      endsWith: json['endsWith'] as String?,
      not: json['not'] == null
          ? null
          : Input$NestedStringFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$NestedStringFilterToJson(
        Input$NestedStringFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'contains': instance.contains,
      'startsWith': instance.startsWith,
      'endsWith': instance.endsWith,
      'not': instance.not?.toJson(),
    };

Input$NestedStringNullableFilter _$Input$NestedStringNullableFilterFromJson(
        Map<String, dynamic> json) =>
    Input$NestedStringNullableFilter(
      equals: json['equals'] as String?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as String?).toList(),
      notIn:
          (json['notIn'] as List<dynamic>?)?.map((e) => e as String?).toList(),
      lt: json['lt'] as String?,
      lte: json['lte'] as String?,
      gt: json['gt'] as String?,
      gte: json['gte'] as String?,
      contains: json['contains'] as String?,
      startsWith: json['startsWith'] as String?,
      endsWith: json['endsWith'] as String?,
      not: json['not'] == null
          ? null
          : Input$NestedStringNullableFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$NestedStringNullableFilterToJson(
        Input$NestedStringNullableFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'contains': instance.contains,
      'startsWith': instance.startsWith,
      'endsWith': instance.endsWith,
      'not': instance.not?.toJson(),
    };

Input$NestedStringNullableWithAggregatesFilter
    _$Input$NestedStringNullableWithAggregatesFilterFromJson(
            Map<String, dynamic> json) =>
        Input$NestedStringNullableWithAggregatesFilter(
          equals: json['equals'] as String?,
          $in:
              (json['in'] as List<dynamic>?)?.map((e) => e as String?).toList(),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          lt: json['lt'] as String?,
          lte: json['lte'] as String?,
          gt: json['gt'] as String?,
          gte: json['gte'] as String?,
          contains: json['contains'] as String?,
          startsWith: json['startsWith'] as String?,
          endsWith: json['endsWith'] as String?,
          not: json['not'] == null
              ? null
              : Input$NestedStringNullableWithAggregatesFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
          $_count: json['_count'] == null
              ? null
              : Input$NestedIntNullableFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$NestedStringNullableFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$NestedStringNullableFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$NestedStringNullableWithAggregatesFilterToJson(
        Input$NestedStringNullableWithAggregatesFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'contains': instance.contains,
      'startsWith': instance.startsWith,
      'endsWith': instance.endsWith,
      'not': instance.not?.toJson(),
      '_count': instance.$_count?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_max': instance.$_max?.toJson(),
    };

Input$NestedStringWithAggregatesFilter
    _$Input$NestedStringWithAggregatesFilterFromJson(
            Map<String, dynamic> json) =>
        Input$NestedStringWithAggregatesFilter(
          equals: json['equals'] as String?,
          $in:
              (json['in'] as List<dynamic>?)?.map((e) => e as String?).toList(),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          lt: json['lt'] as String?,
          lte: json['lte'] as String?,
          gt: json['gt'] as String?,
          gte: json['gte'] as String?,
          contains: json['contains'] as String?,
          startsWith: json['startsWith'] as String?,
          endsWith: json['endsWith'] as String?,
          not: json['not'] == null
              ? null
              : Input$NestedStringWithAggregatesFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
          $_count: json['_count'] == null
              ? null
              : Input$NestedIntFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$NestedStringFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$NestedStringFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$NestedStringWithAggregatesFilterToJson(
        Input$NestedStringWithAggregatesFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'contains': instance.contains,
      'startsWith': instance.startsWith,
      'endsWith': instance.endsWith,
      'not': instance.not?.toJson(),
      '_count': instance.$_count?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_max': instance.$_max?.toJson(),
    };

Input$NotificationCountOrderByAggregateInput
    _$Input$NotificationCountOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationCountOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          picturePath: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['picturePath'],
              unknownValue: Enum$SortOrder.$unknown),
          title: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['title'],
              unknownValue: Enum$SortOrder.$unknown),
          message: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['message'],
              unknownValue: Enum$SortOrder.$unknown),
          isRead: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['isRead'],
              unknownValue: Enum$SortOrder.$unknown),
          followUpContext: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['followUpContext'],
              unknownValue: Enum$SortOrder.$unknown),
          followUpData: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['followUpData'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$NotificationCountOrderByAggregateInputToJson(
        Input$NotificationCountOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'picturePath': _$Enum$SortOrderEnumMap[instance.picturePath],
      'title': _$Enum$SortOrderEnumMap[instance.title],
      'message': _$Enum$SortOrderEnumMap[instance.message],
      'isRead': _$Enum$SortOrderEnumMap[instance.isRead],
      'followUpContext': _$Enum$SortOrderEnumMap[instance.followUpContext],
      'followUpData': _$Enum$SortOrderEnumMap[instance.followUpData],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$NotificationCreateInput _$Input$NotificationCreateInputFromJson(
        Map<String, dynamic> json) =>
    Input$NotificationCreateInput(
      id: json['id'] as String?,
      picturePath: json['picturePath'] as String?,
      title: json['title'] as String,
      message: json['message'] as String,
      isRead: json['isRead'] as bool?,
      followUpContext: json['followUpContext'] as String?,
      followUpData: json['followUpData'] as String?,
      user: Input$UserCreateNestedOneWithoutNotificationsInput.fromJson(
          json['user'] as Map<String, dynamic>),
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
    );

Map<String, dynamic> _$Input$NotificationCreateInputToJson(
        Input$NotificationCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'picturePath': instance.picturePath,
      'title': instance.title,
      'message': instance.message,
      'isRead': instance.isRead,
      'followUpContext': instance.followUpContext,
      'followUpData': instance.followUpData,
      'user': instance.user.toJson(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$NotificationCreateManyInput _$Input$NotificationCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    Input$NotificationCreateManyInput(
      id: json['id'] as String?,
      picturePath: json['picturePath'] as String?,
      title: json['title'] as String,
      message: json['message'] as String,
      isRead: json['isRead'] as bool?,
      followUpContext: json['followUpContext'] as String?,
      followUpData: json['followUpData'] as String?,
      userId: json['userId'] as String,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
    );

Map<String, dynamic> _$Input$NotificationCreateManyInputToJson(
        Input$NotificationCreateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'picturePath': instance.picturePath,
      'title': instance.title,
      'message': instance.message,
      'isRead': instance.isRead,
      'followUpContext': instance.followUpContext,
      'followUpData': instance.followUpData,
      'userId': instance.userId,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$NotificationCreateManyUserInput
    _$Input$NotificationCreateManyUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationCreateManyUserInput(
          id: json['id'] as String?,
          picturePath: json['picturePath'] as String?,
          title: json['title'] as String,
          message: json['message'] as String,
          isRead: json['isRead'] as bool?,
          followUpContext: json['followUpContext'] as String?,
          followUpData: json['followUpData'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$NotificationCreateManyUserInputToJson(
        Input$NotificationCreateManyUserInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'picturePath': instance.picturePath,
      'title': instance.title,
      'message': instance.message,
      'isRead': instance.isRead,
      'followUpContext': instance.followUpContext,
      'followUpData': instance.followUpData,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$NotificationCreateManyUserInputEnvelope
    _$Input$NotificationCreateManyUserInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationCreateManyUserInputEnvelope(
          data: Input$NotificationCreateManyUserInput.fromJson(
              json['data'] as Map<String, dynamic>),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$Input$NotificationCreateManyUserInputEnvelopeToJson(
        Input$NotificationCreateManyUserInputEnvelope instance) =>
    <String, dynamic>{
      'data': instance.data.toJson(),
      'skipDuplicates': instance.skipDuplicates,
    };

Input$NotificationCreateNestedManyWithoutUserInput
    _$Input$NotificationCreateNestedManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationCreateNestedManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$NotificationCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$NotificationCreateNestedManyWithoutUserInputToJson(
        Input$NotificationCreateNestedManyWithoutUserInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$NotificationCreateOrConnectWithoutUserInput
    _$Input$NotificationCreateOrConnectWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationCreateOrConnectWithoutUserInput(
          where: Input$NotificationWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$NotificationUncheckedCreateWithoutUserInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$NotificationCreateOrConnectWithoutUserInputToJson(
        Input$NotificationCreateOrConnectWithoutUserInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$NotificationCreateWithoutUserInput
    _$Input$NotificationCreateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationCreateWithoutUserInput(
          id: json['id'] as String?,
          picturePath: json['picturePath'] as String?,
          title: json['title'] as String,
          message: json['message'] as String,
          isRead: json['isRead'] as bool?,
          followUpContext: json['followUpContext'] as String?,
          followUpData: json['followUpData'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$NotificationCreateWithoutUserInputToJson(
        Input$NotificationCreateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'picturePath': instance.picturePath,
      'title': instance.title,
      'message': instance.message,
      'isRead': instance.isRead,
      'followUpContext': instance.followUpContext,
      'followUpData': instance.followUpData,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$NotificationListRelationFilter
    _$Input$NotificationListRelationFilterFromJson(Map<String, dynamic> json) =>
        Input$NotificationListRelationFilter(
          every: json['every'] == null
              ? null
              : Input$NotificationWhereInput.fromJson(
                  json['every'] as Map<String, dynamic>),
          some: json['some'] == null
              ? null
              : Input$NotificationWhereInput.fromJson(
                  json['some'] as Map<String, dynamic>),
          none: json['none'] == null
              ? null
              : Input$NotificationWhereInput.fromJson(
                  json['none'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$NotificationListRelationFilterToJson(
        Input$NotificationListRelationFilter instance) =>
    <String, dynamic>{
      'every': instance.every?.toJson(),
      'some': instance.some?.toJson(),
      'none': instance.none?.toJson(),
    };

Input$NotificationMaxOrderByAggregateInput
    _$Input$NotificationMaxOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationMaxOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          picturePath: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['picturePath'],
              unknownValue: Enum$SortOrder.$unknown),
          title: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['title'],
              unknownValue: Enum$SortOrder.$unknown),
          message: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['message'],
              unknownValue: Enum$SortOrder.$unknown),
          isRead: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['isRead'],
              unknownValue: Enum$SortOrder.$unknown),
          followUpContext: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['followUpContext'],
              unknownValue: Enum$SortOrder.$unknown),
          followUpData: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['followUpData'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$NotificationMaxOrderByAggregateInputToJson(
        Input$NotificationMaxOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'picturePath': _$Enum$SortOrderEnumMap[instance.picturePath],
      'title': _$Enum$SortOrderEnumMap[instance.title],
      'message': _$Enum$SortOrderEnumMap[instance.message],
      'isRead': _$Enum$SortOrderEnumMap[instance.isRead],
      'followUpContext': _$Enum$SortOrderEnumMap[instance.followUpContext],
      'followUpData': _$Enum$SortOrderEnumMap[instance.followUpData],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$NotificationMinOrderByAggregateInput
    _$Input$NotificationMinOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationMinOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          picturePath: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['picturePath'],
              unknownValue: Enum$SortOrder.$unknown),
          title: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['title'],
              unknownValue: Enum$SortOrder.$unknown),
          message: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['message'],
              unknownValue: Enum$SortOrder.$unknown),
          isRead: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['isRead'],
              unknownValue: Enum$SortOrder.$unknown),
          followUpContext: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['followUpContext'],
              unknownValue: Enum$SortOrder.$unknown),
          followUpData: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['followUpData'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$NotificationMinOrderByAggregateInputToJson(
        Input$NotificationMinOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'picturePath': _$Enum$SortOrderEnumMap[instance.picturePath],
      'title': _$Enum$SortOrderEnumMap[instance.title],
      'message': _$Enum$SortOrderEnumMap[instance.message],
      'isRead': _$Enum$SortOrderEnumMap[instance.isRead],
      'followUpContext': _$Enum$SortOrderEnumMap[instance.followUpContext],
      'followUpData': _$Enum$SortOrderEnumMap[instance.followUpData],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$NotificationOrderByRelationAggregateInput
    _$Input$NotificationOrderByRelationAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationOrderByRelationAggregateInput(
          $_count: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['_count'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$NotificationOrderByRelationAggregateInputToJson(
        Input$NotificationOrderByRelationAggregateInput instance) =>
    <String, dynamic>{
      '_count': _$Enum$SortOrderEnumMap[instance.$_count],
    };

Input$NotificationOrderByWithAggregationInput
    _$Input$NotificationOrderByWithAggregationInputFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationOrderByWithAggregationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          picturePath: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['picturePath'],
              unknownValue: Enum$SortOrder.$unknown),
          title: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['title'],
              unknownValue: Enum$SortOrder.$unknown),
          message: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['message'],
              unknownValue: Enum$SortOrder.$unknown),
          isRead: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['isRead'],
              unknownValue: Enum$SortOrder.$unknown),
          followUpContext: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['followUpContext'],
              unknownValue: Enum$SortOrder.$unknown),
          followUpData: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['followUpData'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          $_count: json['_count'] == null
              ? null
              : Input$NotificationCountOrderByAggregateInput.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$NotificationMaxOrderByAggregateInput.fromJson(
                  json['_max'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$NotificationMinOrderByAggregateInput.fromJson(
                  json['_min'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$NotificationOrderByWithAggregationInputToJson(
        Input$NotificationOrderByWithAggregationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'picturePath': _$Enum$SortOrderEnumMap[instance.picturePath],
      'title': _$Enum$SortOrderEnumMap[instance.title],
      'message': _$Enum$SortOrderEnumMap[instance.message],
      'isRead': _$Enum$SortOrderEnumMap[instance.isRead],
      'followUpContext': _$Enum$SortOrderEnumMap[instance.followUpContext],
      'followUpData': _$Enum$SortOrderEnumMap[instance.followUpData],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      '_count': instance.$_count?.toJson(),
      '_max': instance.$_max?.toJson(),
      '_min': instance.$_min?.toJson(),
    };

Input$NotificationOrderByWithRelationInput
    _$Input$NotificationOrderByWithRelationInputFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationOrderByWithRelationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          picturePath: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['picturePath'],
              unknownValue: Enum$SortOrder.$unknown),
          title: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['title'],
              unknownValue: Enum$SortOrder.$unknown),
          message: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['message'],
              unknownValue: Enum$SortOrder.$unknown),
          isRead: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['isRead'],
              unknownValue: Enum$SortOrder.$unknown),
          followUpContext: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['followUpContext'],
              unknownValue: Enum$SortOrder.$unknown),
          followUpData: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['followUpData'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          user: json['user'] == null
              ? null
              : Input$UserOrderByWithRelationInput.fromJson(
                  json['user'] as Map<String, dynamic>),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$NotificationOrderByWithRelationInputToJson(
        Input$NotificationOrderByWithRelationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'picturePath': _$Enum$SortOrderEnumMap[instance.picturePath],
      'title': _$Enum$SortOrderEnumMap[instance.title],
      'message': _$Enum$SortOrderEnumMap[instance.message],
      'isRead': _$Enum$SortOrderEnumMap[instance.isRead],
      'followUpContext': _$Enum$SortOrderEnumMap[instance.followUpContext],
      'followUpData': _$Enum$SortOrderEnumMap[instance.followUpData],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'user': instance.user?.toJson(),
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$NotificationScalarWhereInput _$Input$NotificationScalarWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$NotificationScalarWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$NotificationScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$NotificationScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$NotificationScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      picturePath: json['picturePath'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['picturePath'] as Map<String, dynamic>),
      title: json['title'] == null
          ? null
          : Input$StringFilter.fromJson(json['title'] as Map<String, dynamic>),
      message: json['message'] == null
          ? null
          : Input$StringFilter.fromJson(
              json['message'] as Map<String, dynamic>),
      isRead: json['isRead'] == null
          ? null
          : Input$BoolFilter.fromJson(json['isRead'] as Map<String, dynamic>),
      followUpContext: json['followUpContext'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['followUpContext'] as Map<String, dynamic>),
      followUpData: json['followUpData'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['followUpData'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : Input$StringFilter.fromJson(json['userId'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$NotificationScalarWhereInputToJson(
        Input$NotificationScalarWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'picturePath': instance.picturePath?.toJson(),
      'title': instance.title?.toJson(),
      'message': instance.message?.toJson(),
      'isRead': instance.isRead?.toJson(),
      'followUpContext': instance.followUpContext?.toJson(),
      'followUpData': instance.followUpData?.toJson(),
      'userId': instance.userId?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$NotificationScalarWhereWithAggregatesInput
    _$Input$NotificationScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          OR: (json['OR'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          NOT: (json['NOT'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          id: json['id'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['id'] as Map<String, dynamic>),
          picturePath: json['picturePath'] == null
              ? null
              : Input$StringNullableWithAggregatesFilter.fromJson(
                  json['picturePath'] as Map<String, dynamic>),
          title: json['title'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['title'] as Map<String, dynamic>),
          message: json['message'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['message'] as Map<String, dynamic>),
          isRead: json['isRead'] == null
              ? null
              : Input$BoolWithAggregatesFilter.fromJson(
                  json['isRead'] as Map<String, dynamic>),
          followUpContext: json['followUpContext'] == null
              ? null
              : Input$StringNullableWithAggregatesFilter.fromJson(
                  json['followUpContext'] as Map<String, dynamic>),
          followUpData: json['followUpData'] == null
              ? null
              : Input$StringNullableWithAggregatesFilter.fromJson(
                  json['followUpData'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['userId'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$NotificationScalarWhereWithAggregatesInputToJson(
        Input$NotificationScalarWhereWithAggregatesInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'picturePath': instance.picturePath?.toJson(),
      'title': instance.title?.toJson(),
      'message': instance.message?.toJson(),
      'isRead': instance.isRead?.toJson(),
      'followUpContext': instance.followUpContext?.toJson(),
      'followUpData': instance.followUpData?.toJson(),
      'userId': instance.userId?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$NotificationUncheckedCreateInput
    _$Input$NotificationUncheckedCreateInputFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationUncheckedCreateInput(
          id: json['id'] as String?,
          picturePath: json['picturePath'] as String?,
          title: json['title'] as String,
          message: json['message'] as String,
          isRead: json['isRead'] as bool?,
          followUpContext: json['followUpContext'] as String?,
          followUpData: json['followUpData'] as String?,
          userId: json['userId'] as String,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$NotificationUncheckedCreateInputToJson(
        Input$NotificationUncheckedCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'picturePath': instance.picturePath,
      'title': instance.title,
      'message': instance.message,
      'isRead': instance.isRead,
      'followUpContext': instance.followUpContext,
      'followUpData': instance.followUpData,
      'userId': instance.userId,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$NotificationUncheckedCreateNestedManyWithoutUserInput
    _$Input$NotificationUncheckedCreateNestedManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationUncheckedCreateNestedManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$NotificationCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$NotificationUncheckedCreateNestedManyWithoutUserInputToJson(
            Input$NotificationUncheckedCreateNestedManyWithoutUserInput
                instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
        };

Input$NotificationUncheckedCreateWithoutUserInput
    _$Input$NotificationUncheckedCreateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationUncheckedCreateWithoutUserInput(
          id: json['id'] as String?,
          picturePath: json['picturePath'] as String?,
          title: json['title'] as String,
          message: json['message'] as String,
          isRead: json['isRead'] as bool?,
          followUpContext: json['followUpContext'] as String?,
          followUpData: json['followUpData'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$NotificationUncheckedCreateWithoutUserInputToJson(
        Input$NotificationUncheckedCreateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'picturePath': instance.picturePath,
      'title': instance.title,
      'message': instance.message,
      'isRead': instance.isRead,
      'followUpContext': instance.followUpContext,
      'followUpData': instance.followUpData,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$NotificationUncheckedUpdateInput
    _$Input$NotificationUncheckedUpdateInputFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationUncheckedUpdateInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          picturePath: json['picturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['picturePath'] as Map<String, dynamic>),
          title: json['title'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['title'] as Map<String, dynamic>),
          message: json['message'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['message'] as Map<String, dynamic>),
          isRead: json['isRead'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isRead'] as Map<String, dynamic>),
          followUpContext: json['followUpContext'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['followUpContext'] as Map<String, dynamic>),
          followUpData: json['followUpData'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['followUpData'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$NotificationUncheckedUpdateInputToJson(
        Input$NotificationUncheckedUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'picturePath': instance.picturePath?.toJson(),
      'title': instance.title?.toJson(),
      'message': instance.message?.toJson(),
      'isRead': instance.isRead?.toJson(),
      'followUpContext': instance.followUpContext?.toJson(),
      'followUpData': instance.followUpData?.toJson(),
      'userId': instance.userId?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$NotificationUncheckedUpdateManyInput
    _$Input$NotificationUncheckedUpdateManyInputFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationUncheckedUpdateManyInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          picturePath: json['picturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['picturePath'] as Map<String, dynamic>),
          title: json['title'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['title'] as Map<String, dynamic>),
          message: json['message'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['message'] as Map<String, dynamic>),
          isRead: json['isRead'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isRead'] as Map<String, dynamic>),
          followUpContext: json['followUpContext'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['followUpContext'] as Map<String, dynamic>),
          followUpData: json['followUpData'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['followUpData'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$NotificationUncheckedUpdateManyInputToJson(
        Input$NotificationUncheckedUpdateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'picturePath': instance.picturePath?.toJson(),
      'title': instance.title?.toJson(),
      'message': instance.message?.toJson(),
      'isRead': instance.isRead?.toJson(),
      'followUpContext': instance.followUpContext?.toJson(),
      'followUpData': instance.followUpData?.toJson(),
      'userId': instance.userId?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$NotificationUncheckedUpdateManyWithoutNotificationsInput
    _$Input$NotificationUncheckedUpdateManyWithoutNotificationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationUncheckedUpdateManyWithoutNotificationsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          picturePath: json['picturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['picturePath'] as Map<String, dynamic>),
          title: json['title'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['title'] as Map<String, dynamic>),
          message: json['message'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['message'] as Map<String, dynamic>),
          isRead: json['isRead'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isRead'] as Map<String, dynamic>),
          followUpContext: json['followUpContext'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['followUpContext'] as Map<String, dynamic>),
          followUpData: json['followUpData'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['followUpData'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$NotificationUncheckedUpdateManyWithoutNotificationsInputToJson(
            Input$NotificationUncheckedUpdateManyWithoutNotificationsInput
                instance) =>
        <String, dynamic>{
          'id': instance.id?.toJson(),
          'picturePath': instance.picturePath?.toJson(),
          'title': instance.title?.toJson(),
          'message': instance.message?.toJson(),
          'isRead': instance.isRead?.toJson(),
          'followUpContext': instance.followUpContext?.toJson(),
          'followUpData': instance.followUpData?.toJson(),
          'createdAt': instance.createdAt?.toJson(),
          'updatedAt': instance.updatedAt?.toJson(),
        };

Input$NotificationUncheckedUpdateManyWithoutUserInput
    _$Input$NotificationUncheckedUpdateManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationUncheckedUpdateManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationUpsertWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$NotificationCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationUpdateWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationUpdateManyWithWhereWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$NotificationUncheckedUpdateManyWithoutUserInputToJson(
            Input$NotificationUncheckedUpdateManyWithoutUserInput instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'set': instance.$set?.map((e) => e?.toJson()).toList(),
          'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
          'delete': instance.delete?.map((e) => e?.toJson()).toList(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
          'update': instance.update?.map((e) => e?.toJson()).toList(),
          'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
          'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
        };

Input$NotificationUncheckedUpdateWithoutUserInput
    _$Input$NotificationUncheckedUpdateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationUncheckedUpdateWithoutUserInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          picturePath: json['picturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['picturePath'] as Map<String, dynamic>),
          title: json['title'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['title'] as Map<String, dynamic>),
          message: json['message'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['message'] as Map<String, dynamic>),
          isRead: json['isRead'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isRead'] as Map<String, dynamic>),
          followUpContext: json['followUpContext'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['followUpContext'] as Map<String, dynamic>),
          followUpData: json['followUpData'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['followUpData'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$NotificationUncheckedUpdateWithoutUserInputToJson(
        Input$NotificationUncheckedUpdateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'picturePath': instance.picturePath?.toJson(),
      'title': instance.title?.toJson(),
      'message': instance.message?.toJson(),
      'isRead': instance.isRead?.toJson(),
      'followUpContext': instance.followUpContext?.toJson(),
      'followUpData': instance.followUpData?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$NotificationUpdateInput _$Input$NotificationUpdateInputFromJson(
        Map<String, dynamic> json) =>
    Input$NotificationUpdateInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      picturePath: json['picturePath'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['picturePath'] as Map<String, dynamic>),
      title: json['title'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['title'] as Map<String, dynamic>),
      message: json['message'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['message'] as Map<String, dynamic>),
      isRead: json['isRead'] == null
          ? null
          : Input$BoolFieldUpdateOperationsInput.fromJson(
              json['isRead'] as Map<String, dynamic>),
      followUpContext: json['followUpContext'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['followUpContext'] as Map<String, dynamic>),
      followUpData: json['followUpData'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['followUpData'] as Map<String, dynamic>),
      user: json['user'] == null
          ? null
          : Input$UserUpdateOneRequiredWithoutNotificationsInput.fromJson(
              json['user'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$NotificationUpdateInputToJson(
        Input$NotificationUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'picturePath': instance.picturePath?.toJson(),
      'title': instance.title?.toJson(),
      'message': instance.message?.toJson(),
      'isRead': instance.isRead?.toJson(),
      'followUpContext': instance.followUpContext?.toJson(),
      'followUpData': instance.followUpData?.toJson(),
      'user': instance.user?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$NotificationUpdateManyMutationInput
    _$Input$NotificationUpdateManyMutationInputFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationUpdateManyMutationInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          picturePath: json['picturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['picturePath'] as Map<String, dynamic>),
          title: json['title'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['title'] as Map<String, dynamic>),
          message: json['message'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['message'] as Map<String, dynamic>),
          isRead: json['isRead'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isRead'] as Map<String, dynamic>),
          followUpContext: json['followUpContext'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['followUpContext'] as Map<String, dynamic>),
          followUpData: json['followUpData'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['followUpData'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$NotificationUpdateManyMutationInputToJson(
        Input$NotificationUpdateManyMutationInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'picturePath': instance.picturePath?.toJson(),
      'title': instance.title?.toJson(),
      'message': instance.message?.toJson(),
      'isRead': instance.isRead?.toJson(),
      'followUpContext': instance.followUpContext?.toJson(),
      'followUpData': instance.followUpData?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$NotificationUpdateManyWithoutUserInput
    _$Input$NotificationUpdateManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationUpdateManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationUpsertWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$NotificationCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationUpdateWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationUpdateManyWithWhereWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$NotificationScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$NotificationUpdateManyWithoutUserInputToJson(
        Input$NotificationUpdateManyWithoutUserInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$NotificationUpdateManyWithWhereWithoutUserInput
    _$Input$NotificationUpdateManyWithWhereWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationUpdateManyWithWhereWithoutUserInput(
          where: Input$NotificationScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$NotificationUncheckedUpdateManyWithoutNotificationsInput
              .fromJson(json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$NotificationUpdateManyWithWhereWithoutUserInputToJson(
            Input$NotificationUpdateManyWithWhereWithoutUserInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$NotificationUpdateWithoutUserInput
    _$Input$NotificationUpdateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationUpdateWithoutUserInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          picturePath: json['picturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['picturePath'] as Map<String, dynamic>),
          title: json['title'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['title'] as Map<String, dynamic>),
          message: json['message'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['message'] as Map<String, dynamic>),
          isRead: json['isRead'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isRead'] as Map<String, dynamic>),
          followUpContext: json['followUpContext'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['followUpContext'] as Map<String, dynamic>),
          followUpData: json['followUpData'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['followUpData'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$NotificationUpdateWithoutUserInputToJson(
        Input$NotificationUpdateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'picturePath': instance.picturePath?.toJson(),
      'title': instance.title?.toJson(),
      'message': instance.message?.toJson(),
      'isRead': instance.isRead?.toJson(),
      'followUpContext': instance.followUpContext?.toJson(),
      'followUpData': instance.followUpData?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$NotificationUpdateWithWhereUniqueWithoutUserInput
    _$Input$NotificationUpdateWithWhereUniqueWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationUpdateWithWhereUniqueWithoutUserInput(
          where: Input$NotificationWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$NotificationUncheckedUpdateWithoutUserInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$NotificationUpdateWithWhereUniqueWithoutUserInputToJson(
            Input$NotificationUpdateWithWhereUniqueWithoutUserInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$NotificationUpsertWithWhereUniqueWithoutUserInput
    _$Input$NotificationUpsertWithWhereUniqueWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$NotificationUpsertWithWhereUniqueWithoutUserInput(
          where: Input$NotificationWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: Input$NotificationUncheckedUpdateWithoutUserInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$NotificationUncheckedCreateWithoutUserInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$NotificationUpsertWithWhereUniqueWithoutUserInputToJson(
            Input$NotificationUpsertWithWhereUniqueWithoutUserInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

Input$NotificationWhereInput _$Input$NotificationWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$NotificationWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$NotificationWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$NotificationWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$NotificationWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      picturePath: json['picturePath'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['picturePath'] as Map<String, dynamic>),
      title: json['title'] == null
          ? null
          : Input$StringFilter.fromJson(json['title'] as Map<String, dynamic>),
      message: json['message'] == null
          ? null
          : Input$StringFilter.fromJson(
              json['message'] as Map<String, dynamic>),
      isRead: json['isRead'] == null
          ? null
          : Input$BoolFilter.fromJson(json['isRead'] as Map<String, dynamic>),
      followUpContext: json['followUpContext'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['followUpContext'] as Map<String, dynamic>),
      followUpData: json['followUpData'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['followUpData'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : Input$StringFilter.fromJson(json['userId'] as Map<String, dynamic>),
      user: json['user'] == null
          ? null
          : Input$UserWhereInput.fromJson(json['user'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$NotificationWhereInputToJson(
        Input$NotificationWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'picturePath': instance.picturePath?.toJson(),
      'title': instance.title?.toJson(),
      'message': instance.message?.toJson(),
      'isRead': instance.isRead?.toJson(),
      'followUpContext': instance.followUpContext?.toJson(),
      'followUpData': instance.followUpData?.toJson(),
      'userId': instance.userId?.toJson(),
      'user': instance.user?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$NotificationWhereUniqueInput _$Input$NotificationWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    Input$NotificationWhereUniqueInput(
      id: json['id'] as String?,
    );

Map<String, dynamic> _$Input$NotificationWhereUniqueInputToJson(
        Input$NotificationWhereUniqueInput instance) =>
    <String, dynamic>{
      'id': instance.id,
    };

Input$NullableDateTimeFieldUpdateOperationsInput
    _$Input$NullableDateTimeFieldUpdateOperationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$NullableDateTimeFieldUpdateOperationsInput(
          $set: json['set'] as String?,
        );

Map<String, dynamic> _$Input$NullableDateTimeFieldUpdateOperationsInputToJson(
        Input$NullableDateTimeFieldUpdateOperationsInput instance) =>
    <String, dynamic>{
      'set': instance.$set,
    };

Input$NullableEnumVerifyTypeFieldUpdateOperationsInput
    _$Input$NullableEnumVerifyTypeFieldUpdateOperationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$NullableEnumVerifyTypeFieldUpdateOperationsInput(
          $set: $enumDecodeNullable(_$Enum$VerifyTypeEnumMap, json['set'],
              unknownValue: Enum$VerifyType.$unknown),
        );

Map<String, dynamic>
    _$Input$NullableEnumVerifyTypeFieldUpdateOperationsInputToJson(
            Input$NullableEnumVerifyTypeFieldUpdateOperationsInput instance) =>
        <String, dynamic>{
          'set': _$Enum$VerifyTypeEnumMap[instance.$set],
        };

Input$NullableIntFieldUpdateOperationsInput
    _$Input$NullableIntFieldUpdateOperationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$NullableIntFieldUpdateOperationsInput(
          $set: json['set'] as int?,
          increment: json['increment'] as int?,
          decrement: json['decrement'] as int?,
          multiply: json['multiply'] as int?,
          divide: json['divide'] as int?,
        );

Map<String, dynamic> _$Input$NullableIntFieldUpdateOperationsInputToJson(
        Input$NullableIntFieldUpdateOperationsInput instance) =>
    <String, dynamic>{
      'set': instance.$set,
      'increment': instance.increment,
      'decrement': instance.decrement,
      'multiply': instance.multiply,
      'divide': instance.divide,
    };

Input$NullableStringFieldUpdateOperationsInput
    _$Input$NullableStringFieldUpdateOperationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$NullableStringFieldUpdateOperationsInput(
          $set: json['set'] as String?,
        );

Map<String, dynamic> _$Input$NullableStringFieldUpdateOperationsInputToJson(
        Input$NullableStringFieldUpdateOperationsInput instance) =>
    <String, dynamic>{
      'set': instance.$set,
    };

Input$ProvinceCountOrderByAggregateInput
    _$Input$ProvinceCountOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceCountOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ProvinceCountOrderByAggregateInputToJson(
        Input$ProvinceCountOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$ProvinceCreateInput _$Input$ProvinceCreateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ProvinceCreateInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      regencies: json['regencies'] == null
          ? null
          : Input$RegencyCreateNestedManyWithoutProvinceInput.fromJson(
              json['regencies'] as Map<String, dynamic>),
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
      users: json['users'] == null
          ? null
          : Input$UserCreateNestedManyWithoutProvinceInput.fromJson(
              json['users'] as Map<String, dynamic>),
      School: json['School'] == null
          ? null
          : Input$SchoolCreateNestedManyWithoutProvinceInput.fromJson(
              json['School'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ProvinceCreateInputToJson(
        Input$ProvinceCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'regencies': instance.regencies?.toJson(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'users': instance.users?.toJson(),
      'School': instance.School?.toJson(),
    };

Input$ProvinceCreateManyInput _$Input$ProvinceCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    Input$ProvinceCreateManyInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
    );

Map<String, dynamic> _$Input$ProvinceCreateManyInputToJson(
        Input$ProvinceCreateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$ProvinceCreateNestedOneWithoutRegenciesInput
    _$Input$ProvinceCreateNestedOneWithoutRegenciesInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceCreateNestedOneWithoutRegenciesInput(
          create: json['create'] == null
              ? null
              : Input$ProvinceUncheckedCreateWithoutRegenciesInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$ProvinceCreateOrConnectWithoutRegenciesInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$ProvinceWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceCreateNestedOneWithoutRegenciesInputToJson(
        Input$ProvinceCreateNestedOneWithoutRegenciesInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'connect': instance.connect?.toJson(),
    };

Input$ProvinceCreateNestedOneWithoutSchoolInput
    _$Input$ProvinceCreateNestedOneWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceCreateNestedOneWithoutSchoolInput(
          create: json['create'] == null
              ? null
              : Input$ProvinceUncheckedCreateWithoutSchoolInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$ProvinceCreateOrConnectWithoutSchoolInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$ProvinceWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceCreateNestedOneWithoutSchoolInputToJson(
        Input$ProvinceCreateNestedOneWithoutSchoolInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'connect': instance.connect?.toJson(),
    };

Input$ProvinceCreateNestedOneWithoutUsersInput
    _$Input$ProvinceCreateNestedOneWithoutUsersInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceCreateNestedOneWithoutUsersInput(
          create: json['create'] == null
              ? null
              : Input$ProvinceUncheckedCreateWithoutUsersInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$ProvinceCreateOrConnectWithoutUsersInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$ProvinceWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceCreateNestedOneWithoutUsersInputToJson(
        Input$ProvinceCreateNestedOneWithoutUsersInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'connect': instance.connect?.toJson(),
    };

Input$ProvinceCreateOrConnectWithoutRegenciesInput
    _$Input$ProvinceCreateOrConnectWithoutRegenciesInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceCreateOrConnectWithoutRegenciesInput(
          where: Input$ProvinceWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$ProvinceUncheckedCreateWithoutRegenciesInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceCreateOrConnectWithoutRegenciesInputToJson(
        Input$ProvinceCreateOrConnectWithoutRegenciesInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$ProvinceCreateOrConnectWithoutSchoolInput
    _$Input$ProvinceCreateOrConnectWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceCreateOrConnectWithoutSchoolInput(
          where: Input$ProvinceWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$ProvinceUncheckedCreateWithoutSchoolInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceCreateOrConnectWithoutSchoolInputToJson(
        Input$ProvinceCreateOrConnectWithoutSchoolInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$ProvinceCreateOrConnectWithoutUsersInput
    _$Input$ProvinceCreateOrConnectWithoutUsersInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceCreateOrConnectWithoutUsersInput(
          where: Input$ProvinceWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$ProvinceUncheckedCreateWithoutUsersInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceCreateOrConnectWithoutUsersInputToJson(
        Input$ProvinceCreateOrConnectWithoutUsersInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$ProvinceCreateWithoutRegenciesInput
    _$Input$ProvinceCreateWithoutRegenciesInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceCreateWithoutRegenciesInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          users: json['users'] == null
              ? null
              : Input$UserCreateNestedManyWithoutProvinceInput.fromJson(
                  json['users'] as Map<String, dynamic>),
          School: json['School'] == null
              ? null
              : Input$SchoolCreateNestedManyWithoutProvinceInput.fromJson(
                  json['School'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceCreateWithoutRegenciesInputToJson(
        Input$ProvinceCreateWithoutRegenciesInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'users': instance.users?.toJson(),
      'School': instance.School?.toJson(),
    };

Input$ProvinceCreateWithoutSchoolInput
    _$Input$ProvinceCreateWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceCreateWithoutSchoolInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          regencies: json['regencies'] == null
              ? null
              : Input$RegencyCreateNestedManyWithoutProvinceInput.fromJson(
                  json['regencies'] as Map<String, dynamic>),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          users: json['users'] == null
              ? null
              : Input$UserCreateNestedManyWithoutProvinceInput.fromJson(
                  json['users'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceCreateWithoutSchoolInputToJson(
        Input$ProvinceCreateWithoutSchoolInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'regencies': instance.regencies?.toJson(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'users': instance.users?.toJson(),
    };

Input$ProvinceCreateWithoutUsersInput
    _$Input$ProvinceCreateWithoutUsersInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceCreateWithoutUsersInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          regencies: json['regencies'] == null
              ? null
              : Input$RegencyCreateNestedManyWithoutProvinceInput.fromJson(
                  json['regencies'] as Map<String, dynamic>),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          School: json['School'] == null
              ? null
              : Input$SchoolCreateNestedManyWithoutProvinceInput.fromJson(
                  json['School'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceCreateWithoutUsersInputToJson(
        Input$ProvinceCreateWithoutUsersInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'regencies': instance.regencies?.toJson(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'School': instance.School?.toJson(),
    };

Input$ProvinceMaxOrderByAggregateInput
    _$Input$ProvinceMaxOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceMaxOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ProvinceMaxOrderByAggregateInputToJson(
        Input$ProvinceMaxOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$ProvinceMinOrderByAggregateInput
    _$Input$ProvinceMinOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceMinOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$ProvinceMinOrderByAggregateInputToJson(
        Input$ProvinceMinOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$ProvinceOrderByWithAggregationInput
    _$Input$ProvinceOrderByWithAggregationInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceOrderByWithAggregationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          $_count: json['_count'] == null
              ? null
              : Input$ProvinceCountOrderByAggregateInput.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$ProvinceMaxOrderByAggregateInput.fromJson(
                  json['_max'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$ProvinceMinOrderByAggregateInput.fromJson(
                  json['_min'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceOrderByWithAggregationInputToJson(
        Input$ProvinceOrderByWithAggregationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      '_count': instance.$_count?.toJson(),
      '_max': instance.$_max?.toJson(),
      '_min': instance.$_min?.toJson(),
    };

Input$ProvinceOrderByWithRelationInput
    _$Input$ProvinceOrderByWithRelationInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceOrderByWithRelationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          regencies: json['regencies'] == null
              ? null
              : Input$RegencyOrderByRelationAggregateInput.fromJson(
                  json['regencies'] as Map<String, dynamic>),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          users: json['users'] == null
              ? null
              : Input$UserOrderByRelationAggregateInput.fromJson(
                  json['users'] as Map<String, dynamic>),
          School: json['School'] == null
              ? null
              : Input$SchoolOrderByRelationAggregateInput.fromJson(
                  json['School'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceOrderByWithRelationInputToJson(
        Input$ProvinceOrderByWithRelationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'regencies': instance.regencies?.toJson(),
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      'users': instance.users?.toJson(),
      'School': instance.School?.toJson(),
    };

Input$ProvinceRelationFilter _$Input$ProvinceRelationFilterFromJson(
        Map<String, dynamic> json) =>
    Input$ProvinceRelationFilter(
      $is: json['is'] == null
          ? null
          : Input$ProvinceWhereInput.fromJson(
              json['is'] as Map<String, dynamic>),
      isNot: json['isNot'] == null
          ? null
          : Input$ProvinceWhereInput.fromJson(
              json['isNot'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ProvinceRelationFilterToJson(
        Input$ProvinceRelationFilter instance) =>
    <String, dynamic>{
      'is': instance.$is?.toJson(),
      'isNot': instance.isNot?.toJson(),
    };

Input$ProvinceScalarWhereWithAggregatesInput
    _$Input$ProvinceScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ProvinceScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          OR: (json['OR'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ProvinceScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          NOT: (json['NOT'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$ProvinceScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          id: json['id'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['name'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceScalarWhereWithAggregatesInputToJson(
        Input$ProvinceScalarWhereWithAggregatesInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ProvinceUncheckedCreateInput _$Input$ProvinceUncheckedCreateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ProvinceUncheckedCreateInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      regencies: json['regencies'] == null
          ? null
          : Input$RegencyUncheckedCreateNestedManyWithoutProvinceInput.fromJson(
              json['regencies'] as Map<String, dynamic>),
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
      users: json['users'] == null
          ? null
          : Input$UserUncheckedCreateNestedManyWithoutProvinceInput.fromJson(
              json['users'] as Map<String, dynamic>),
      School: json['School'] == null
          ? null
          : Input$SchoolUncheckedCreateNestedManyWithoutProvinceInput.fromJson(
              json['School'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ProvinceUncheckedCreateInputToJson(
        Input$ProvinceUncheckedCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'regencies': instance.regencies?.toJson(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'users': instance.users?.toJson(),
      'School': instance.School?.toJson(),
    };

Input$ProvinceUncheckedCreateWithoutRegenciesInput
    _$Input$ProvinceUncheckedCreateWithoutRegenciesInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceUncheckedCreateWithoutRegenciesInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          users: json['users'] == null
              ? null
              : Input$UserUncheckedCreateNestedManyWithoutProvinceInput
                  .fromJson(json['users'] as Map<String, dynamic>),
          School: json['School'] == null
              ? null
              : Input$SchoolUncheckedCreateNestedManyWithoutProvinceInput
                  .fromJson(json['School'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceUncheckedCreateWithoutRegenciesInputToJson(
        Input$ProvinceUncheckedCreateWithoutRegenciesInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'users': instance.users?.toJson(),
      'School': instance.School?.toJson(),
    };

Input$ProvinceUncheckedCreateWithoutSchoolInput
    _$Input$ProvinceUncheckedCreateWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceUncheckedCreateWithoutSchoolInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          regencies: json['regencies'] == null
              ? null
              : Input$RegencyUncheckedCreateNestedManyWithoutProvinceInput
                  .fromJson(json['regencies'] as Map<String, dynamic>),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          users: json['users'] == null
              ? null
              : Input$UserUncheckedCreateNestedManyWithoutProvinceInput
                  .fromJson(json['users'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceUncheckedCreateWithoutSchoolInputToJson(
        Input$ProvinceUncheckedCreateWithoutSchoolInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'regencies': instance.regencies?.toJson(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'users': instance.users?.toJson(),
    };

Input$ProvinceUncheckedCreateWithoutUsersInput
    _$Input$ProvinceUncheckedCreateWithoutUsersInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceUncheckedCreateWithoutUsersInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          regencies: json['regencies'] == null
              ? null
              : Input$RegencyUncheckedCreateNestedManyWithoutProvinceInput
                  .fromJson(json['regencies'] as Map<String, dynamic>),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          School: json['School'] == null
              ? null
              : Input$SchoolUncheckedCreateNestedManyWithoutProvinceInput
                  .fromJson(json['School'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceUncheckedCreateWithoutUsersInputToJson(
        Input$ProvinceUncheckedCreateWithoutUsersInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'regencies': instance.regencies?.toJson(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'School': instance.School?.toJson(),
    };

Input$ProvinceUncheckedUpdateInput _$Input$ProvinceUncheckedUpdateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ProvinceUncheckedUpdateInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      regencies: json['regencies'] == null
          ? null
          : Input$RegencyUncheckedUpdateManyWithoutProvinceInput.fromJson(
              json['regencies'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      users: json['users'] == null
          ? null
          : Input$UserUncheckedUpdateManyWithoutProvinceInput.fromJson(
              json['users'] as Map<String, dynamic>),
      School: json['School'] == null
          ? null
          : Input$SchoolUncheckedUpdateManyWithoutProvinceInput.fromJson(
              json['School'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ProvinceUncheckedUpdateInputToJson(
        Input$ProvinceUncheckedUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'regencies': instance.regencies?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'users': instance.users?.toJson(),
      'School': instance.School?.toJson(),
    };

Input$ProvinceUncheckedUpdateManyInput
    _$Input$ProvinceUncheckedUpdateManyInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceUncheckedUpdateManyInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceUncheckedUpdateManyInputToJson(
        Input$ProvinceUncheckedUpdateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ProvinceUncheckedUpdateWithoutRegenciesInput
    _$Input$ProvinceUncheckedUpdateWithoutRegenciesInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceUncheckedUpdateWithoutRegenciesInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          users: json['users'] == null
              ? null
              : Input$UserUncheckedUpdateManyWithoutProvinceInput.fromJson(
                  json['users'] as Map<String, dynamic>),
          School: json['School'] == null
              ? null
              : Input$SchoolUncheckedUpdateManyWithoutProvinceInput.fromJson(
                  json['School'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceUncheckedUpdateWithoutRegenciesInputToJson(
        Input$ProvinceUncheckedUpdateWithoutRegenciesInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'users': instance.users?.toJson(),
      'School': instance.School?.toJson(),
    };

Input$ProvinceUncheckedUpdateWithoutSchoolInput
    _$Input$ProvinceUncheckedUpdateWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceUncheckedUpdateWithoutSchoolInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          regencies: json['regencies'] == null
              ? null
              : Input$RegencyUncheckedUpdateManyWithoutProvinceInput.fromJson(
                  json['regencies'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          users: json['users'] == null
              ? null
              : Input$UserUncheckedUpdateManyWithoutProvinceInput.fromJson(
                  json['users'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceUncheckedUpdateWithoutSchoolInputToJson(
        Input$ProvinceUncheckedUpdateWithoutSchoolInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'regencies': instance.regencies?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'users': instance.users?.toJson(),
    };

Input$ProvinceUncheckedUpdateWithoutUsersInput
    _$Input$ProvinceUncheckedUpdateWithoutUsersInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceUncheckedUpdateWithoutUsersInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          regencies: json['regencies'] == null
              ? null
              : Input$RegencyUncheckedUpdateManyWithoutProvinceInput.fromJson(
                  json['regencies'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          School: json['School'] == null
              ? null
              : Input$SchoolUncheckedUpdateManyWithoutProvinceInput.fromJson(
                  json['School'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceUncheckedUpdateWithoutUsersInputToJson(
        Input$ProvinceUncheckedUpdateWithoutUsersInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'regencies': instance.regencies?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'School': instance.School?.toJson(),
    };

Input$ProvinceUpdateInput _$Input$ProvinceUpdateInputFromJson(
        Map<String, dynamic> json) =>
    Input$ProvinceUpdateInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      regencies: json['regencies'] == null
          ? null
          : Input$RegencyUpdateManyWithoutProvinceInput.fromJson(
              json['regencies'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      users: json['users'] == null
          ? null
          : Input$UserUpdateManyWithoutProvinceInput.fromJson(
              json['users'] as Map<String, dynamic>),
      School: json['School'] == null
          ? null
          : Input$SchoolUpdateManyWithoutProvinceInput.fromJson(
              json['School'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ProvinceUpdateInputToJson(
        Input$ProvinceUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'regencies': instance.regencies?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'users': instance.users?.toJson(),
      'School': instance.School?.toJson(),
    };

Input$ProvinceUpdateManyMutationInput
    _$Input$ProvinceUpdateManyMutationInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceUpdateManyMutationInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceUpdateManyMutationInputToJson(
        Input$ProvinceUpdateManyMutationInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$ProvinceUpdateOneRequiredWithoutRegenciesInput
    _$Input$ProvinceUpdateOneRequiredWithoutRegenciesInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceUpdateOneRequiredWithoutRegenciesInput(
          create: json['create'] == null
              ? null
              : Input$ProvinceUncheckedCreateWithoutRegenciesInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$ProvinceCreateOrConnectWithoutRegenciesInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : Input$ProvinceUpsertWithoutRegenciesInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$ProvinceWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : Input$ProvinceUncheckedUpdateWithoutRegenciesInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$ProvinceUpdateOneRequiredWithoutRegenciesInputToJson(
            Input$ProvinceUpdateOneRequiredWithoutRegenciesInput instance) =>
        <String, dynamic>{
          'create': instance.create?.toJson(),
          'connectOrCreate': instance.connectOrCreate?.toJson(),
          'upsert': instance.upsert?.toJson(),
          'connect': instance.connect?.toJson(),
          'update': instance.update?.toJson(),
        };

Input$ProvinceUpdateOneRequiredWithoutSchoolInput
    _$Input$ProvinceUpdateOneRequiredWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceUpdateOneRequiredWithoutSchoolInput(
          create: json['create'] == null
              ? null
              : Input$ProvinceUncheckedCreateWithoutSchoolInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$ProvinceCreateOrConnectWithoutSchoolInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : Input$ProvinceUpsertWithoutSchoolInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$ProvinceWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : Input$ProvinceUncheckedUpdateWithoutSchoolInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceUpdateOneRequiredWithoutSchoolInputToJson(
        Input$ProvinceUpdateOneRequiredWithoutSchoolInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'upsert': instance.upsert?.toJson(),
      'connect': instance.connect?.toJson(),
      'update': instance.update?.toJson(),
    };

Input$ProvinceUpdateOneRequiredWithoutUsersInput
    _$Input$ProvinceUpdateOneRequiredWithoutUsersInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceUpdateOneRequiredWithoutUsersInput(
          create: json['create'] == null
              ? null
              : Input$ProvinceUncheckedCreateWithoutUsersInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$ProvinceCreateOrConnectWithoutUsersInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : Input$ProvinceUpsertWithoutUsersInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$ProvinceWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : Input$ProvinceUncheckedUpdateWithoutUsersInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceUpdateOneRequiredWithoutUsersInputToJson(
        Input$ProvinceUpdateOneRequiredWithoutUsersInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'upsert': instance.upsert?.toJson(),
      'connect': instance.connect?.toJson(),
      'update': instance.update?.toJson(),
    };

Input$ProvinceUpdateWithoutRegenciesInput
    _$Input$ProvinceUpdateWithoutRegenciesInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceUpdateWithoutRegenciesInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          users: json['users'] == null
              ? null
              : Input$UserUpdateManyWithoutProvinceInput.fromJson(
                  json['users'] as Map<String, dynamic>),
          School: json['School'] == null
              ? null
              : Input$SchoolUpdateManyWithoutProvinceInput.fromJson(
                  json['School'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceUpdateWithoutRegenciesInputToJson(
        Input$ProvinceUpdateWithoutRegenciesInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'users': instance.users?.toJson(),
      'School': instance.School?.toJson(),
    };

Input$ProvinceUpdateWithoutSchoolInput
    _$Input$ProvinceUpdateWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceUpdateWithoutSchoolInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          regencies: json['regencies'] == null
              ? null
              : Input$RegencyUpdateManyWithoutProvinceInput.fromJson(
                  json['regencies'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          users: json['users'] == null
              ? null
              : Input$UserUpdateManyWithoutProvinceInput.fromJson(
                  json['users'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceUpdateWithoutSchoolInputToJson(
        Input$ProvinceUpdateWithoutSchoolInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'regencies': instance.regencies?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'users': instance.users?.toJson(),
    };

Input$ProvinceUpdateWithoutUsersInput
    _$Input$ProvinceUpdateWithoutUsersInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceUpdateWithoutUsersInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          regencies: json['regencies'] == null
              ? null
              : Input$RegencyUpdateManyWithoutProvinceInput.fromJson(
                  json['regencies'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          School: json['School'] == null
              ? null
              : Input$SchoolUpdateManyWithoutProvinceInput.fromJson(
                  json['School'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceUpdateWithoutUsersInputToJson(
        Input$ProvinceUpdateWithoutUsersInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'regencies': instance.regencies?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'School': instance.School?.toJson(),
    };

Input$ProvinceUpsertWithoutRegenciesInput
    _$Input$ProvinceUpsertWithoutRegenciesInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceUpsertWithoutRegenciesInput(
          update: Input$ProvinceUncheckedUpdateWithoutRegenciesInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$ProvinceUncheckedCreateWithoutRegenciesInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceUpsertWithoutRegenciesInputToJson(
        Input$ProvinceUpsertWithoutRegenciesInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$ProvinceUpsertWithoutSchoolInput
    _$Input$ProvinceUpsertWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceUpsertWithoutSchoolInput(
          update: Input$ProvinceUncheckedUpdateWithoutSchoolInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$ProvinceUncheckedCreateWithoutSchoolInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceUpsertWithoutSchoolInputToJson(
        Input$ProvinceUpsertWithoutSchoolInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$ProvinceUpsertWithoutUsersInput
    _$Input$ProvinceUpsertWithoutUsersInputFromJson(
            Map<String, dynamic> json) =>
        Input$ProvinceUpsertWithoutUsersInput(
          update: Input$ProvinceUncheckedUpdateWithoutUsersInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$ProvinceUncheckedCreateWithoutUsersInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$ProvinceUpsertWithoutUsersInputToJson(
        Input$ProvinceUpsertWithoutUsersInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$ProvinceWhereInput _$Input$ProvinceWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$ProvinceWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ProvinceWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ProvinceWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ProvinceWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      regencies: json['regencies'] == null
          ? null
          : Input$RegencyListRelationFilter.fromJson(
              json['regencies'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      users: json['users'] == null
          ? null
          : Input$UserListRelationFilter.fromJson(
              json['users'] as Map<String, dynamic>),
      School: json['School'] == null
          ? null
          : Input$SchoolListRelationFilter.fromJson(
              json['School'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$ProvinceWhereInputToJson(
        Input$ProvinceWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'regencies': instance.regencies?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'users': instance.users?.toJson(),
      'School': instance.School?.toJson(),
    };

Input$ProvinceWhereUniqueInput _$Input$ProvinceWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    Input$ProvinceWhereUniqueInput(
      id: json['id'] as String?,
    );

Map<String, dynamic> _$Input$ProvinceWhereUniqueInputToJson(
        Input$ProvinceWhereUniqueInput instance) =>
    <String, dynamic>{
      'id': instance.id,
    };

Input$QuestionCountOrderByAggregateInput
    _$Input$QuestionCountOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionCountOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          type: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['type'],
              unknownValue: Enum$SortOrder.$unknown),
          contentType: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['contentType'],
              unknownValue: Enum$SortOrder.$unknown),
          content: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['content'],
              unknownValue: Enum$SortOrder.$unknown),
          answerType: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['answerType'],
              unknownValue: Enum$SortOrder.$unknown),
          answers: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['answers'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          originalQuestionId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['originalQuestionId'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$QuestionCountOrderByAggregateInputToJson(
        Input$QuestionCountOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'type': _$Enum$SortOrderEnumMap[instance.type],
      'contentType': _$Enum$SortOrderEnumMap[instance.contentType],
      'content': _$Enum$SortOrderEnumMap[instance.content],
      'answerType': _$Enum$SortOrderEnumMap[instance.answerType],
      'answers': _$Enum$SortOrderEnumMap[instance.answers],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'originalQuestionId':
          _$Enum$SortOrderEnumMap[instance.originalQuestionId],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$QuestionCreateanswersInput _$Input$QuestionCreateanswersInputFromJson(
        Map<String, dynamic> json) =>
    Input$QuestionCreateanswersInput(
      $set: json['set'] as String,
    );

Map<String, dynamic> _$Input$QuestionCreateanswersInputToJson(
        Input$QuestionCreateanswersInput instance) =>
    <String, dynamic>{
      'set': instance.$set,
    };

Input$QuestionCreateInput _$Input$QuestionCreateInputFromJson(
        Map<String, dynamic> json) =>
    Input$QuestionCreateInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      type: $enumDecode(_$Enum$QuestionTypeEnumMap, json['type'],
          unknownValue: Enum$QuestionType.$unknown),
      contentType: $enumDecode(_$Enum$ContentTypeEnumMap, json['contentType'],
          unknownValue: Enum$ContentType.$unknown),
      content: json['content'] as String,
      answerType: $enumDecode(_$Enum$ContentTypeEnumMap, json['answerType'],
          unknownValue: Enum$ContentType.$unknown),
      answers: (json['answers'] as List<dynamic>?)
          ?.map((e) => e as String?)
          .toList(),
      user: Input$UserCreateNestedOneWithoutQuestionsInput.fromJson(
          json['user'] as Map<String, dynamic>),
      originalQuestion: json['originalQuestion'] == null
          ? null
          : Input$QuestionCreateNestedOneWithoutChildrensInput.fromJson(
              json['originalQuestion'] as Map<String, dynamic>),
      childrens: json['childrens'] == null
          ? null
          : Input$QuestionCreateNestedManyWithoutOriginalQuestionInput.fromJson(
              json['childrens'] as Map<String, dynamic>),
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
      examquestions: json['examquestions'] == null
          ? null
          : Input$ExamQuestionCreateNestedManyWithoutQuestionInput.fromJson(
              json['examquestions'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$QuestionCreateInputToJson(
        Input$QuestionCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'type': _$Enum$QuestionTypeEnumMap[instance.type],
      'contentType': _$Enum$ContentTypeEnumMap[instance.contentType],
      'content': instance.content,
      'answerType': _$Enum$ContentTypeEnumMap[instance.answerType],
      'answers': instance.answers,
      'user': instance.user.toJson(),
      'originalQuestion': instance.originalQuestion?.toJson(),
      'childrens': instance.childrens?.toJson(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'examquestions': instance.examquestions?.toJson(),
    };

Input$QuestionCreateManyInput _$Input$QuestionCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    Input$QuestionCreateManyInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      type: $enumDecode(_$Enum$QuestionTypeEnumMap, json['type'],
          unknownValue: Enum$QuestionType.$unknown),
      contentType: $enumDecode(_$Enum$ContentTypeEnumMap, json['contentType'],
          unknownValue: Enum$ContentType.$unknown),
      content: json['content'] as String,
      answerType: $enumDecode(_$Enum$ContentTypeEnumMap, json['answerType'],
          unknownValue: Enum$ContentType.$unknown),
      answers: (json['answers'] as List<dynamic>?)
          ?.map((e) => e as String?)
          .toList(),
      userId: json['userId'] as String,
      originalQuestionId: json['originalQuestionId'] as String?,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
    );

Map<String, dynamic> _$Input$QuestionCreateManyInputToJson(
        Input$QuestionCreateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'type': _$Enum$QuestionTypeEnumMap[instance.type],
      'contentType': _$Enum$ContentTypeEnumMap[instance.contentType],
      'content': instance.content,
      'answerType': _$Enum$ContentTypeEnumMap[instance.answerType],
      'answers': instance.answers,
      'userId': instance.userId,
      'originalQuestionId': instance.originalQuestionId,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$QuestionCreateManyOriginalQuestionInput
    _$Input$QuestionCreateManyOriginalQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionCreateManyOriginalQuestionInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          type: $enumDecode(_$Enum$QuestionTypeEnumMap, json['type'],
              unknownValue: Enum$QuestionType.$unknown),
          contentType: $enumDecode(
              _$Enum$ContentTypeEnumMap, json['contentType'],
              unknownValue: Enum$ContentType.$unknown),
          content: json['content'] as String,
          answerType: $enumDecode(_$Enum$ContentTypeEnumMap, json['answerType'],
              unknownValue: Enum$ContentType.$unknown),
          answers: (json['answers'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          userId: json['userId'] as String,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$QuestionCreateManyOriginalQuestionInputToJson(
        Input$QuestionCreateManyOriginalQuestionInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'type': _$Enum$QuestionTypeEnumMap[instance.type],
      'contentType': _$Enum$ContentTypeEnumMap[instance.contentType],
      'content': instance.content,
      'answerType': _$Enum$ContentTypeEnumMap[instance.answerType],
      'answers': instance.answers,
      'userId': instance.userId,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$QuestionCreateManyOriginalQuestionInputEnvelope
    _$Input$QuestionCreateManyOriginalQuestionInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionCreateManyOriginalQuestionInputEnvelope(
          data: Input$QuestionCreateManyOriginalQuestionInput.fromJson(
              json['data'] as Map<String, dynamic>),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic>
    _$Input$QuestionCreateManyOriginalQuestionInputEnvelopeToJson(
            Input$QuestionCreateManyOriginalQuestionInputEnvelope instance) =>
        <String, dynamic>{
          'data': instance.data.toJson(),
          'skipDuplicates': instance.skipDuplicates,
        };

Input$QuestionCreateManyUserInput _$Input$QuestionCreateManyUserInputFromJson(
        Map<String, dynamic> json) =>
    Input$QuestionCreateManyUserInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      type: $enumDecode(_$Enum$QuestionTypeEnumMap, json['type'],
          unknownValue: Enum$QuestionType.$unknown),
      contentType: $enumDecode(_$Enum$ContentTypeEnumMap, json['contentType'],
          unknownValue: Enum$ContentType.$unknown),
      content: json['content'] as String,
      answerType: $enumDecode(_$Enum$ContentTypeEnumMap, json['answerType'],
          unknownValue: Enum$ContentType.$unknown),
      answers: (json['answers'] as List<dynamic>?)
          ?.map((e) => e as String?)
          .toList(),
      originalQuestionId: json['originalQuestionId'] as String?,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
    );

Map<String, dynamic> _$Input$QuestionCreateManyUserInputToJson(
        Input$QuestionCreateManyUserInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'type': _$Enum$QuestionTypeEnumMap[instance.type],
      'contentType': _$Enum$ContentTypeEnumMap[instance.contentType],
      'content': instance.content,
      'answerType': _$Enum$ContentTypeEnumMap[instance.answerType],
      'answers': instance.answers,
      'originalQuestionId': instance.originalQuestionId,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$QuestionCreateManyUserInputEnvelope
    _$Input$QuestionCreateManyUserInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionCreateManyUserInputEnvelope(
          data: Input$QuestionCreateManyUserInput.fromJson(
              json['data'] as Map<String, dynamic>),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$Input$QuestionCreateManyUserInputEnvelopeToJson(
        Input$QuestionCreateManyUserInputEnvelope instance) =>
    <String, dynamic>{
      'data': instance.data.toJson(),
      'skipDuplicates': instance.skipDuplicates,
    };

Input$QuestionCreateNestedManyWithoutOriginalQuestionInput
    _$Input$QuestionCreateNestedManyWithoutOriginalQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionCreateNestedManyWithoutOriginalQuestionInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionCreateWithoutOriginalQuestionInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionCreateOrConnectWithoutOriginalQuestionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$QuestionCreateManyOriginalQuestionInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String,
    dynamic> _$Input$QuestionCreateNestedManyWithoutOriginalQuestionInputToJson(
        Input$QuestionCreateNestedManyWithoutOriginalQuestionInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$QuestionCreateNestedManyWithoutUserInput
    _$Input$QuestionCreateNestedManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionCreateNestedManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$QuestionCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$QuestionCreateNestedManyWithoutUserInputToJson(
        Input$QuestionCreateNestedManyWithoutUserInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$QuestionCreateNestedOneWithoutChildrensInput
    _$Input$QuestionCreateNestedOneWithoutChildrensInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionCreateNestedOneWithoutChildrensInput(
          create: json['create'] == null
              ? null
              : Input$QuestionUncheckedCreateWithoutChildrensInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$QuestionCreateOrConnectWithoutChildrensInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$QuestionWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$QuestionCreateNestedOneWithoutChildrensInputToJson(
        Input$QuestionCreateNestedOneWithoutChildrensInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'connect': instance.connect?.toJson(),
    };

Input$QuestionCreateNestedOneWithoutExamquestionsInput
    _$Input$QuestionCreateNestedOneWithoutExamquestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionCreateNestedOneWithoutExamquestionsInput(
          create: json['create'] == null
              ? null
              : Input$QuestionUncheckedCreateWithoutExamquestionsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$QuestionCreateOrConnectWithoutExamquestionsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$QuestionWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$QuestionCreateNestedOneWithoutExamquestionsInputToJson(
            Input$QuestionCreateNestedOneWithoutExamquestionsInput instance) =>
        <String, dynamic>{
          'create': instance.create?.toJson(),
          'connectOrCreate': instance.connectOrCreate?.toJson(),
          'connect': instance.connect?.toJson(),
        };

Input$QuestionCreateOrConnectWithoutChildrensInput
    _$Input$QuestionCreateOrConnectWithoutChildrensInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionCreateOrConnectWithoutChildrensInput(
          where: Input$QuestionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$QuestionUncheckedCreateWithoutChildrensInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$QuestionCreateOrConnectWithoutChildrensInputToJson(
        Input$QuestionCreateOrConnectWithoutChildrensInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$QuestionCreateOrConnectWithoutExamquestionsInput
    _$Input$QuestionCreateOrConnectWithoutExamquestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionCreateOrConnectWithoutExamquestionsInput(
          where: Input$QuestionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create:
              Input$QuestionUncheckedCreateWithoutExamquestionsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$QuestionCreateOrConnectWithoutExamquestionsInputToJson(
            Input$QuestionCreateOrConnectWithoutExamquestionsInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'create': instance.create.toJson(),
        };

Input$QuestionCreateOrConnectWithoutOriginalQuestionInput
    _$Input$QuestionCreateOrConnectWithoutOriginalQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionCreateOrConnectWithoutOriginalQuestionInput(
          where: Input$QuestionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$QuestionUncheckedCreateWithoutOriginalQuestionInput
              .fromJson(json['create'] as Map<String, dynamic>),
        );

Map<String,
    dynamic> _$Input$QuestionCreateOrConnectWithoutOriginalQuestionInputToJson(
        Input$QuestionCreateOrConnectWithoutOriginalQuestionInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$QuestionCreateOrConnectWithoutUserInput
    _$Input$QuestionCreateOrConnectWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionCreateOrConnectWithoutUserInput(
          where: Input$QuestionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$QuestionUncheckedCreateWithoutUserInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$QuestionCreateOrConnectWithoutUserInputToJson(
        Input$QuestionCreateOrConnectWithoutUserInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$QuestionCreateWithoutChildrensInput
    _$Input$QuestionCreateWithoutChildrensInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionCreateWithoutChildrensInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          type: $enumDecode(_$Enum$QuestionTypeEnumMap, json['type'],
              unknownValue: Enum$QuestionType.$unknown),
          contentType: $enumDecode(
              _$Enum$ContentTypeEnumMap, json['contentType'],
              unknownValue: Enum$ContentType.$unknown),
          content: json['content'] as String,
          answerType: $enumDecode(_$Enum$ContentTypeEnumMap, json['answerType'],
              unknownValue: Enum$ContentType.$unknown),
          answers: (json['answers'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          user: Input$UserCreateNestedOneWithoutQuestionsInput.fromJson(
              json['user'] as Map<String, dynamic>),
          originalQuestion: json['originalQuestion'] == null
              ? null
              : Input$QuestionCreateNestedOneWithoutChildrensInput.fromJson(
                  json['originalQuestion'] as Map<String, dynamic>),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          examquestions: json['examquestions'] == null
              ? null
              : Input$ExamQuestionCreateNestedManyWithoutQuestionInput.fromJson(
                  json['examquestions'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$QuestionCreateWithoutChildrensInputToJson(
        Input$QuestionCreateWithoutChildrensInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'type': _$Enum$QuestionTypeEnumMap[instance.type],
      'contentType': _$Enum$ContentTypeEnumMap[instance.contentType],
      'content': instance.content,
      'answerType': _$Enum$ContentTypeEnumMap[instance.answerType],
      'answers': instance.answers,
      'user': instance.user.toJson(),
      'originalQuestion': instance.originalQuestion?.toJson(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'examquestions': instance.examquestions?.toJson(),
    };

Input$QuestionCreateWithoutExamquestionsInput
    _$Input$QuestionCreateWithoutExamquestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionCreateWithoutExamquestionsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          type: $enumDecode(_$Enum$QuestionTypeEnumMap, json['type'],
              unknownValue: Enum$QuestionType.$unknown),
          contentType: $enumDecode(
              _$Enum$ContentTypeEnumMap, json['contentType'],
              unknownValue: Enum$ContentType.$unknown),
          content: json['content'] as String,
          answerType: $enumDecode(_$Enum$ContentTypeEnumMap, json['answerType'],
              unknownValue: Enum$ContentType.$unknown),
          answers: (json['answers'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          user: Input$UserCreateNestedOneWithoutQuestionsInput.fromJson(
              json['user'] as Map<String, dynamic>),
          originalQuestion: json['originalQuestion'] == null
              ? null
              : Input$QuestionCreateNestedOneWithoutChildrensInput.fromJson(
                  json['originalQuestion'] as Map<String, dynamic>),
          childrens: json['childrens'] == null
              ? null
              : Input$QuestionCreateNestedManyWithoutOriginalQuestionInput
                  .fromJson(json['childrens'] as Map<String, dynamic>),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$QuestionCreateWithoutExamquestionsInputToJson(
        Input$QuestionCreateWithoutExamquestionsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'type': _$Enum$QuestionTypeEnumMap[instance.type],
      'contentType': _$Enum$ContentTypeEnumMap[instance.contentType],
      'content': instance.content,
      'answerType': _$Enum$ContentTypeEnumMap[instance.answerType],
      'answers': instance.answers,
      'user': instance.user.toJson(),
      'originalQuestion': instance.originalQuestion?.toJson(),
      'childrens': instance.childrens?.toJson(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$QuestionCreateWithoutOriginalQuestionInput
    _$Input$QuestionCreateWithoutOriginalQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionCreateWithoutOriginalQuestionInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          type: $enumDecode(_$Enum$QuestionTypeEnumMap, json['type'],
              unknownValue: Enum$QuestionType.$unknown),
          contentType: $enumDecode(
              _$Enum$ContentTypeEnumMap, json['contentType'],
              unknownValue: Enum$ContentType.$unknown),
          content: json['content'] as String,
          answerType: $enumDecode(_$Enum$ContentTypeEnumMap, json['answerType'],
              unknownValue: Enum$ContentType.$unknown),
          answers: (json['answers'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          user: Input$UserCreateNestedOneWithoutQuestionsInput.fromJson(
              json['user'] as Map<String, dynamic>),
          childrens: json['childrens'] == null
              ? null
              : Input$QuestionCreateNestedManyWithoutOriginalQuestionInput
                  .fromJson(json['childrens'] as Map<String, dynamic>),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          examquestions: json['examquestions'] == null
              ? null
              : Input$ExamQuestionCreateNestedManyWithoutQuestionInput.fromJson(
                  json['examquestions'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$QuestionCreateWithoutOriginalQuestionInputToJson(
        Input$QuestionCreateWithoutOriginalQuestionInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'type': _$Enum$QuestionTypeEnumMap[instance.type],
      'contentType': _$Enum$ContentTypeEnumMap[instance.contentType],
      'content': instance.content,
      'answerType': _$Enum$ContentTypeEnumMap[instance.answerType],
      'answers': instance.answers,
      'user': instance.user.toJson(),
      'childrens': instance.childrens?.toJson(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'examquestions': instance.examquestions?.toJson(),
    };

Input$QuestionCreateWithoutUserInput
    _$Input$QuestionCreateWithoutUserInputFromJson(Map<String, dynamic> json) =>
        Input$QuestionCreateWithoutUserInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          type: $enumDecode(_$Enum$QuestionTypeEnumMap, json['type'],
              unknownValue: Enum$QuestionType.$unknown),
          contentType: $enumDecode(
              _$Enum$ContentTypeEnumMap, json['contentType'],
              unknownValue: Enum$ContentType.$unknown),
          content: json['content'] as String,
          answerType: $enumDecode(_$Enum$ContentTypeEnumMap, json['answerType'],
              unknownValue: Enum$ContentType.$unknown),
          answers: (json['answers'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          originalQuestion: json['originalQuestion'] == null
              ? null
              : Input$QuestionCreateNestedOneWithoutChildrensInput.fromJson(
                  json['originalQuestion'] as Map<String, dynamic>),
          childrens: json['childrens'] == null
              ? null
              : Input$QuestionCreateNestedManyWithoutOriginalQuestionInput
                  .fromJson(json['childrens'] as Map<String, dynamic>),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          examquestions: json['examquestions'] == null
              ? null
              : Input$ExamQuestionCreateNestedManyWithoutQuestionInput.fromJson(
                  json['examquestions'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$QuestionCreateWithoutUserInputToJson(
        Input$QuestionCreateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'type': _$Enum$QuestionTypeEnumMap[instance.type],
      'contentType': _$Enum$ContentTypeEnumMap[instance.contentType],
      'content': instance.content,
      'answerType': _$Enum$ContentTypeEnumMap[instance.answerType],
      'answers': instance.answers,
      'originalQuestion': instance.originalQuestion?.toJson(),
      'childrens': instance.childrens?.toJson(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'examquestions': instance.examquestions?.toJson(),
    };

Input$QuestionListRelationFilter _$Input$QuestionListRelationFilterFromJson(
        Map<String, dynamic> json) =>
    Input$QuestionListRelationFilter(
      every: json['every'] == null
          ? null
          : Input$QuestionWhereInput.fromJson(
              json['every'] as Map<String, dynamic>),
      some: json['some'] == null
          ? null
          : Input$QuestionWhereInput.fromJson(
              json['some'] as Map<String, dynamic>),
      none: json['none'] == null
          ? null
          : Input$QuestionWhereInput.fromJson(
              json['none'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$QuestionListRelationFilterToJson(
        Input$QuestionListRelationFilter instance) =>
    <String, dynamic>{
      'every': instance.every?.toJson(),
      'some': instance.some?.toJson(),
      'none': instance.none?.toJson(),
    };

Input$QuestionMaxOrderByAggregateInput
    _$Input$QuestionMaxOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionMaxOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          type: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['type'],
              unknownValue: Enum$SortOrder.$unknown),
          contentType: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['contentType'],
              unknownValue: Enum$SortOrder.$unknown),
          content: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['content'],
              unknownValue: Enum$SortOrder.$unknown),
          answerType: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['answerType'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          originalQuestionId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['originalQuestionId'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$QuestionMaxOrderByAggregateInputToJson(
        Input$QuestionMaxOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'type': _$Enum$SortOrderEnumMap[instance.type],
      'contentType': _$Enum$SortOrderEnumMap[instance.contentType],
      'content': _$Enum$SortOrderEnumMap[instance.content],
      'answerType': _$Enum$SortOrderEnumMap[instance.answerType],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'originalQuestionId':
          _$Enum$SortOrderEnumMap[instance.originalQuestionId],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$QuestionMinOrderByAggregateInput
    _$Input$QuestionMinOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionMinOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          type: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['type'],
              unknownValue: Enum$SortOrder.$unknown),
          contentType: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['contentType'],
              unknownValue: Enum$SortOrder.$unknown),
          content: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['content'],
              unknownValue: Enum$SortOrder.$unknown),
          answerType: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['answerType'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          originalQuestionId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['originalQuestionId'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$QuestionMinOrderByAggregateInputToJson(
        Input$QuestionMinOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'type': _$Enum$SortOrderEnumMap[instance.type],
      'contentType': _$Enum$SortOrderEnumMap[instance.contentType],
      'content': _$Enum$SortOrderEnumMap[instance.content],
      'answerType': _$Enum$SortOrderEnumMap[instance.answerType],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'originalQuestionId':
          _$Enum$SortOrderEnumMap[instance.originalQuestionId],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$QuestionOrderByRelationAggregateInput
    _$Input$QuestionOrderByRelationAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionOrderByRelationAggregateInput(
          $_count: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['_count'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$QuestionOrderByRelationAggregateInputToJson(
        Input$QuestionOrderByRelationAggregateInput instance) =>
    <String, dynamic>{
      '_count': _$Enum$SortOrderEnumMap[instance.$_count],
    };

Input$QuestionOrderByWithAggregationInput
    _$Input$QuestionOrderByWithAggregationInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionOrderByWithAggregationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          type: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['type'],
              unknownValue: Enum$SortOrder.$unknown),
          contentType: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['contentType'],
              unknownValue: Enum$SortOrder.$unknown),
          content: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['content'],
              unknownValue: Enum$SortOrder.$unknown),
          answerType: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['answerType'],
              unknownValue: Enum$SortOrder.$unknown),
          answers: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['answers'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          originalQuestionId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['originalQuestionId'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          $_count: json['_count'] == null
              ? null
              : Input$QuestionCountOrderByAggregateInput.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$QuestionMaxOrderByAggregateInput.fromJson(
                  json['_max'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$QuestionMinOrderByAggregateInput.fromJson(
                  json['_min'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$QuestionOrderByWithAggregationInputToJson(
        Input$QuestionOrderByWithAggregationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'type': _$Enum$SortOrderEnumMap[instance.type],
      'contentType': _$Enum$SortOrderEnumMap[instance.contentType],
      'content': _$Enum$SortOrderEnumMap[instance.content],
      'answerType': _$Enum$SortOrderEnumMap[instance.answerType],
      'answers': _$Enum$SortOrderEnumMap[instance.answers],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'originalQuestionId':
          _$Enum$SortOrderEnumMap[instance.originalQuestionId],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      '_count': instance.$_count?.toJson(),
      '_max': instance.$_max?.toJson(),
      '_min': instance.$_min?.toJson(),
    };

Input$QuestionOrderByWithRelationInput
    _$Input$QuestionOrderByWithRelationInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionOrderByWithRelationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          type: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['type'],
              unknownValue: Enum$SortOrder.$unknown),
          contentType: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['contentType'],
              unknownValue: Enum$SortOrder.$unknown),
          content: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['content'],
              unknownValue: Enum$SortOrder.$unknown),
          answerType: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['answerType'],
              unknownValue: Enum$SortOrder.$unknown),
          answers: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['answers'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          user: json['user'] == null
              ? null
              : Input$UserOrderByWithRelationInput.fromJson(
                  json['user'] as Map<String, dynamic>),
          originalQuestionId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['originalQuestionId'],
              unknownValue: Enum$SortOrder.$unknown),
          originalQuestion: json['originalQuestion'] == null
              ? null
              : Input$QuestionOrderByWithRelationInput.fromJson(
                  json['originalQuestion'] as Map<String, dynamic>),
          childrens: json['childrens'] == null
              ? null
              : Input$QuestionOrderByRelationAggregateInput.fromJson(
                  json['childrens'] as Map<String, dynamic>),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          examquestions: json['examquestions'] == null
              ? null
              : Input$ExamQuestionOrderByRelationAggregateInput.fromJson(
                  json['examquestions'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$QuestionOrderByWithRelationInputToJson(
        Input$QuestionOrderByWithRelationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'type': _$Enum$SortOrderEnumMap[instance.type],
      'contentType': _$Enum$SortOrderEnumMap[instance.contentType],
      'content': _$Enum$SortOrderEnumMap[instance.content],
      'answerType': _$Enum$SortOrderEnumMap[instance.answerType],
      'answers': _$Enum$SortOrderEnumMap[instance.answers],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'user': instance.user?.toJson(),
      'originalQuestionId':
          _$Enum$SortOrderEnumMap[instance.originalQuestionId],
      'originalQuestion': instance.originalQuestion?.toJson(),
      'childrens': instance.childrens?.toJson(),
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      'examquestions': instance.examquestions?.toJson(),
    };

Input$QuestionRelationFilter _$Input$QuestionRelationFilterFromJson(
        Map<String, dynamic> json) =>
    Input$QuestionRelationFilter(
      $is: json['is'] == null
          ? null
          : Input$QuestionWhereInput.fromJson(
              json['is'] as Map<String, dynamic>),
      isNot: json['isNot'] == null
          ? null
          : Input$QuestionWhereInput.fromJson(
              json['isNot'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$QuestionRelationFilterToJson(
        Input$QuestionRelationFilter instance) =>
    <String, dynamic>{
      'is': instance.$is?.toJson(),
      'isNot': instance.isNot?.toJson(),
    };

Input$QuestionScalarWhereInput _$Input$QuestionScalarWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$QuestionScalarWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$QuestionScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$QuestionScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$QuestionScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      type: json['type'] == null
          ? null
          : Input$EnumQuestionTypeFilter.fromJson(
              json['type'] as Map<String, dynamic>),
      contentType: json['contentType'] == null
          ? null
          : Input$EnumContentTypeFilter.fromJson(
              json['contentType'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : Input$StringFilter.fromJson(
              json['content'] as Map<String, dynamic>),
      answerType: json['answerType'] == null
          ? null
          : Input$EnumContentTypeFilter.fromJson(
              json['answerType'] as Map<String, dynamic>),
      answers: json['answers'] == null
          ? null
          : Input$StringNullableListFilter.fromJson(
              json['answers'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : Input$StringFilter.fromJson(json['userId'] as Map<String, dynamic>),
      originalQuestionId: json['originalQuestionId'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['originalQuestionId'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$QuestionScalarWhereInputToJson(
        Input$QuestionScalarWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'type': instance.type?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'answerType': instance.answerType?.toJson(),
      'answers': instance.answers?.toJson(),
      'userId': instance.userId?.toJson(),
      'originalQuestionId': instance.originalQuestionId?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$QuestionScalarWhereWithAggregatesInput
    _$Input$QuestionScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          OR: (json['OR'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          NOT: (json['NOT'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          id: json['id'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['name'] as Map<String, dynamic>),
          type: json['type'] == null
              ? null
              : Input$EnumQuestionTypeWithAggregatesFilter.fromJson(
                  json['type'] as Map<String, dynamic>),
          contentType: json['contentType'] == null
              ? null
              : Input$EnumContentTypeWithAggregatesFilter.fromJson(
                  json['contentType'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['content'] as Map<String, dynamic>),
          answerType: json['answerType'] == null
              ? null
              : Input$EnumContentTypeWithAggregatesFilter.fromJson(
                  json['answerType'] as Map<String, dynamic>),
          answers: json['answers'] == null
              ? null
              : Input$StringNullableListFilter.fromJson(
                  json['answers'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['userId'] as Map<String, dynamic>),
          originalQuestionId: json['originalQuestionId'] == null
              ? null
              : Input$StringNullableWithAggregatesFilter.fromJson(
                  json['originalQuestionId'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$QuestionScalarWhereWithAggregatesInputToJson(
        Input$QuestionScalarWhereWithAggregatesInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'type': instance.type?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'answerType': instance.answerType?.toJson(),
      'answers': instance.answers?.toJson(),
      'userId': instance.userId?.toJson(),
      'originalQuestionId': instance.originalQuestionId?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$QuestionUncheckedCreateInput _$Input$QuestionUncheckedCreateInputFromJson(
        Map<String, dynamic> json) =>
    Input$QuestionUncheckedCreateInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      type: $enumDecode(_$Enum$QuestionTypeEnumMap, json['type'],
          unknownValue: Enum$QuestionType.$unknown),
      contentType: $enumDecode(_$Enum$ContentTypeEnumMap, json['contentType'],
          unknownValue: Enum$ContentType.$unknown),
      content: json['content'] as String,
      answerType: $enumDecode(_$Enum$ContentTypeEnumMap, json['answerType'],
          unknownValue: Enum$ContentType.$unknown),
      answers: (json['answers'] as List<dynamic>?)
          ?.map((e) => e as String?)
          .toList(),
      userId: json['userId'] as String,
      originalQuestionId: json['originalQuestionId'] as String?,
      childrens: json['childrens'] == null
          ? null
          : Input$QuestionUncheckedCreateNestedManyWithoutOriginalQuestionInput
              .fromJson(json['childrens'] as Map<String, dynamic>),
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
      examquestions: json['examquestions'] == null
          ? null
          : Input$ExamQuestionUncheckedCreateNestedManyWithoutQuestionInput
              .fromJson(json['examquestions'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$QuestionUncheckedCreateInputToJson(
        Input$QuestionUncheckedCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'type': _$Enum$QuestionTypeEnumMap[instance.type],
      'contentType': _$Enum$ContentTypeEnumMap[instance.contentType],
      'content': instance.content,
      'answerType': _$Enum$ContentTypeEnumMap[instance.answerType],
      'answers': instance.answers,
      'userId': instance.userId,
      'originalQuestionId': instance.originalQuestionId,
      'childrens': instance.childrens?.toJson(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'examquestions': instance.examquestions?.toJson(),
    };

Input$QuestionUncheckedCreateNestedManyWithoutOriginalQuestionInput
    _$Input$QuestionUncheckedCreateNestedManyWithoutOriginalQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUncheckedCreateNestedManyWithoutOriginalQuestionInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionCreateWithoutOriginalQuestionInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionCreateOrConnectWithoutOriginalQuestionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$QuestionCreateManyOriginalQuestionInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$QuestionUncheckedCreateNestedManyWithoutOriginalQuestionInputToJson(
            Input$QuestionUncheckedCreateNestedManyWithoutOriginalQuestionInput
                instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
        };

Input$QuestionUncheckedCreateNestedManyWithoutUserInput
    _$Input$QuestionUncheckedCreateNestedManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUncheckedCreateNestedManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$QuestionCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$QuestionUncheckedCreateNestedManyWithoutUserInputToJson(
            Input$QuestionUncheckedCreateNestedManyWithoutUserInput instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
        };

Input$QuestionUncheckedCreateWithoutChildrensInput
    _$Input$QuestionUncheckedCreateWithoutChildrensInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUncheckedCreateWithoutChildrensInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          type: $enumDecode(_$Enum$QuestionTypeEnumMap, json['type'],
              unknownValue: Enum$QuestionType.$unknown),
          contentType: $enumDecode(
              _$Enum$ContentTypeEnumMap, json['contentType'],
              unknownValue: Enum$ContentType.$unknown),
          content: json['content'] as String,
          answerType: $enumDecode(_$Enum$ContentTypeEnumMap, json['answerType'],
              unknownValue: Enum$ContentType.$unknown),
          answers: (json['answers'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          userId: json['userId'] as String,
          originalQuestionId: json['originalQuestionId'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          examquestions: json['examquestions'] == null
              ? null
              : Input$ExamQuestionUncheckedCreateNestedManyWithoutQuestionInput
                  .fromJson(json['examquestions'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$QuestionUncheckedCreateWithoutChildrensInputToJson(
        Input$QuestionUncheckedCreateWithoutChildrensInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'type': _$Enum$QuestionTypeEnumMap[instance.type],
      'contentType': _$Enum$ContentTypeEnumMap[instance.contentType],
      'content': instance.content,
      'answerType': _$Enum$ContentTypeEnumMap[instance.answerType],
      'answers': instance.answers,
      'userId': instance.userId,
      'originalQuestionId': instance.originalQuestionId,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'examquestions': instance.examquestions?.toJson(),
    };

Input$QuestionUncheckedCreateWithoutExamquestionsInput
    _$Input$QuestionUncheckedCreateWithoutExamquestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUncheckedCreateWithoutExamquestionsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          type: $enumDecode(_$Enum$QuestionTypeEnumMap, json['type'],
              unknownValue: Enum$QuestionType.$unknown),
          contentType: $enumDecode(
              _$Enum$ContentTypeEnumMap, json['contentType'],
              unknownValue: Enum$ContentType.$unknown),
          content: json['content'] as String,
          answerType: $enumDecode(_$Enum$ContentTypeEnumMap, json['answerType'],
              unknownValue: Enum$ContentType.$unknown),
          answers: (json['answers'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          userId: json['userId'] as String,
          originalQuestionId: json['originalQuestionId'] as String?,
          childrens: json['childrens'] == null
              ? null
              : Input$QuestionUncheckedCreateNestedManyWithoutOriginalQuestionInput
                  .fromJson(json['childrens'] as Map<String, dynamic>),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic>
    _$Input$QuestionUncheckedCreateWithoutExamquestionsInputToJson(
            Input$QuestionUncheckedCreateWithoutExamquestionsInput instance) =>
        <String, dynamic>{
          'id': instance.id,
          'name': instance.name,
          'type': _$Enum$QuestionTypeEnumMap[instance.type],
          'contentType': _$Enum$ContentTypeEnumMap[instance.contentType],
          'content': instance.content,
          'answerType': _$Enum$ContentTypeEnumMap[instance.answerType],
          'answers': instance.answers,
          'userId': instance.userId,
          'originalQuestionId': instance.originalQuestionId,
          'childrens': instance.childrens?.toJson(),
          'createdAt': instance.createdAt,
          'updatedAt': instance.updatedAt,
        };

Input$QuestionUncheckedCreateWithoutOriginalQuestionInput
    _$Input$QuestionUncheckedCreateWithoutOriginalQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUncheckedCreateWithoutOriginalQuestionInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          type: $enumDecode(_$Enum$QuestionTypeEnumMap, json['type'],
              unknownValue: Enum$QuestionType.$unknown),
          contentType: $enumDecode(
              _$Enum$ContentTypeEnumMap, json['contentType'],
              unknownValue: Enum$ContentType.$unknown),
          content: json['content'] as String,
          answerType: $enumDecode(_$Enum$ContentTypeEnumMap, json['answerType'],
              unknownValue: Enum$ContentType.$unknown),
          answers: (json['answers'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          userId: json['userId'] as String,
          childrens: json['childrens'] == null
              ? null
              : Input$QuestionUncheckedCreateNestedManyWithoutOriginalQuestionInput
                  .fromJson(json['childrens'] as Map<String, dynamic>),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          examquestions: json['examquestions'] == null
              ? null
              : Input$ExamQuestionUncheckedCreateNestedManyWithoutQuestionInput
                  .fromJson(json['examquestions'] as Map<String, dynamic>),
        );

Map<String,
    dynamic> _$Input$QuestionUncheckedCreateWithoutOriginalQuestionInputToJson(
        Input$QuestionUncheckedCreateWithoutOriginalQuestionInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'type': _$Enum$QuestionTypeEnumMap[instance.type],
      'contentType': _$Enum$ContentTypeEnumMap[instance.contentType],
      'content': instance.content,
      'answerType': _$Enum$ContentTypeEnumMap[instance.answerType],
      'answers': instance.answers,
      'userId': instance.userId,
      'childrens': instance.childrens?.toJson(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'examquestions': instance.examquestions?.toJson(),
    };

Input$QuestionUncheckedCreateWithoutUserInput
    _$Input$QuestionUncheckedCreateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUncheckedCreateWithoutUserInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          type: $enumDecode(_$Enum$QuestionTypeEnumMap, json['type'],
              unknownValue: Enum$QuestionType.$unknown),
          contentType: $enumDecode(
              _$Enum$ContentTypeEnumMap, json['contentType'],
              unknownValue: Enum$ContentType.$unknown),
          content: json['content'] as String,
          answerType: $enumDecode(_$Enum$ContentTypeEnumMap, json['answerType'],
              unknownValue: Enum$ContentType.$unknown),
          answers: (json['answers'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          originalQuestionId: json['originalQuestionId'] as String?,
          childrens: json['childrens'] == null
              ? null
              : Input$QuestionUncheckedCreateNestedManyWithoutOriginalQuestionInput
                  .fromJson(json['childrens'] as Map<String, dynamic>),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          examquestions: json['examquestions'] == null
              ? null
              : Input$ExamQuestionUncheckedCreateNestedManyWithoutQuestionInput
                  .fromJson(json['examquestions'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$QuestionUncheckedCreateWithoutUserInputToJson(
        Input$QuestionUncheckedCreateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'type': _$Enum$QuestionTypeEnumMap[instance.type],
      'contentType': _$Enum$ContentTypeEnumMap[instance.contentType],
      'content': instance.content,
      'answerType': _$Enum$ContentTypeEnumMap[instance.answerType],
      'answers': instance.answers,
      'originalQuestionId': instance.originalQuestionId,
      'childrens': instance.childrens?.toJson(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'examquestions': instance.examquestions?.toJson(),
    };

Input$QuestionUncheckedUpdateInput _$Input$QuestionUncheckedUpdateInputFromJson(
        Map<String, dynamic> json) =>
    Input$QuestionUncheckedUpdateInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      type: json['type'] == null
          ? null
          : Input$EnumQuestionTypeFieldUpdateOperationsInput.fromJson(
              json['type'] as Map<String, dynamic>),
      contentType: json['contentType'] == null
          ? null
          : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
              json['contentType'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['content'] as Map<String, dynamic>),
      answerType: json['answerType'] == null
          ? null
          : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
              json['answerType'] as Map<String, dynamic>),
      answers: (json['answers'] as List<dynamic>?)
          ?.map((e) => e as String?)
          .toList(),
      userId: json['userId'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['userId'] as Map<String, dynamic>),
      originalQuestionId: json['originalQuestionId'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['originalQuestionId'] as Map<String, dynamic>),
      childrens: json['childrens'] == null
          ? null
          : Input$QuestionUncheckedUpdateManyWithoutOriginalQuestionInput
              .fromJson(json['childrens'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      examquestions: json['examquestions'] == null
          ? null
          : Input$ExamQuestionUncheckedUpdateManyWithoutQuestionInput.fromJson(
              json['examquestions'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$QuestionUncheckedUpdateInputToJson(
        Input$QuestionUncheckedUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'type': instance.type?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'answerType': instance.answerType?.toJson(),
      'answers': instance.answers,
      'userId': instance.userId?.toJson(),
      'originalQuestionId': instance.originalQuestionId?.toJson(),
      'childrens': instance.childrens?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'examquestions': instance.examquestions?.toJson(),
    };

Input$QuestionUncheckedUpdateManyInput
    _$Input$QuestionUncheckedUpdateManyInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUncheckedUpdateManyInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          type: json['type'] == null
              ? null
              : Input$EnumQuestionTypeFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          contentType: json['contentType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['contentType'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          answerType: json['answerType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['answerType'] as Map<String, dynamic>),
          answers: (json['answers'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          userId: json['userId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          originalQuestionId: json['originalQuestionId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['originalQuestionId'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$QuestionUncheckedUpdateManyInputToJson(
        Input$QuestionUncheckedUpdateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'type': instance.type?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'answerType': instance.answerType?.toJson(),
      'answers': instance.answers,
      'userId': instance.userId?.toJson(),
      'originalQuestionId': instance.originalQuestionId?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$QuestionUncheckedUpdateManyWithoutChildrensInput
    _$Input$QuestionUncheckedUpdateManyWithoutChildrensInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUncheckedUpdateManyWithoutChildrensInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          type: json['type'] == null
              ? null
              : Input$EnumQuestionTypeFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          contentType: json['contentType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['contentType'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          answerType: json['answerType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['answerType'] as Map<String, dynamic>),
          answers: (json['answers'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          userId: json['userId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$QuestionUncheckedUpdateManyWithoutChildrensInputToJson(
            Input$QuestionUncheckedUpdateManyWithoutChildrensInput instance) =>
        <String, dynamic>{
          'id': instance.id?.toJson(),
          'name': instance.name?.toJson(),
          'type': instance.type?.toJson(),
          'contentType': instance.contentType?.toJson(),
          'content': instance.content?.toJson(),
          'answerType': instance.answerType?.toJson(),
          'answers': instance.answers,
          'userId': instance.userId?.toJson(),
          'createdAt': instance.createdAt?.toJson(),
          'updatedAt': instance.updatedAt?.toJson(),
        };

Input$QuestionUncheckedUpdateManyWithoutOriginalQuestionInput
    _$Input$QuestionUncheckedUpdateManyWithoutOriginalQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUncheckedUpdateManyWithoutOriginalQuestionInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionCreateWithoutOriginalQuestionInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionCreateOrConnectWithoutOriginalQuestionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionUpsertWithWhereUniqueWithoutOriginalQuestionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$QuestionCreateManyOriginalQuestionInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionUpdateWithWhereUniqueWithoutOriginalQuestionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionUpdateManyWithWhereWithoutOriginalQuestionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$QuestionUncheckedUpdateManyWithoutOriginalQuestionInputToJson(
            Input$QuestionUncheckedUpdateManyWithoutOriginalQuestionInput
                instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'set': instance.$set?.map((e) => e?.toJson()).toList(),
          'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
          'delete': instance.delete?.map((e) => e?.toJson()).toList(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
          'update': instance.update?.map((e) => e?.toJson()).toList(),
          'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
          'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
        };

Input$QuestionUncheckedUpdateManyWithoutQuestionsInput
    _$Input$QuestionUncheckedUpdateManyWithoutQuestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUncheckedUpdateManyWithoutQuestionsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          type: json['type'] == null
              ? null
              : Input$EnumQuestionTypeFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          contentType: json['contentType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['contentType'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          answerType: json['answerType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['answerType'] as Map<String, dynamic>),
          answers: (json['answers'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          originalQuestionId: json['originalQuestionId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['originalQuestionId'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$QuestionUncheckedUpdateManyWithoutQuestionsInputToJson(
            Input$QuestionUncheckedUpdateManyWithoutQuestionsInput instance) =>
        <String, dynamic>{
          'id': instance.id?.toJson(),
          'name': instance.name?.toJson(),
          'type': instance.type?.toJson(),
          'contentType': instance.contentType?.toJson(),
          'content': instance.content?.toJson(),
          'answerType': instance.answerType?.toJson(),
          'answers': instance.answers,
          'originalQuestionId': instance.originalQuestionId?.toJson(),
          'createdAt': instance.createdAt?.toJson(),
          'updatedAt': instance.updatedAt?.toJson(),
        };

Input$QuestionUncheckedUpdateManyWithoutUserInput
    _$Input$QuestionUncheckedUpdateManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUncheckedUpdateManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionUpsertWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$QuestionCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionUpdateWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionUpdateManyWithWhereWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$QuestionUncheckedUpdateManyWithoutUserInputToJson(
        Input$QuestionUncheckedUpdateManyWithoutUserInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$QuestionUncheckedUpdateWithoutChildrensInput
    _$Input$QuestionUncheckedUpdateWithoutChildrensInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUncheckedUpdateWithoutChildrensInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          type: json['type'] == null
              ? null
              : Input$EnumQuestionTypeFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          contentType: json['contentType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['contentType'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          answerType: json['answerType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['answerType'] as Map<String, dynamic>),
          answers: (json['answers'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          userId: json['userId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          originalQuestionId: json['originalQuestionId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['originalQuestionId'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          examquestions: json['examquestions'] == null
              ? null
              : Input$ExamQuestionUncheckedUpdateManyWithoutQuestionInput
                  .fromJson(json['examquestions'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$QuestionUncheckedUpdateWithoutChildrensInputToJson(
        Input$QuestionUncheckedUpdateWithoutChildrensInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'type': instance.type?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'answerType': instance.answerType?.toJson(),
      'answers': instance.answers,
      'userId': instance.userId?.toJson(),
      'originalQuestionId': instance.originalQuestionId?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'examquestions': instance.examquestions?.toJson(),
    };

Input$QuestionUncheckedUpdateWithoutExamquestionsInput
    _$Input$QuestionUncheckedUpdateWithoutExamquestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUncheckedUpdateWithoutExamquestionsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          type: json['type'] == null
              ? null
              : Input$EnumQuestionTypeFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          contentType: json['contentType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['contentType'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          answerType: json['answerType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['answerType'] as Map<String, dynamic>),
          answers: (json['answers'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          userId: json['userId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          originalQuestionId: json['originalQuestionId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['originalQuestionId'] as Map<String, dynamic>),
          childrens: json['childrens'] == null
              ? null
              : Input$QuestionUncheckedUpdateManyWithoutOriginalQuestionInput
                  .fromJson(json['childrens'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$QuestionUncheckedUpdateWithoutExamquestionsInputToJson(
            Input$QuestionUncheckedUpdateWithoutExamquestionsInput instance) =>
        <String, dynamic>{
          'id': instance.id?.toJson(),
          'name': instance.name?.toJson(),
          'type': instance.type?.toJson(),
          'contentType': instance.contentType?.toJson(),
          'content': instance.content?.toJson(),
          'answerType': instance.answerType?.toJson(),
          'answers': instance.answers,
          'userId': instance.userId?.toJson(),
          'originalQuestionId': instance.originalQuestionId?.toJson(),
          'childrens': instance.childrens?.toJson(),
          'createdAt': instance.createdAt?.toJson(),
          'updatedAt': instance.updatedAt?.toJson(),
        };

Input$QuestionUncheckedUpdateWithoutOriginalQuestionInput
    _$Input$QuestionUncheckedUpdateWithoutOriginalQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUncheckedUpdateWithoutOriginalQuestionInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          type: json['type'] == null
              ? null
              : Input$EnumQuestionTypeFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          contentType: json['contentType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['contentType'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          answerType: json['answerType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['answerType'] as Map<String, dynamic>),
          answers: (json['answers'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          userId: json['userId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          childrens: json['childrens'] == null
              ? null
              : Input$QuestionUncheckedUpdateManyWithoutOriginalQuestionInput
                  .fromJson(json['childrens'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          examquestions: json['examquestions'] == null
              ? null
              : Input$ExamQuestionUncheckedUpdateManyWithoutQuestionInput
                  .fromJson(json['examquestions'] as Map<String, dynamic>),
        );

Map<String,
    dynamic> _$Input$QuestionUncheckedUpdateWithoutOriginalQuestionInputToJson(
        Input$QuestionUncheckedUpdateWithoutOriginalQuestionInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'type': instance.type?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'answerType': instance.answerType?.toJson(),
      'answers': instance.answers,
      'userId': instance.userId?.toJson(),
      'childrens': instance.childrens?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'examquestions': instance.examquestions?.toJson(),
    };

Input$QuestionUncheckedUpdateWithoutUserInput
    _$Input$QuestionUncheckedUpdateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUncheckedUpdateWithoutUserInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          type: json['type'] == null
              ? null
              : Input$EnumQuestionTypeFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          contentType: json['contentType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['contentType'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          answerType: json['answerType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['answerType'] as Map<String, dynamic>),
          answers: (json['answers'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          originalQuestionId: json['originalQuestionId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['originalQuestionId'] as Map<String, dynamic>),
          childrens: json['childrens'] == null
              ? null
              : Input$QuestionUncheckedUpdateManyWithoutOriginalQuestionInput
                  .fromJson(json['childrens'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          examquestions: json['examquestions'] == null
              ? null
              : Input$ExamQuestionUncheckedUpdateManyWithoutQuestionInput
                  .fromJson(json['examquestions'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$QuestionUncheckedUpdateWithoutUserInputToJson(
        Input$QuestionUncheckedUpdateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'type': instance.type?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'answerType': instance.answerType?.toJson(),
      'answers': instance.answers,
      'originalQuestionId': instance.originalQuestionId?.toJson(),
      'childrens': instance.childrens?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'examquestions': instance.examquestions?.toJson(),
    };

Input$QuestionUpdateanswersInput _$Input$QuestionUpdateanswersInputFromJson(
        Map<String, dynamic> json) =>
    Input$QuestionUpdateanswersInput(
      $set: (json['set'] as List<dynamic>?)?.map((e) => e as String?).toList(),
      push: (json['push'] as List<dynamic>?)?.map((e) => e as String?).toList(),
    );

Map<String, dynamic> _$Input$QuestionUpdateanswersInputToJson(
        Input$QuestionUpdateanswersInput instance) =>
    <String, dynamic>{
      'set': instance.$set,
      'push': instance.push,
    };

Input$QuestionUpdateInput _$Input$QuestionUpdateInputFromJson(
        Map<String, dynamic> json) =>
    Input$QuestionUpdateInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      type: json['type'] == null
          ? null
          : Input$EnumQuestionTypeFieldUpdateOperationsInput.fromJson(
              json['type'] as Map<String, dynamic>),
      contentType: json['contentType'] == null
          ? null
          : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
              json['contentType'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['content'] as Map<String, dynamic>),
      answerType: json['answerType'] == null
          ? null
          : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
              json['answerType'] as Map<String, dynamic>),
      answers: (json['answers'] as List<dynamic>?)
          ?.map((e) => e as String?)
          .toList(),
      user: json['user'] == null
          ? null
          : Input$UserUpdateOneRequiredWithoutQuestionsInput.fromJson(
              json['user'] as Map<String, dynamic>),
      originalQuestion: json['originalQuestion'] == null
          ? null
          : Input$QuestionUpdateOneWithoutChildrensInput.fromJson(
              json['originalQuestion'] as Map<String, dynamic>),
      childrens: json['childrens'] == null
          ? null
          : Input$QuestionUpdateManyWithoutOriginalQuestionInput.fromJson(
              json['childrens'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      examquestions: json['examquestions'] == null
          ? null
          : Input$ExamQuestionUpdateManyWithoutQuestionInput.fromJson(
              json['examquestions'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$QuestionUpdateInputToJson(
        Input$QuestionUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'type': instance.type?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'answerType': instance.answerType?.toJson(),
      'answers': instance.answers,
      'user': instance.user?.toJson(),
      'originalQuestion': instance.originalQuestion?.toJson(),
      'childrens': instance.childrens?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'examquestions': instance.examquestions?.toJson(),
    };

Input$QuestionUpdateManyMutationInput
    _$Input$QuestionUpdateManyMutationInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUpdateManyMutationInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          type: json['type'] == null
              ? null
              : Input$EnumQuestionTypeFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          contentType: json['contentType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['contentType'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          answerType: json['answerType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['answerType'] as Map<String, dynamic>),
          answers: (json['answers'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$QuestionUpdateManyMutationInputToJson(
        Input$QuestionUpdateManyMutationInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'type': instance.type?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'answerType': instance.answerType?.toJson(),
      'answers': instance.answers,
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$QuestionUpdateManyWithoutOriginalQuestionInput
    _$Input$QuestionUpdateManyWithoutOriginalQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUpdateManyWithoutOriginalQuestionInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionCreateWithoutOriginalQuestionInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionCreateOrConnectWithoutOriginalQuestionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionUpsertWithWhereUniqueWithoutOriginalQuestionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$QuestionCreateManyOriginalQuestionInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionUpdateWithWhereUniqueWithoutOriginalQuestionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionUpdateManyWithWhereWithoutOriginalQuestionInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$QuestionUpdateManyWithoutOriginalQuestionInputToJson(
            Input$QuestionUpdateManyWithoutOriginalQuestionInput instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'set': instance.$set?.map((e) => e?.toJson()).toList(),
          'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
          'delete': instance.delete?.map((e) => e?.toJson()).toList(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
          'update': instance.update?.map((e) => e?.toJson()).toList(),
          'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
          'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
        };

Input$QuestionUpdateManyWithoutUserInput
    _$Input$QuestionUpdateManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUpdateManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionUpsertWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$QuestionCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionUpdateWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionUpdateManyWithWhereWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$QuestionScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$QuestionUpdateManyWithoutUserInputToJson(
        Input$QuestionUpdateManyWithoutUserInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$QuestionUpdateManyWithWhereWithoutOriginalQuestionInput
    _$Input$QuestionUpdateManyWithWhereWithoutOriginalQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUpdateManyWithWhereWithoutOriginalQuestionInput(
          where: Input$QuestionScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$QuestionUncheckedUpdateManyWithoutChildrensInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$QuestionUpdateManyWithWhereWithoutOriginalQuestionInputToJson(
            Input$QuestionUpdateManyWithWhereWithoutOriginalQuestionInput
                instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$QuestionUpdateManyWithWhereWithoutUserInput
    _$Input$QuestionUpdateManyWithWhereWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUpdateManyWithWhereWithoutUserInput(
          where: Input$QuestionScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$QuestionUncheckedUpdateManyWithoutQuestionsInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$QuestionUpdateManyWithWhereWithoutUserInputToJson(
        Input$QuestionUpdateManyWithWhereWithoutUserInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

Input$QuestionUpdateOneRequiredWithoutExamquestionsInput
    _$Input$QuestionUpdateOneRequiredWithoutExamquestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUpdateOneRequiredWithoutExamquestionsInput(
          create: json['create'] == null
              ? null
              : Input$QuestionUncheckedCreateWithoutExamquestionsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$QuestionCreateOrConnectWithoutExamquestionsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : Input$QuestionUpsertWithoutExamquestionsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$QuestionWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : Input$QuestionUncheckedUpdateWithoutExamquestionsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String,
    dynamic> _$Input$QuestionUpdateOneRequiredWithoutExamquestionsInputToJson(
        Input$QuestionUpdateOneRequiredWithoutExamquestionsInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'upsert': instance.upsert?.toJson(),
      'connect': instance.connect?.toJson(),
      'update': instance.update?.toJson(),
    };

Input$QuestionUpdateOneWithoutChildrensInput
    _$Input$QuestionUpdateOneWithoutChildrensInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUpdateOneWithoutChildrensInput(
          create: json['create'] == null
              ? null
              : Input$QuestionUncheckedCreateWithoutChildrensInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$QuestionCreateOrConnectWithoutChildrensInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : Input$QuestionUpsertWithoutChildrensInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          disconnect: json['disconnect'] as bool?,
          delete: json['delete'] as bool?,
          connect: json['connect'] == null
              ? null
              : Input$QuestionWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : Input$QuestionUncheckedUpdateWithoutChildrensInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$QuestionUpdateOneWithoutChildrensInputToJson(
        Input$QuestionUpdateOneWithoutChildrensInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'upsert': instance.upsert?.toJson(),
      'disconnect': instance.disconnect,
      'delete': instance.delete,
      'connect': instance.connect?.toJson(),
      'update': instance.update?.toJson(),
    };

Input$QuestionUpdateWithoutChildrensInput
    _$Input$QuestionUpdateWithoutChildrensInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUpdateWithoutChildrensInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          type: json['type'] == null
              ? null
              : Input$EnumQuestionTypeFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          contentType: json['contentType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['contentType'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          answerType: json['answerType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['answerType'] as Map<String, dynamic>),
          answers: (json['answers'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          user: json['user'] == null
              ? null
              : Input$UserUpdateOneRequiredWithoutQuestionsInput.fromJson(
                  json['user'] as Map<String, dynamic>),
          originalQuestion: json['originalQuestion'] == null
              ? null
              : Input$QuestionUpdateOneWithoutChildrensInput.fromJson(
                  json['originalQuestion'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          examquestions: json['examquestions'] == null
              ? null
              : Input$ExamQuestionUpdateManyWithoutQuestionInput.fromJson(
                  json['examquestions'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$QuestionUpdateWithoutChildrensInputToJson(
        Input$QuestionUpdateWithoutChildrensInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'type': instance.type?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'answerType': instance.answerType?.toJson(),
      'answers': instance.answers,
      'user': instance.user?.toJson(),
      'originalQuestion': instance.originalQuestion?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'examquestions': instance.examquestions?.toJson(),
    };

Input$QuestionUpdateWithoutExamquestionsInput
    _$Input$QuestionUpdateWithoutExamquestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUpdateWithoutExamquestionsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          type: json['type'] == null
              ? null
              : Input$EnumQuestionTypeFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          contentType: json['contentType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['contentType'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          answerType: json['answerType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['answerType'] as Map<String, dynamic>),
          answers: (json['answers'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          user: json['user'] == null
              ? null
              : Input$UserUpdateOneRequiredWithoutQuestionsInput.fromJson(
                  json['user'] as Map<String, dynamic>),
          originalQuestion: json['originalQuestion'] == null
              ? null
              : Input$QuestionUpdateOneWithoutChildrensInput.fromJson(
                  json['originalQuestion'] as Map<String, dynamic>),
          childrens: json['childrens'] == null
              ? null
              : Input$QuestionUpdateManyWithoutOriginalQuestionInput.fromJson(
                  json['childrens'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$QuestionUpdateWithoutExamquestionsInputToJson(
        Input$QuestionUpdateWithoutExamquestionsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'type': instance.type?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'answerType': instance.answerType?.toJson(),
      'answers': instance.answers,
      'user': instance.user?.toJson(),
      'originalQuestion': instance.originalQuestion?.toJson(),
      'childrens': instance.childrens?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$QuestionUpdateWithoutOriginalQuestionInput
    _$Input$QuestionUpdateWithoutOriginalQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUpdateWithoutOriginalQuestionInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          type: json['type'] == null
              ? null
              : Input$EnumQuestionTypeFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          contentType: json['contentType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['contentType'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          answerType: json['answerType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['answerType'] as Map<String, dynamic>),
          answers: (json['answers'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          user: json['user'] == null
              ? null
              : Input$UserUpdateOneRequiredWithoutQuestionsInput.fromJson(
                  json['user'] as Map<String, dynamic>),
          childrens: json['childrens'] == null
              ? null
              : Input$QuestionUpdateManyWithoutOriginalQuestionInput.fromJson(
                  json['childrens'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          examquestions: json['examquestions'] == null
              ? null
              : Input$ExamQuestionUpdateManyWithoutQuestionInput.fromJson(
                  json['examquestions'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$QuestionUpdateWithoutOriginalQuestionInputToJson(
        Input$QuestionUpdateWithoutOriginalQuestionInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'type': instance.type?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'answerType': instance.answerType?.toJson(),
      'answers': instance.answers,
      'user': instance.user?.toJson(),
      'childrens': instance.childrens?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'examquestions': instance.examquestions?.toJson(),
    };

Input$QuestionUpdateWithoutUserInput
    _$Input$QuestionUpdateWithoutUserInputFromJson(Map<String, dynamic> json) =>
        Input$QuestionUpdateWithoutUserInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          type: json['type'] == null
              ? null
              : Input$EnumQuestionTypeFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          contentType: json['contentType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['contentType'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          answerType: json['answerType'] == null
              ? null
              : Input$EnumContentTypeFieldUpdateOperationsInput.fromJson(
                  json['answerType'] as Map<String, dynamic>),
          answers: (json['answers'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          originalQuestion: json['originalQuestion'] == null
              ? null
              : Input$QuestionUpdateOneWithoutChildrensInput.fromJson(
                  json['originalQuestion'] as Map<String, dynamic>),
          childrens: json['childrens'] == null
              ? null
              : Input$QuestionUpdateManyWithoutOriginalQuestionInput.fromJson(
                  json['childrens'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          examquestions: json['examquestions'] == null
              ? null
              : Input$ExamQuestionUpdateManyWithoutQuestionInput.fromJson(
                  json['examquestions'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$QuestionUpdateWithoutUserInputToJson(
        Input$QuestionUpdateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'type': instance.type?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'answerType': instance.answerType?.toJson(),
      'answers': instance.answers,
      'originalQuestion': instance.originalQuestion?.toJson(),
      'childrens': instance.childrens?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'examquestions': instance.examquestions?.toJson(),
    };

Input$QuestionUpdateWithWhereUniqueWithoutOriginalQuestionInput
    _$Input$QuestionUpdateWithWhereUniqueWithoutOriginalQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUpdateWithWhereUniqueWithoutOriginalQuestionInput(
          where: Input$QuestionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$QuestionUncheckedUpdateWithoutOriginalQuestionInput
              .fromJson(json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$QuestionUpdateWithWhereUniqueWithoutOriginalQuestionInputToJson(
            Input$QuestionUpdateWithWhereUniqueWithoutOriginalQuestionInput
                instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$QuestionUpdateWithWhereUniqueWithoutUserInput
    _$Input$QuestionUpdateWithWhereUniqueWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUpdateWithWhereUniqueWithoutUserInput(
          where: Input$QuestionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$QuestionUncheckedUpdateWithoutUserInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$QuestionUpdateWithWhereUniqueWithoutUserInputToJson(
            Input$QuestionUpdateWithWhereUniqueWithoutUserInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$QuestionUpsertWithoutChildrensInput
    _$Input$QuestionUpsertWithoutChildrensInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUpsertWithoutChildrensInput(
          update: Input$QuestionUncheckedUpdateWithoutChildrensInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$QuestionUncheckedCreateWithoutChildrensInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$QuestionUpsertWithoutChildrensInputToJson(
        Input$QuestionUpsertWithoutChildrensInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$QuestionUpsertWithoutExamquestionsInput
    _$Input$QuestionUpsertWithoutExamquestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUpsertWithoutExamquestionsInput(
          update:
              Input$QuestionUncheckedUpdateWithoutExamquestionsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
          create:
              Input$QuestionUncheckedCreateWithoutExamquestionsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$QuestionUpsertWithoutExamquestionsInputToJson(
        Input$QuestionUpsertWithoutExamquestionsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$QuestionUpsertWithWhereUniqueWithoutOriginalQuestionInput
    _$Input$QuestionUpsertWithWhereUniqueWithoutOriginalQuestionInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUpsertWithWhereUniqueWithoutOriginalQuestionInput(
          where: Input$QuestionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: Input$QuestionUncheckedUpdateWithoutOriginalQuestionInput
              .fromJson(json['update'] as Map<String, dynamic>),
          create: Input$QuestionUncheckedCreateWithoutOriginalQuestionInput
              .fromJson(json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$QuestionUpsertWithWhereUniqueWithoutOriginalQuestionInputToJson(
            Input$QuestionUpsertWithWhereUniqueWithoutOriginalQuestionInput
                instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

Input$QuestionUpsertWithWhereUniqueWithoutUserInput
    _$Input$QuestionUpsertWithWhereUniqueWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$QuestionUpsertWithWhereUniqueWithoutUserInput(
          where: Input$QuestionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: Input$QuestionUncheckedUpdateWithoutUserInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$QuestionUncheckedCreateWithoutUserInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$QuestionUpsertWithWhereUniqueWithoutUserInputToJson(
            Input$QuestionUpsertWithWhereUniqueWithoutUserInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

Input$QuestionWhereInput _$Input$QuestionWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$QuestionWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$QuestionWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$QuestionWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$QuestionWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      type: json['type'] == null
          ? null
          : Input$EnumQuestionTypeFilter.fromJson(
              json['type'] as Map<String, dynamic>),
      contentType: json['contentType'] == null
          ? null
          : Input$EnumContentTypeFilter.fromJson(
              json['contentType'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : Input$StringFilter.fromJson(
              json['content'] as Map<String, dynamic>),
      answerType: json['answerType'] == null
          ? null
          : Input$EnumContentTypeFilter.fromJson(
              json['answerType'] as Map<String, dynamic>),
      answers: json['answers'] == null
          ? null
          : Input$StringNullableListFilter.fromJson(
              json['answers'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : Input$StringFilter.fromJson(json['userId'] as Map<String, dynamic>),
      user: json['user'] == null
          ? null
          : Input$UserWhereInput.fromJson(json['user'] as Map<String, dynamic>),
      originalQuestionId: json['originalQuestionId'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['originalQuestionId'] as Map<String, dynamic>),
      originalQuestion: json['originalQuestion'] == null
          ? null
          : Input$QuestionWhereInput.fromJson(
              json['originalQuestion'] as Map<String, dynamic>),
      childrens: json['childrens'] == null
          ? null
          : Input$QuestionListRelationFilter.fromJson(
              json['childrens'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      examquestions: json['examquestions'] == null
          ? null
          : Input$ExamQuestionListRelationFilter.fromJson(
              json['examquestions'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$QuestionWhereInputToJson(
        Input$QuestionWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'type': instance.type?.toJson(),
      'contentType': instance.contentType?.toJson(),
      'content': instance.content?.toJson(),
      'answerType': instance.answerType?.toJson(),
      'answers': instance.answers?.toJson(),
      'userId': instance.userId?.toJson(),
      'user': instance.user?.toJson(),
      'originalQuestionId': instance.originalQuestionId?.toJson(),
      'originalQuestion': instance.originalQuestion?.toJson(),
      'childrens': instance.childrens?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'examquestions': instance.examquestions?.toJson(),
    };

Input$QuestionWhereUniqueInput _$Input$QuestionWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    Input$QuestionWhereUniqueInput(
      id: json['id'] as String?,
    );

Map<String, dynamic> _$Input$QuestionWhereUniqueInputToJson(
        Input$QuestionWhereUniqueInput instance) =>
    <String, dynamic>{
      'id': instance.id,
    };

Input$RegencyCountOrderByAggregateInput
    _$Input$RegencyCountOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyCountOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          provinceId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['provinceId'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$RegencyCountOrderByAggregateInputToJson(
        Input$RegencyCountOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'provinceId': _$Enum$SortOrderEnumMap[instance.provinceId],
    };

Input$RegencyCreateInput _$Input$RegencyCreateInputFromJson(
        Map<String, dynamic> json) =>
    Input$RegencyCreateInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      province: Input$ProvinceCreateNestedOneWithoutRegenciesInput.fromJson(
          json['province'] as Map<String, dynamic>),
      users: json['users'] == null
          ? null
          : Input$UserCreateNestedManyWithoutRegencyInput.fromJson(
              json['users'] as Map<String, dynamic>),
      School: json['School'] == null
          ? null
          : Input$SchoolCreateNestedManyWithoutRegencyInput.fromJson(
              json['School'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$RegencyCreateInputToJson(
        Input$RegencyCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'province': instance.province.toJson(),
      'users': instance.users?.toJson(),
      'School': instance.School?.toJson(),
    };

Input$RegencyCreateManyInput _$Input$RegencyCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    Input$RegencyCreateManyInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      provinceId: json['provinceId'] as String,
    );

Map<String, dynamic> _$Input$RegencyCreateManyInputToJson(
        Input$RegencyCreateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'provinceId': instance.provinceId,
    };

Input$RegencyCreateManyProvinceInput
    _$Input$RegencyCreateManyProvinceInputFromJson(Map<String, dynamic> json) =>
        Input$RegencyCreateManyProvinceInput(
          id: json['id'] as String?,
          name: json['name'] as String,
        );

Map<String, dynamic> _$Input$RegencyCreateManyProvinceInputToJson(
        Input$RegencyCreateManyProvinceInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
    };

Input$RegencyCreateManyProvinceInputEnvelope
    _$Input$RegencyCreateManyProvinceInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyCreateManyProvinceInputEnvelope(
          data: Input$RegencyCreateManyProvinceInput.fromJson(
              json['data'] as Map<String, dynamic>),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$Input$RegencyCreateManyProvinceInputEnvelopeToJson(
        Input$RegencyCreateManyProvinceInputEnvelope instance) =>
    <String, dynamic>{
      'data': instance.data.toJson(),
      'skipDuplicates': instance.skipDuplicates,
    };

Input$RegencyCreateNestedManyWithoutProvinceInput
    _$Input$RegencyCreateNestedManyWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyCreateNestedManyWithoutProvinceInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyCreateWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyCreateOrConnectWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$RegencyCreateManyProvinceInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$RegencyCreateNestedManyWithoutProvinceInputToJson(
        Input$RegencyCreateNestedManyWithoutProvinceInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$RegencyCreateNestedOneWithoutSchoolInput
    _$Input$RegencyCreateNestedOneWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyCreateNestedOneWithoutSchoolInput(
          create: json['create'] == null
              ? null
              : Input$RegencyUncheckedCreateWithoutSchoolInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$RegencyCreateOrConnectWithoutSchoolInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$RegencyWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyCreateNestedOneWithoutSchoolInputToJson(
        Input$RegencyCreateNestedOneWithoutSchoolInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'connect': instance.connect?.toJson(),
    };

Input$RegencyCreateNestedOneWithoutUsersInput
    _$Input$RegencyCreateNestedOneWithoutUsersInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyCreateNestedOneWithoutUsersInput(
          create: json['create'] == null
              ? null
              : Input$RegencyUncheckedCreateWithoutUsersInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$RegencyCreateOrConnectWithoutUsersInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$RegencyWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyCreateNestedOneWithoutUsersInputToJson(
        Input$RegencyCreateNestedOneWithoutUsersInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'connect': instance.connect?.toJson(),
    };

Input$RegencyCreateOrConnectWithoutProvinceInput
    _$Input$RegencyCreateOrConnectWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyCreateOrConnectWithoutProvinceInput(
          where: Input$RegencyWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$RegencyUncheckedCreateWithoutProvinceInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyCreateOrConnectWithoutProvinceInputToJson(
        Input$RegencyCreateOrConnectWithoutProvinceInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$RegencyCreateOrConnectWithoutSchoolInput
    _$Input$RegencyCreateOrConnectWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyCreateOrConnectWithoutSchoolInput(
          where: Input$RegencyWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$RegencyUncheckedCreateWithoutSchoolInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyCreateOrConnectWithoutSchoolInputToJson(
        Input$RegencyCreateOrConnectWithoutSchoolInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$RegencyCreateOrConnectWithoutUsersInput
    _$Input$RegencyCreateOrConnectWithoutUsersInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyCreateOrConnectWithoutUsersInput(
          where: Input$RegencyWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$RegencyUncheckedCreateWithoutUsersInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyCreateOrConnectWithoutUsersInputToJson(
        Input$RegencyCreateOrConnectWithoutUsersInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$RegencyCreateWithoutProvinceInput
    _$Input$RegencyCreateWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyCreateWithoutProvinceInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          users: json['users'] == null
              ? null
              : Input$UserCreateNestedManyWithoutRegencyInput.fromJson(
                  json['users'] as Map<String, dynamic>),
          School: json['School'] == null
              ? null
              : Input$SchoolCreateNestedManyWithoutRegencyInput.fromJson(
                  json['School'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyCreateWithoutProvinceInputToJson(
        Input$RegencyCreateWithoutProvinceInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'users': instance.users?.toJson(),
      'School': instance.School?.toJson(),
    };

Input$RegencyCreateWithoutSchoolInput
    _$Input$RegencyCreateWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyCreateWithoutSchoolInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          province: Input$ProvinceCreateNestedOneWithoutRegenciesInput.fromJson(
              json['province'] as Map<String, dynamic>),
          users: json['users'] == null
              ? null
              : Input$UserCreateNestedManyWithoutRegencyInput.fromJson(
                  json['users'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyCreateWithoutSchoolInputToJson(
        Input$RegencyCreateWithoutSchoolInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'province': instance.province.toJson(),
      'users': instance.users?.toJson(),
    };

Input$RegencyCreateWithoutUsersInput
    _$Input$RegencyCreateWithoutUsersInputFromJson(Map<String, dynamic> json) =>
        Input$RegencyCreateWithoutUsersInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          province: Input$ProvinceCreateNestedOneWithoutRegenciesInput.fromJson(
              json['province'] as Map<String, dynamic>),
          School: json['School'] == null
              ? null
              : Input$SchoolCreateNestedManyWithoutRegencyInput.fromJson(
                  json['School'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyCreateWithoutUsersInputToJson(
        Input$RegencyCreateWithoutUsersInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'province': instance.province.toJson(),
      'School': instance.School?.toJson(),
    };

Input$RegencyListRelationFilter _$Input$RegencyListRelationFilterFromJson(
        Map<String, dynamic> json) =>
    Input$RegencyListRelationFilter(
      every: json['every'] == null
          ? null
          : Input$RegencyWhereInput.fromJson(
              json['every'] as Map<String, dynamic>),
      some: json['some'] == null
          ? null
          : Input$RegencyWhereInput.fromJson(
              json['some'] as Map<String, dynamic>),
      none: json['none'] == null
          ? null
          : Input$RegencyWhereInput.fromJson(
              json['none'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$RegencyListRelationFilterToJson(
        Input$RegencyListRelationFilter instance) =>
    <String, dynamic>{
      'every': instance.every?.toJson(),
      'some': instance.some?.toJson(),
      'none': instance.none?.toJson(),
    };

Input$RegencyMaxOrderByAggregateInput
    _$Input$RegencyMaxOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyMaxOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          provinceId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['provinceId'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$RegencyMaxOrderByAggregateInputToJson(
        Input$RegencyMaxOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'provinceId': _$Enum$SortOrderEnumMap[instance.provinceId],
    };

Input$RegencyMinOrderByAggregateInput
    _$Input$RegencyMinOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyMinOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          provinceId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['provinceId'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$RegencyMinOrderByAggregateInputToJson(
        Input$RegencyMinOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'provinceId': _$Enum$SortOrderEnumMap[instance.provinceId],
    };

Input$RegencyOrderByRelationAggregateInput
    _$Input$RegencyOrderByRelationAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyOrderByRelationAggregateInput(
          $_count: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['_count'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$RegencyOrderByRelationAggregateInputToJson(
        Input$RegencyOrderByRelationAggregateInput instance) =>
    <String, dynamic>{
      '_count': _$Enum$SortOrderEnumMap[instance.$_count],
    };

Input$RegencyOrderByWithAggregationInput
    _$Input$RegencyOrderByWithAggregationInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyOrderByWithAggregationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          provinceId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['provinceId'],
              unknownValue: Enum$SortOrder.$unknown),
          $_count: json['_count'] == null
              ? null
              : Input$RegencyCountOrderByAggregateInput.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$RegencyMaxOrderByAggregateInput.fromJson(
                  json['_max'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$RegencyMinOrderByAggregateInput.fromJson(
                  json['_min'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyOrderByWithAggregationInputToJson(
        Input$RegencyOrderByWithAggregationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'provinceId': _$Enum$SortOrderEnumMap[instance.provinceId],
      '_count': instance.$_count?.toJson(),
      '_max': instance.$_max?.toJson(),
      '_min': instance.$_min?.toJson(),
    };

Input$RegencyOrderByWithRelationInput
    _$Input$RegencyOrderByWithRelationInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyOrderByWithRelationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          provinceId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['provinceId'],
              unknownValue: Enum$SortOrder.$unknown),
          province: json['province'] == null
              ? null
              : Input$ProvinceOrderByWithRelationInput.fromJson(
                  json['province'] as Map<String, dynamic>),
          users: json['users'] == null
              ? null
              : Input$UserOrderByRelationAggregateInput.fromJson(
                  json['users'] as Map<String, dynamic>),
          School: json['School'] == null
              ? null
              : Input$SchoolOrderByRelationAggregateInput.fromJson(
                  json['School'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyOrderByWithRelationInputToJson(
        Input$RegencyOrderByWithRelationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'provinceId': _$Enum$SortOrderEnumMap[instance.provinceId],
      'province': instance.province?.toJson(),
      'users': instance.users?.toJson(),
      'School': instance.School?.toJson(),
    };

Input$RegencyRelationFilter _$Input$RegencyRelationFilterFromJson(
        Map<String, dynamic> json) =>
    Input$RegencyRelationFilter(
      $is: json['is'] == null
          ? null
          : Input$RegencyWhereInput.fromJson(
              json['is'] as Map<String, dynamic>),
      isNot: json['isNot'] == null
          ? null
          : Input$RegencyWhereInput.fromJson(
              json['isNot'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$RegencyRelationFilterToJson(
        Input$RegencyRelationFilter instance) =>
    <String, dynamic>{
      'is': instance.$is?.toJson(),
      'isNot': instance.isNot?.toJson(),
    };

Input$RegencyScalarWhereInput _$Input$RegencyScalarWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$RegencyScalarWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$RegencyScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$RegencyScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$RegencyScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      provinceId: json['provinceId'] == null
          ? null
          : Input$StringFilter.fromJson(
              json['provinceId'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$RegencyScalarWhereInputToJson(
        Input$RegencyScalarWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
    };

Input$RegencyScalarWhereWithAggregatesInput
    _$Input$RegencyScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          OR: (json['OR'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          NOT: (json['NOT'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          id: json['id'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['name'] as Map<String, dynamic>),
          provinceId: json['provinceId'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['provinceId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyScalarWhereWithAggregatesInputToJson(
        Input$RegencyScalarWhereWithAggregatesInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
    };

Input$RegencyUncheckedCreateInput _$Input$RegencyUncheckedCreateInputFromJson(
        Map<String, dynamic> json) =>
    Input$RegencyUncheckedCreateInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      provinceId: json['provinceId'] as String,
      users: json['users'] == null
          ? null
          : Input$UserUncheckedCreateNestedManyWithoutRegencyInput.fromJson(
              json['users'] as Map<String, dynamic>),
      School: json['School'] == null
          ? null
          : Input$SchoolUncheckedCreateNestedManyWithoutRegencyInput.fromJson(
              json['School'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$RegencyUncheckedCreateInputToJson(
        Input$RegencyUncheckedCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'provinceId': instance.provinceId,
      'users': instance.users?.toJson(),
      'School': instance.School?.toJson(),
    };

Input$RegencyUncheckedCreateNestedManyWithoutProvinceInput
    _$Input$RegencyUncheckedCreateNestedManyWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyUncheckedCreateNestedManyWithoutProvinceInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyCreateWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyCreateOrConnectWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$RegencyCreateManyProvinceInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String,
    dynamic> _$Input$RegencyUncheckedCreateNestedManyWithoutProvinceInputToJson(
        Input$RegencyUncheckedCreateNestedManyWithoutProvinceInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$RegencyUncheckedCreateWithoutProvinceInput
    _$Input$RegencyUncheckedCreateWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyUncheckedCreateWithoutProvinceInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          users: json['users'] == null
              ? null
              : Input$UserUncheckedCreateNestedManyWithoutRegencyInput.fromJson(
                  json['users'] as Map<String, dynamic>),
          School: json['School'] == null
              ? null
              : Input$SchoolUncheckedCreateNestedManyWithoutRegencyInput
                  .fromJson(json['School'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyUncheckedCreateWithoutProvinceInputToJson(
        Input$RegencyUncheckedCreateWithoutProvinceInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'users': instance.users?.toJson(),
      'School': instance.School?.toJson(),
    };

Input$RegencyUncheckedCreateWithoutSchoolInput
    _$Input$RegencyUncheckedCreateWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyUncheckedCreateWithoutSchoolInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          provinceId: json['provinceId'] as String,
          users: json['users'] == null
              ? null
              : Input$UserUncheckedCreateNestedManyWithoutRegencyInput.fromJson(
                  json['users'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyUncheckedCreateWithoutSchoolInputToJson(
        Input$RegencyUncheckedCreateWithoutSchoolInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'provinceId': instance.provinceId,
      'users': instance.users?.toJson(),
    };

Input$RegencyUncheckedCreateWithoutUsersInput
    _$Input$RegencyUncheckedCreateWithoutUsersInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyUncheckedCreateWithoutUsersInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          provinceId: json['provinceId'] as String,
          School: json['School'] == null
              ? null
              : Input$SchoolUncheckedCreateNestedManyWithoutRegencyInput
                  .fromJson(json['School'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyUncheckedCreateWithoutUsersInputToJson(
        Input$RegencyUncheckedCreateWithoutUsersInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'provinceId': instance.provinceId,
      'School': instance.School?.toJson(),
    };

Input$RegencyUncheckedUpdateInput _$Input$RegencyUncheckedUpdateInputFromJson(
        Map<String, dynamic> json) =>
    Input$RegencyUncheckedUpdateInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      provinceId: json['provinceId'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['provinceId'] as Map<String, dynamic>),
      users: json['users'] == null
          ? null
          : Input$UserUncheckedUpdateManyWithoutRegencyInput.fromJson(
              json['users'] as Map<String, dynamic>),
      School: json['School'] == null
          ? null
          : Input$SchoolUncheckedUpdateManyWithoutRegencyInput.fromJson(
              json['School'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$RegencyUncheckedUpdateInputToJson(
        Input$RegencyUncheckedUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'users': instance.users?.toJson(),
      'School': instance.School?.toJson(),
    };

Input$RegencyUncheckedUpdateManyInput
    _$Input$RegencyUncheckedUpdateManyInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyUncheckedUpdateManyInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          provinceId: json['provinceId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['provinceId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyUncheckedUpdateManyInputToJson(
        Input$RegencyUncheckedUpdateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
    };

Input$RegencyUncheckedUpdateManyWithoutProvinceInput
    _$Input$RegencyUncheckedUpdateManyWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyUncheckedUpdateManyWithoutProvinceInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyCreateWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyCreateOrConnectWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyUpsertWithWhereUniqueWithoutProvinceInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$RegencyCreateManyProvinceInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyUpdateWithWhereUniqueWithoutProvinceInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyUpdateManyWithWhereWithoutProvinceInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$RegencyUncheckedUpdateManyWithoutProvinceInputToJson(
            Input$RegencyUncheckedUpdateManyWithoutProvinceInput instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'set': instance.$set?.map((e) => e?.toJson()).toList(),
          'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
          'delete': instance.delete?.map((e) => e?.toJson()).toList(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
          'update': instance.update?.map((e) => e?.toJson()).toList(),
          'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
          'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
        };

Input$RegencyUncheckedUpdateManyWithoutRegenciesInput
    _$Input$RegencyUncheckedUpdateManyWithoutRegenciesInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyUncheckedUpdateManyWithoutRegenciesInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$RegencyUncheckedUpdateManyWithoutRegenciesInputToJson(
            Input$RegencyUncheckedUpdateManyWithoutRegenciesInput instance) =>
        <String, dynamic>{
          'id': instance.id?.toJson(),
          'name': instance.name?.toJson(),
        };

Input$RegencyUncheckedUpdateWithoutProvinceInput
    _$Input$RegencyUncheckedUpdateWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyUncheckedUpdateWithoutProvinceInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          users: json['users'] == null
              ? null
              : Input$UserUncheckedUpdateManyWithoutRegencyInput.fromJson(
                  json['users'] as Map<String, dynamic>),
          School: json['School'] == null
              ? null
              : Input$SchoolUncheckedUpdateManyWithoutRegencyInput.fromJson(
                  json['School'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyUncheckedUpdateWithoutProvinceInputToJson(
        Input$RegencyUncheckedUpdateWithoutProvinceInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'users': instance.users?.toJson(),
      'School': instance.School?.toJson(),
    };

Input$RegencyUncheckedUpdateWithoutSchoolInput
    _$Input$RegencyUncheckedUpdateWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyUncheckedUpdateWithoutSchoolInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          provinceId: json['provinceId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['provinceId'] as Map<String, dynamic>),
          users: json['users'] == null
              ? null
              : Input$UserUncheckedUpdateManyWithoutRegencyInput.fromJson(
                  json['users'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyUncheckedUpdateWithoutSchoolInputToJson(
        Input$RegencyUncheckedUpdateWithoutSchoolInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'users': instance.users?.toJson(),
    };

Input$RegencyUncheckedUpdateWithoutUsersInput
    _$Input$RegencyUncheckedUpdateWithoutUsersInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyUncheckedUpdateWithoutUsersInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          provinceId: json['provinceId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['provinceId'] as Map<String, dynamic>),
          School: json['School'] == null
              ? null
              : Input$SchoolUncheckedUpdateManyWithoutRegencyInput.fromJson(
                  json['School'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyUncheckedUpdateWithoutUsersInputToJson(
        Input$RegencyUncheckedUpdateWithoutUsersInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'School': instance.School?.toJson(),
    };

Input$RegencyUpdateInput _$Input$RegencyUpdateInputFromJson(
        Map<String, dynamic> json) =>
    Input$RegencyUpdateInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      province: json['province'] == null
          ? null
          : Input$ProvinceUpdateOneRequiredWithoutRegenciesInput.fromJson(
              json['province'] as Map<String, dynamic>),
      users: json['users'] == null
          ? null
          : Input$UserUpdateManyWithoutRegencyInput.fromJson(
              json['users'] as Map<String, dynamic>),
      School: json['School'] == null
          ? null
          : Input$SchoolUpdateManyWithoutRegencyInput.fromJson(
              json['School'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$RegencyUpdateInputToJson(
        Input$RegencyUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'province': instance.province?.toJson(),
      'users': instance.users?.toJson(),
      'School': instance.School?.toJson(),
    };

Input$RegencyUpdateManyMutationInput
    _$Input$RegencyUpdateManyMutationInputFromJson(Map<String, dynamic> json) =>
        Input$RegencyUpdateManyMutationInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyUpdateManyMutationInputToJson(
        Input$RegencyUpdateManyMutationInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
    };

Input$RegencyUpdateManyWithoutProvinceInput
    _$Input$RegencyUpdateManyWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyUpdateManyWithoutProvinceInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyCreateWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyCreateOrConnectWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyUpsertWithWhereUniqueWithoutProvinceInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$RegencyCreateManyProvinceInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyUpdateWithWhereUniqueWithoutProvinceInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyUpdateManyWithWhereWithoutProvinceInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$RegencyScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$RegencyUpdateManyWithoutProvinceInputToJson(
        Input$RegencyUpdateManyWithoutProvinceInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$RegencyUpdateManyWithWhereWithoutProvinceInput
    _$Input$RegencyUpdateManyWithWhereWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyUpdateManyWithWhereWithoutProvinceInput(
          where: Input$RegencyScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$RegencyUncheckedUpdateManyWithoutRegenciesInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$RegencyUpdateManyWithWhereWithoutProvinceInputToJson(
            Input$RegencyUpdateManyWithWhereWithoutProvinceInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$RegencyUpdateOneRequiredWithoutSchoolInput
    _$Input$RegencyUpdateOneRequiredWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyUpdateOneRequiredWithoutSchoolInput(
          create: json['create'] == null
              ? null
              : Input$RegencyUncheckedCreateWithoutSchoolInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$RegencyCreateOrConnectWithoutSchoolInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : Input$RegencyUpsertWithoutSchoolInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$RegencyWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : Input$RegencyUncheckedUpdateWithoutSchoolInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyUpdateOneRequiredWithoutSchoolInputToJson(
        Input$RegencyUpdateOneRequiredWithoutSchoolInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'upsert': instance.upsert?.toJson(),
      'connect': instance.connect?.toJson(),
      'update': instance.update?.toJson(),
    };

Input$RegencyUpdateOneRequiredWithoutUsersInput
    _$Input$RegencyUpdateOneRequiredWithoutUsersInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyUpdateOneRequiredWithoutUsersInput(
          create: json['create'] == null
              ? null
              : Input$RegencyUncheckedCreateWithoutUsersInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$RegencyCreateOrConnectWithoutUsersInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : Input$RegencyUpsertWithoutUsersInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$RegencyWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : Input$RegencyUncheckedUpdateWithoutUsersInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyUpdateOneRequiredWithoutUsersInputToJson(
        Input$RegencyUpdateOneRequiredWithoutUsersInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'upsert': instance.upsert?.toJson(),
      'connect': instance.connect?.toJson(),
      'update': instance.update?.toJson(),
    };

Input$RegencyUpdateWithoutProvinceInput
    _$Input$RegencyUpdateWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyUpdateWithoutProvinceInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          users: json['users'] == null
              ? null
              : Input$UserUpdateManyWithoutRegencyInput.fromJson(
                  json['users'] as Map<String, dynamic>),
          School: json['School'] == null
              ? null
              : Input$SchoolUpdateManyWithoutRegencyInput.fromJson(
                  json['School'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyUpdateWithoutProvinceInputToJson(
        Input$RegencyUpdateWithoutProvinceInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'users': instance.users?.toJson(),
      'School': instance.School?.toJson(),
    };

Input$RegencyUpdateWithoutSchoolInput
    _$Input$RegencyUpdateWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyUpdateWithoutSchoolInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          province: json['province'] == null
              ? null
              : Input$ProvinceUpdateOneRequiredWithoutRegenciesInput.fromJson(
                  json['province'] as Map<String, dynamic>),
          users: json['users'] == null
              ? null
              : Input$UserUpdateManyWithoutRegencyInput.fromJson(
                  json['users'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyUpdateWithoutSchoolInputToJson(
        Input$RegencyUpdateWithoutSchoolInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'province': instance.province?.toJson(),
      'users': instance.users?.toJson(),
    };

Input$RegencyUpdateWithoutUsersInput
    _$Input$RegencyUpdateWithoutUsersInputFromJson(Map<String, dynamic> json) =>
        Input$RegencyUpdateWithoutUsersInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          province: json['province'] == null
              ? null
              : Input$ProvinceUpdateOneRequiredWithoutRegenciesInput.fromJson(
                  json['province'] as Map<String, dynamic>),
          School: json['School'] == null
              ? null
              : Input$SchoolUpdateManyWithoutRegencyInput.fromJson(
                  json['School'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyUpdateWithoutUsersInputToJson(
        Input$RegencyUpdateWithoutUsersInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'province': instance.province?.toJson(),
      'School': instance.School?.toJson(),
    };

Input$RegencyUpdateWithWhereUniqueWithoutProvinceInput
    _$Input$RegencyUpdateWithWhereUniqueWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyUpdateWithWhereUniqueWithoutProvinceInput(
          where: Input$RegencyWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$RegencyUncheckedUpdateWithoutProvinceInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$RegencyUpdateWithWhereUniqueWithoutProvinceInputToJson(
            Input$RegencyUpdateWithWhereUniqueWithoutProvinceInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$RegencyUpsertWithoutSchoolInput
    _$Input$RegencyUpsertWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyUpsertWithoutSchoolInput(
          update: Input$RegencyUncheckedUpdateWithoutSchoolInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$RegencyUncheckedCreateWithoutSchoolInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyUpsertWithoutSchoolInputToJson(
        Input$RegencyUpsertWithoutSchoolInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$RegencyUpsertWithoutUsersInput
    _$Input$RegencyUpsertWithoutUsersInputFromJson(Map<String, dynamic> json) =>
        Input$RegencyUpsertWithoutUsersInput(
          update: Input$RegencyUncheckedUpdateWithoutUsersInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$RegencyUncheckedCreateWithoutUsersInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$RegencyUpsertWithoutUsersInputToJson(
        Input$RegencyUpsertWithoutUsersInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$RegencyUpsertWithWhereUniqueWithoutProvinceInput
    _$Input$RegencyUpsertWithWhereUniqueWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$RegencyUpsertWithWhereUniqueWithoutProvinceInput(
          where: Input$RegencyWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: Input$RegencyUncheckedUpdateWithoutProvinceInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$RegencyUncheckedCreateWithoutProvinceInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$RegencyUpsertWithWhereUniqueWithoutProvinceInputToJson(
            Input$RegencyUpsertWithWhereUniqueWithoutProvinceInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

Input$RegencyWhereInput _$Input$RegencyWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$RegencyWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$RegencyWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$RegencyWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$RegencyWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      provinceId: json['provinceId'] == null
          ? null
          : Input$StringFilter.fromJson(
              json['provinceId'] as Map<String, dynamic>),
      province: json['province'] == null
          ? null
          : Input$ProvinceWhereInput.fromJson(
              json['province'] as Map<String, dynamic>),
      users: json['users'] == null
          ? null
          : Input$UserListRelationFilter.fromJson(
              json['users'] as Map<String, dynamic>),
      School: json['School'] == null
          ? null
          : Input$SchoolListRelationFilter.fromJson(
              json['School'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$RegencyWhereInputToJson(
        Input$RegencyWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'province': instance.province?.toJson(),
      'users': instance.users?.toJson(),
      'School': instance.School?.toJson(),
    };

Input$RegencyWhereUniqueInput _$Input$RegencyWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    Input$RegencyWhereUniqueInput(
      id: json['id'] as String?,
    );

Map<String, dynamic> _$Input$RegencyWhereUniqueInputToJson(
        Input$RegencyWhereUniqueInput instance) =>
    <String, dynamic>{
      'id': instance.id,
    };

Input$SchoolAvgOrderByAggregateInput
    _$Input$SchoolAvgOrderByAggregateInputFromJson(Map<String, dynamic> json) =>
        Input$SchoolAvgOrderByAggregateInput(
          levels: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['levels'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$SchoolAvgOrderByAggregateInputToJson(
        Input$SchoolAvgOrderByAggregateInput instance) =>
    <String, dynamic>{
      'levels': _$Enum$SortOrderEnumMap[instance.levels],
    };

Input$SchoolCountOrderByAggregateInput
    _$Input$SchoolCountOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolCountOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          npsn: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['npsn'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          levels: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['levels'],
              unknownValue: Enum$SortOrder.$unknown),
          type: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['type'],
              unknownValue: Enum$SortOrder.$unknown),
          address: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['address'],
              unknownValue: Enum$SortOrder.$unknown),
          logoPath: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['logoPath'],
              unknownValue: Enum$SortOrder.$unknown),
          bannerPath: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['bannerPath'],
              unknownValue: Enum$SortOrder.$unknown),
          provinceId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['provinceId'],
              unknownValue: Enum$SortOrder.$unknown),
          regencyId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['regencyId'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$SchoolCountOrderByAggregateInputToJson(
        Input$SchoolCountOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'npsn': _$Enum$SortOrderEnumMap[instance.npsn],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      'levels': _$Enum$SortOrderEnumMap[instance.levels],
      'type': _$Enum$SortOrderEnumMap[instance.type],
      'address': _$Enum$SortOrderEnumMap[instance.address],
      'logoPath': _$Enum$SortOrderEnumMap[instance.logoPath],
      'bannerPath': _$Enum$SortOrderEnumMap[instance.bannerPath],
      'provinceId': _$Enum$SortOrderEnumMap[instance.provinceId],
      'regencyId': _$Enum$SortOrderEnumMap[instance.regencyId],
    };

Input$SchoolCreateInput _$Input$SchoolCreateInputFromJson(
        Map<String, dynamic> json) =>
    Input$SchoolCreateInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      npsn: json['npsn'] as String?,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
      classrooms: json['classrooms'] == null
          ? null
          : Input$ClassroomCreateNestedManyWithoutSchoolInput.fromJson(
              json['classrooms'] as Map<String, dynamic>),
      levels:
          (json['levels'] as List<dynamic>?)?.map((e) => e as int?).toList(),
      type: json['type'] as String,
      address: json['address'] as String?,
      logoPath: json['logoPath'] as String?,
      bannerPath: json['bannerPath'] as String?,
      province: Input$ProvinceCreateNestedOneWithoutSchoolInput.fromJson(
          json['province'] as Map<String, dynamic>),
      regency: Input$RegencyCreateNestedOneWithoutSchoolInput.fromJson(
          json['regency'] as Map<String, dynamic>),
      schoolStaffs: json['schoolStaffs'] == null
          ? null
          : Input$SchoolStaffCreateNestedManyWithoutSchoolInput.fromJson(
              json['schoolStaffs'] as Map<String, dynamic>),
      students: json['students'] == null
          ? null
          : Input$UserCreateNestedManyWithoutSchoolInput.fromJson(
              json['students'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$SchoolCreateInputToJson(
        Input$SchoolCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'npsn': instance.npsn,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'classrooms': instance.classrooms?.toJson(),
      'levels': instance.levels,
      'type': instance.type,
      'address': instance.address,
      'logoPath': instance.logoPath,
      'bannerPath': instance.bannerPath,
      'province': instance.province.toJson(),
      'regency': instance.regency.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'students': instance.students?.toJson(),
    };

Input$SchoolCreatelevelsInput _$Input$SchoolCreatelevelsInputFromJson(
        Map<String, dynamic> json) =>
    Input$SchoolCreatelevelsInput(
      $set: json['set'] as int,
    );

Map<String, dynamic> _$Input$SchoolCreatelevelsInputToJson(
        Input$SchoolCreatelevelsInput instance) =>
    <String, dynamic>{
      'set': instance.$set,
    };

Input$SchoolCreateManyInput _$Input$SchoolCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    Input$SchoolCreateManyInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      npsn: json['npsn'] as String?,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
      levels:
          (json['levels'] as List<dynamic>?)?.map((e) => e as int?).toList(),
      type: json['type'] as String,
      address: json['address'] as String?,
      logoPath: json['logoPath'] as String?,
      bannerPath: json['bannerPath'] as String?,
      provinceId: json['provinceId'] as String,
      regencyId: json['regencyId'] as String,
    );

Map<String, dynamic> _$Input$SchoolCreateManyInputToJson(
        Input$SchoolCreateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'npsn': instance.npsn,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'levels': instance.levels,
      'type': instance.type,
      'address': instance.address,
      'logoPath': instance.logoPath,
      'bannerPath': instance.bannerPath,
      'provinceId': instance.provinceId,
      'regencyId': instance.regencyId,
    };

Input$SchoolCreateManyProvinceInput
    _$Input$SchoolCreateManyProvinceInputFromJson(Map<String, dynamic> json) =>
        Input$SchoolCreateManyProvinceInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          npsn: json['npsn'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          levels: (json['levels'] as List<dynamic>?)
              ?.map((e) => e as int?)
              .toList(),
          type: json['type'] as String,
          address: json['address'] as String?,
          logoPath: json['logoPath'] as String?,
          bannerPath: json['bannerPath'] as String?,
          regencyId: json['regencyId'] as String,
        );

Map<String, dynamic> _$Input$SchoolCreateManyProvinceInputToJson(
        Input$SchoolCreateManyProvinceInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'npsn': instance.npsn,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'levels': instance.levels,
      'type': instance.type,
      'address': instance.address,
      'logoPath': instance.logoPath,
      'bannerPath': instance.bannerPath,
      'regencyId': instance.regencyId,
    };

Input$SchoolCreateManyProvinceInputEnvelope
    _$Input$SchoolCreateManyProvinceInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolCreateManyProvinceInputEnvelope(
          data: Input$SchoolCreateManyProvinceInput.fromJson(
              json['data'] as Map<String, dynamic>),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$Input$SchoolCreateManyProvinceInputEnvelopeToJson(
        Input$SchoolCreateManyProvinceInputEnvelope instance) =>
    <String, dynamic>{
      'data': instance.data.toJson(),
      'skipDuplicates': instance.skipDuplicates,
    };

Input$SchoolCreateManyRegencyInput _$Input$SchoolCreateManyRegencyInputFromJson(
        Map<String, dynamic> json) =>
    Input$SchoolCreateManyRegencyInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      npsn: json['npsn'] as String?,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
      levels:
          (json['levels'] as List<dynamic>?)?.map((e) => e as int?).toList(),
      type: json['type'] as String,
      address: json['address'] as String?,
      logoPath: json['logoPath'] as String?,
      bannerPath: json['bannerPath'] as String?,
      provinceId: json['provinceId'] as String,
    );

Map<String, dynamic> _$Input$SchoolCreateManyRegencyInputToJson(
        Input$SchoolCreateManyRegencyInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'npsn': instance.npsn,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'levels': instance.levels,
      'type': instance.type,
      'address': instance.address,
      'logoPath': instance.logoPath,
      'bannerPath': instance.bannerPath,
      'provinceId': instance.provinceId,
    };

Input$SchoolCreateManyRegencyInputEnvelope
    _$Input$SchoolCreateManyRegencyInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolCreateManyRegencyInputEnvelope(
          data: Input$SchoolCreateManyRegencyInput.fromJson(
              json['data'] as Map<String, dynamic>),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$Input$SchoolCreateManyRegencyInputEnvelopeToJson(
        Input$SchoolCreateManyRegencyInputEnvelope instance) =>
    <String, dynamic>{
      'data': instance.data.toJson(),
      'skipDuplicates': instance.skipDuplicates,
    };

Input$SchoolCreateNestedManyWithoutProvinceInput
    _$Input$SchoolCreateNestedManyWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolCreateNestedManyWithoutProvinceInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolCreateWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolCreateOrConnectWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$SchoolCreateManyProvinceInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$SchoolCreateNestedManyWithoutProvinceInputToJson(
        Input$SchoolCreateNestedManyWithoutProvinceInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$SchoolCreateNestedManyWithoutRegencyInput
    _$Input$SchoolCreateNestedManyWithoutRegencyInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolCreateNestedManyWithoutRegencyInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolCreateWithoutRegencyInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolCreateOrConnectWithoutRegencyInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$SchoolCreateManyRegencyInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$SchoolCreateNestedManyWithoutRegencyInputToJson(
        Input$SchoolCreateNestedManyWithoutRegencyInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$SchoolCreateNestedOneWithoutClassroomsInput
    _$Input$SchoolCreateNestedOneWithoutClassroomsInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolCreateNestedOneWithoutClassroomsInput(
          create: json['create'] == null
              ? null
              : Input$SchoolUncheckedCreateWithoutClassroomsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$SchoolCreateOrConnectWithoutClassroomsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$SchoolWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolCreateNestedOneWithoutClassroomsInputToJson(
        Input$SchoolCreateNestedOneWithoutClassroomsInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'connect': instance.connect?.toJson(),
    };

Input$SchoolCreateNestedOneWithoutSchoolStaffsInput
    _$Input$SchoolCreateNestedOneWithoutSchoolStaffsInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolCreateNestedOneWithoutSchoolStaffsInput(
          create: json['create'] == null
              ? null
              : Input$SchoolUncheckedCreateWithoutSchoolStaffsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$SchoolCreateOrConnectWithoutSchoolStaffsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$SchoolWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$SchoolCreateNestedOneWithoutSchoolStaffsInputToJson(
            Input$SchoolCreateNestedOneWithoutSchoolStaffsInput instance) =>
        <String, dynamic>{
          'create': instance.create?.toJson(),
          'connectOrCreate': instance.connectOrCreate?.toJson(),
          'connect': instance.connect?.toJson(),
        };

Input$SchoolCreateNestedOneWithoutStudentsInput
    _$Input$SchoolCreateNestedOneWithoutStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolCreateNestedOneWithoutStudentsInput(
          create: json['create'] == null
              ? null
              : Input$SchoolUncheckedCreateWithoutStudentsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$SchoolCreateOrConnectWithoutStudentsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$SchoolWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolCreateNestedOneWithoutStudentsInputToJson(
        Input$SchoolCreateNestedOneWithoutStudentsInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'connect': instance.connect?.toJson(),
    };

Input$SchoolCreateOrConnectWithoutClassroomsInput
    _$Input$SchoolCreateOrConnectWithoutClassroomsInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolCreateOrConnectWithoutClassroomsInput(
          where: Input$SchoolWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$SchoolUncheckedCreateWithoutClassroomsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolCreateOrConnectWithoutClassroomsInputToJson(
        Input$SchoolCreateOrConnectWithoutClassroomsInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$SchoolCreateOrConnectWithoutProvinceInput
    _$Input$SchoolCreateOrConnectWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolCreateOrConnectWithoutProvinceInput(
          where: Input$SchoolWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$SchoolUncheckedCreateWithoutProvinceInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolCreateOrConnectWithoutProvinceInputToJson(
        Input$SchoolCreateOrConnectWithoutProvinceInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$SchoolCreateOrConnectWithoutRegencyInput
    _$Input$SchoolCreateOrConnectWithoutRegencyInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolCreateOrConnectWithoutRegencyInput(
          where: Input$SchoolWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$SchoolUncheckedCreateWithoutRegencyInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolCreateOrConnectWithoutRegencyInputToJson(
        Input$SchoolCreateOrConnectWithoutRegencyInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$SchoolCreateOrConnectWithoutSchoolStaffsInput
    _$Input$SchoolCreateOrConnectWithoutSchoolStaffsInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolCreateOrConnectWithoutSchoolStaffsInput(
          where: Input$SchoolWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$SchoolUncheckedCreateWithoutSchoolStaffsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$SchoolCreateOrConnectWithoutSchoolStaffsInputToJson(
            Input$SchoolCreateOrConnectWithoutSchoolStaffsInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'create': instance.create.toJson(),
        };

Input$SchoolCreateOrConnectWithoutStudentsInput
    _$Input$SchoolCreateOrConnectWithoutStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolCreateOrConnectWithoutStudentsInput(
          where: Input$SchoolWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$SchoolUncheckedCreateWithoutStudentsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolCreateOrConnectWithoutStudentsInputToJson(
        Input$SchoolCreateOrConnectWithoutStudentsInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$SchoolCreateWithoutClassroomsInput
    _$Input$SchoolCreateWithoutClassroomsInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolCreateWithoutClassroomsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          npsn: json['npsn'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          levels: (json['levels'] as List<dynamic>?)
              ?.map((e) => e as int?)
              .toList(),
          type: json['type'] as String,
          address: json['address'] as String?,
          logoPath: json['logoPath'] as String?,
          bannerPath: json['bannerPath'] as String?,
          province: Input$ProvinceCreateNestedOneWithoutSchoolInput.fromJson(
              json['province'] as Map<String, dynamic>),
          regency: Input$RegencyCreateNestedOneWithoutSchoolInput.fromJson(
              json['regency'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffCreateNestedManyWithoutSchoolInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          students: json['students'] == null
              ? null
              : Input$UserCreateNestedManyWithoutSchoolInput.fromJson(
                  json['students'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolCreateWithoutClassroomsInputToJson(
        Input$SchoolCreateWithoutClassroomsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'npsn': instance.npsn,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'levels': instance.levels,
      'type': instance.type,
      'address': instance.address,
      'logoPath': instance.logoPath,
      'bannerPath': instance.bannerPath,
      'province': instance.province.toJson(),
      'regency': instance.regency.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'students': instance.students?.toJson(),
    };

Input$SchoolCreateWithoutProvinceInput
    _$Input$SchoolCreateWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolCreateWithoutProvinceInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          npsn: json['npsn'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomCreateNestedManyWithoutSchoolInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          levels: (json['levels'] as List<dynamic>?)
              ?.map((e) => e as int?)
              .toList(),
          type: json['type'] as String,
          address: json['address'] as String?,
          logoPath: json['logoPath'] as String?,
          bannerPath: json['bannerPath'] as String?,
          regency: Input$RegencyCreateNestedOneWithoutSchoolInput.fromJson(
              json['regency'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffCreateNestedManyWithoutSchoolInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          students: json['students'] == null
              ? null
              : Input$UserCreateNestedManyWithoutSchoolInput.fromJson(
                  json['students'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolCreateWithoutProvinceInputToJson(
        Input$SchoolCreateWithoutProvinceInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'npsn': instance.npsn,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'classrooms': instance.classrooms?.toJson(),
      'levels': instance.levels,
      'type': instance.type,
      'address': instance.address,
      'logoPath': instance.logoPath,
      'bannerPath': instance.bannerPath,
      'regency': instance.regency.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'students': instance.students?.toJson(),
    };

Input$SchoolCreateWithoutRegencyInput
    _$Input$SchoolCreateWithoutRegencyInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolCreateWithoutRegencyInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          npsn: json['npsn'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomCreateNestedManyWithoutSchoolInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          levels: (json['levels'] as List<dynamic>?)
              ?.map((e) => e as int?)
              .toList(),
          type: json['type'] as String,
          address: json['address'] as String?,
          logoPath: json['logoPath'] as String?,
          bannerPath: json['bannerPath'] as String?,
          province: Input$ProvinceCreateNestedOneWithoutSchoolInput.fromJson(
              json['province'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffCreateNestedManyWithoutSchoolInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          students: json['students'] == null
              ? null
              : Input$UserCreateNestedManyWithoutSchoolInput.fromJson(
                  json['students'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolCreateWithoutRegencyInputToJson(
        Input$SchoolCreateWithoutRegencyInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'npsn': instance.npsn,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'classrooms': instance.classrooms?.toJson(),
      'levels': instance.levels,
      'type': instance.type,
      'address': instance.address,
      'logoPath': instance.logoPath,
      'bannerPath': instance.bannerPath,
      'province': instance.province.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'students': instance.students?.toJson(),
    };

Input$SchoolCreateWithoutSchoolStaffsInput
    _$Input$SchoolCreateWithoutSchoolStaffsInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolCreateWithoutSchoolStaffsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          npsn: json['npsn'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomCreateNestedManyWithoutSchoolInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          levels: (json['levels'] as List<dynamic>?)
              ?.map((e) => e as int?)
              .toList(),
          type: json['type'] as String,
          address: json['address'] as String?,
          logoPath: json['logoPath'] as String?,
          bannerPath: json['bannerPath'] as String?,
          province: Input$ProvinceCreateNestedOneWithoutSchoolInput.fromJson(
              json['province'] as Map<String, dynamic>),
          regency: Input$RegencyCreateNestedOneWithoutSchoolInput.fromJson(
              json['regency'] as Map<String, dynamic>),
          students: json['students'] == null
              ? null
              : Input$UserCreateNestedManyWithoutSchoolInput.fromJson(
                  json['students'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolCreateWithoutSchoolStaffsInputToJson(
        Input$SchoolCreateWithoutSchoolStaffsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'npsn': instance.npsn,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'classrooms': instance.classrooms?.toJson(),
      'levels': instance.levels,
      'type': instance.type,
      'address': instance.address,
      'logoPath': instance.logoPath,
      'bannerPath': instance.bannerPath,
      'province': instance.province.toJson(),
      'regency': instance.regency.toJson(),
      'students': instance.students?.toJson(),
    };

Input$SchoolCreateWithoutStudentsInput
    _$Input$SchoolCreateWithoutStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolCreateWithoutStudentsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          npsn: json['npsn'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomCreateNestedManyWithoutSchoolInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          levels: (json['levels'] as List<dynamic>?)
              ?.map((e) => e as int?)
              .toList(),
          type: json['type'] as String,
          address: json['address'] as String?,
          logoPath: json['logoPath'] as String?,
          bannerPath: json['bannerPath'] as String?,
          province: Input$ProvinceCreateNestedOneWithoutSchoolInput.fromJson(
              json['province'] as Map<String, dynamic>),
          regency: Input$RegencyCreateNestedOneWithoutSchoolInput.fromJson(
              json['regency'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffCreateNestedManyWithoutSchoolInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolCreateWithoutStudentsInputToJson(
        Input$SchoolCreateWithoutStudentsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'npsn': instance.npsn,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'classrooms': instance.classrooms?.toJson(),
      'levels': instance.levels,
      'type': instance.type,
      'address': instance.address,
      'logoPath': instance.logoPath,
      'bannerPath': instance.bannerPath,
      'province': instance.province.toJson(),
      'regency': instance.regency.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
    };

Input$SchoolListRelationFilter _$Input$SchoolListRelationFilterFromJson(
        Map<String, dynamic> json) =>
    Input$SchoolListRelationFilter(
      every: json['every'] == null
          ? null
          : Input$SchoolWhereInput.fromJson(
              json['every'] as Map<String, dynamic>),
      some: json['some'] == null
          ? null
          : Input$SchoolWhereInput.fromJson(
              json['some'] as Map<String, dynamic>),
      none: json['none'] == null
          ? null
          : Input$SchoolWhereInput.fromJson(
              json['none'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$SchoolListRelationFilterToJson(
        Input$SchoolListRelationFilter instance) =>
    <String, dynamic>{
      'every': instance.every?.toJson(),
      'some': instance.some?.toJson(),
      'none': instance.none?.toJson(),
    };

Input$SchoolMaxOrderByAggregateInput
    _$Input$SchoolMaxOrderByAggregateInputFromJson(Map<String, dynamic> json) =>
        Input$SchoolMaxOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          npsn: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['npsn'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          type: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['type'],
              unknownValue: Enum$SortOrder.$unknown),
          address: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['address'],
              unknownValue: Enum$SortOrder.$unknown),
          logoPath: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['logoPath'],
              unknownValue: Enum$SortOrder.$unknown),
          bannerPath: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['bannerPath'],
              unknownValue: Enum$SortOrder.$unknown),
          provinceId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['provinceId'],
              unknownValue: Enum$SortOrder.$unknown),
          regencyId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['regencyId'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$SchoolMaxOrderByAggregateInputToJson(
        Input$SchoolMaxOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'npsn': _$Enum$SortOrderEnumMap[instance.npsn],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      'type': _$Enum$SortOrderEnumMap[instance.type],
      'address': _$Enum$SortOrderEnumMap[instance.address],
      'logoPath': _$Enum$SortOrderEnumMap[instance.logoPath],
      'bannerPath': _$Enum$SortOrderEnumMap[instance.bannerPath],
      'provinceId': _$Enum$SortOrderEnumMap[instance.provinceId],
      'regencyId': _$Enum$SortOrderEnumMap[instance.regencyId],
    };

Input$SchoolMinOrderByAggregateInput
    _$Input$SchoolMinOrderByAggregateInputFromJson(Map<String, dynamic> json) =>
        Input$SchoolMinOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          npsn: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['npsn'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          type: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['type'],
              unknownValue: Enum$SortOrder.$unknown),
          address: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['address'],
              unknownValue: Enum$SortOrder.$unknown),
          logoPath: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['logoPath'],
              unknownValue: Enum$SortOrder.$unknown),
          bannerPath: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['bannerPath'],
              unknownValue: Enum$SortOrder.$unknown),
          provinceId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['provinceId'],
              unknownValue: Enum$SortOrder.$unknown),
          regencyId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['regencyId'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$SchoolMinOrderByAggregateInputToJson(
        Input$SchoolMinOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'npsn': _$Enum$SortOrderEnumMap[instance.npsn],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      'type': _$Enum$SortOrderEnumMap[instance.type],
      'address': _$Enum$SortOrderEnumMap[instance.address],
      'logoPath': _$Enum$SortOrderEnumMap[instance.logoPath],
      'bannerPath': _$Enum$SortOrderEnumMap[instance.bannerPath],
      'provinceId': _$Enum$SortOrderEnumMap[instance.provinceId],
      'regencyId': _$Enum$SortOrderEnumMap[instance.regencyId],
    };

Input$SchoolOrderByRelationAggregateInput
    _$Input$SchoolOrderByRelationAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolOrderByRelationAggregateInput(
          $_count: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['_count'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$SchoolOrderByRelationAggregateInputToJson(
        Input$SchoolOrderByRelationAggregateInput instance) =>
    <String, dynamic>{
      '_count': _$Enum$SortOrderEnumMap[instance.$_count],
    };

Input$SchoolOrderByWithAggregationInput
    _$Input$SchoolOrderByWithAggregationInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolOrderByWithAggregationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          npsn: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['npsn'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          levels: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['levels'],
              unknownValue: Enum$SortOrder.$unknown),
          type: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['type'],
              unknownValue: Enum$SortOrder.$unknown),
          address: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['address'],
              unknownValue: Enum$SortOrder.$unknown),
          logoPath: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['logoPath'],
              unknownValue: Enum$SortOrder.$unknown),
          bannerPath: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['bannerPath'],
              unknownValue: Enum$SortOrder.$unknown),
          provinceId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['provinceId'],
              unknownValue: Enum$SortOrder.$unknown),
          regencyId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['regencyId'],
              unknownValue: Enum$SortOrder.$unknown),
          $_count: json['_count'] == null
              ? null
              : Input$SchoolCountOrderByAggregateInput.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_avg: json['_avg'] == null
              ? null
              : Input$SchoolAvgOrderByAggregateInput.fromJson(
                  json['_avg'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$SchoolMaxOrderByAggregateInput.fromJson(
                  json['_max'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$SchoolMinOrderByAggregateInput.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_sum: json['_sum'] == null
              ? null
              : Input$SchoolSumOrderByAggregateInput.fromJson(
                  json['_sum'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolOrderByWithAggregationInputToJson(
        Input$SchoolOrderByWithAggregationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'npsn': _$Enum$SortOrderEnumMap[instance.npsn],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      'levels': _$Enum$SortOrderEnumMap[instance.levels],
      'type': _$Enum$SortOrderEnumMap[instance.type],
      'address': _$Enum$SortOrderEnumMap[instance.address],
      'logoPath': _$Enum$SortOrderEnumMap[instance.logoPath],
      'bannerPath': _$Enum$SortOrderEnumMap[instance.bannerPath],
      'provinceId': _$Enum$SortOrderEnumMap[instance.provinceId],
      'regencyId': _$Enum$SortOrderEnumMap[instance.regencyId],
      '_count': instance.$_count?.toJson(),
      '_avg': instance.$_avg?.toJson(),
      '_max': instance.$_max?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_sum': instance.$_sum?.toJson(),
    };

Input$SchoolOrderByWithRelationInput
    _$Input$SchoolOrderByWithRelationInputFromJson(Map<String, dynamic> json) =>
        Input$SchoolOrderByWithRelationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          npsn: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['npsn'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomOrderByRelationAggregateInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          levels: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['levels'],
              unknownValue: Enum$SortOrder.$unknown),
          type: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['type'],
              unknownValue: Enum$SortOrder.$unknown),
          address: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['address'],
              unknownValue: Enum$SortOrder.$unknown),
          logoPath: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['logoPath'],
              unknownValue: Enum$SortOrder.$unknown),
          bannerPath: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['bannerPath'],
              unknownValue: Enum$SortOrder.$unknown),
          provinceId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['provinceId'],
              unknownValue: Enum$SortOrder.$unknown),
          province: json['province'] == null
              ? null
              : Input$ProvinceOrderByWithRelationInput.fromJson(
                  json['province'] as Map<String, dynamic>),
          regencyId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['regencyId'],
              unknownValue: Enum$SortOrder.$unknown),
          regency: json['regency'] == null
              ? null
              : Input$RegencyOrderByWithRelationInput.fromJson(
                  json['regency'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffOrderByRelationAggregateInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          students: json['students'] == null
              ? null
              : Input$UserOrderByRelationAggregateInput.fromJson(
                  json['students'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolOrderByWithRelationInputToJson(
        Input$SchoolOrderByWithRelationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'npsn': _$Enum$SortOrderEnumMap[instance.npsn],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      'classrooms': instance.classrooms?.toJson(),
      'levels': _$Enum$SortOrderEnumMap[instance.levels],
      'type': _$Enum$SortOrderEnumMap[instance.type],
      'address': _$Enum$SortOrderEnumMap[instance.address],
      'logoPath': _$Enum$SortOrderEnumMap[instance.logoPath],
      'bannerPath': _$Enum$SortOrderEnumMap[instance.bannerPath],
      'provinceId': _$Enum$SortOrderEnumMap[instance.provinceId],
      'province': instance.province?.toJson(),
      'regencyId': _$Enum$SortOrderEnumMap[instance.regencyId],
      'regency': instance.regency?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'students': instance.students?.toJson(),
    };

Input$SchoolRelationFilter _$Input$SchoolRelationFilterFromJson(
        Map<String, dynamic> json) =>
    Input$SchoolRelationFilter(
      $is: json['is'] == null
          ? null
          : Input$SchoolWhereInput.fromJson(json['is'] as Map<String, dynamic>),
      isNot: json['isNot'] == null
          ? null
          : Input$SchoolWhereInput.fromJson(
              json['isNot'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$SchoolRelationFilterToJson(
        Input$SchoolRelationFilter instance) =>
    <String, dynamic>{
      'is': instance.$is?.toJson(),
      'isNot': instance.isNot?.toJson(),
    };

Input$SchoolScalarWhereInput _$Input$SchoolScalarWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$SchoolScalarWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$SchoolScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$SchoolScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$SchoolScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      npsn: json['npsn'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['npsn'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      levels: json['levels'] == null
          ? null
          : Input$IntNullableListFilter.fromJson(
              json['levels'] as Map<String, dynamic>),
      type: json['type'] == null
          ? null
          : Input$StringFilter.fromJson(json['type'] as Map<String, dynamic>),
      address: json['address'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['address'] as Map<String, dynamic>),
      logoPath: json['logoPath'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['logoPath'] as Map<String, dynamic>),
      bannerPath: json['bannerPath'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['bannerPath'] as Map<String, dynamic>),
      provinceId: json['provinceId'] == null
          ? null
          : Input$StringFilter.fromJson(
              json['provinceId'] as Map<String, dynamic>),
      regencyId: json['regencyId'] == null
          ? null
          : Input$StringFilter.fromJson(
              json['regencyId'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$SchoolScalarWhereInputToJson(
        Input$SchoolScalarWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'npsn': instance.npsn?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'levels': instance.levels?.toJson(),
      'type': instance.type?.toJson(),
      'address': instance.address?.toJson(),
      'logoPath': instance.logoPath?.toJson(),
      'bannerPath': instance.bannerPath?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
    };

Input$SchoolScalarWhereWithAggregatesInput
    _$Input$SchoolScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          OR: (json['OR'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          NOT: (json['NOT'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          id: json['id'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['name'] as Map<String, dynamic>),
          npsn: json['npsn'] == null
              ? null
              : Input$StringNullableWithAggregatesFilter.fromJson(
                  json['npsn'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          levels: json['levels'] == null
              ? null
              : Input$IntNullableListFilter.fromJson(
                  json['levels'] as Map<String, dynamic>),
          type: json['type'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['type'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$StringNullableWithAggregatesFilter.fromJson(
                  json['address'] as Map<String, dynamic>),
          logoPath: json['logoPath'] == null
              ? null
              : Input$StringNullableWithAggregatesFilter.fromJson(
                  json['logoPath'] as Map<String, dynamic>),
          bannerPath: json['bannerPath'] == null
              ? null
              : Input$StringNullableWithAggregatesFilter.fromJson(
                  json['bannerPath'] as Map<String, dynamic>),
          provinceId: json['provinceId'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['provinceId'] as Map<String, dynamic>),
          regencyId: json['regencyId'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['regencyId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolScalarWhereWithAggregatesInputToJson(
        Input$SchoolScalarWhereWithAggregatesInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'npsn': instance.npsn?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'levels': instance.levels?.toJson(),
      'type': instance.type?.toJson(),
      'address': instance.address?.toJson(),
      'logoPath': instance.logoPath?.toJson(),
      'bannerPath': instance.bannerPath?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
    };

Input$SchoolStaffCountOrderByAggregateInput
    _$Input$SchoolStaffCountOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffCountOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          schoolId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['schoolId'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          roles: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['roles'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$SchoolStaffCountOrderByAggregateInputToJson(
        Input$SchoolStaffCountOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'schoolId': _$Enum$SortOrderEnumMap[instance.schoolId],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'roles': _$Enum$SortOrderEnumMap[instance.roles],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$SchoolStaffCreateInput _$Input$SchoolStaffCreateInputFromJson(
        Map<String, dynamic> json) =>
    Input$SchoolStaffCreateInput(
      id: json['id'] as String?,
      school: Input$SchoolCreateNestedOneWithoutSchoolStaffsInput.fromJson(
          json['school'] as Map<String, dynamic>),
      user: Input$UserCreateNestedOneWithoutSchoolStaffsInput.fromJson(
          json['user'] as Map<String, dynamic>),
      roles: (json['roles'] as List<dynamic>?)
          ?.map((e) => $enumDecodeNullable(_$Enum$SchoolStaffRolesEnumMap, e,
              unknownValue: Enum$SchoolStaffRoles.$unknown))
          .toList(),
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
    );

Map<String, dynamic> _$Input$SchoolStaffCreateInputToJson(
        Input$SchoolStaffCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'school': instance.school.toJson(),
      'user': instance.user.toJson(),
      'roles': instance.roles
          ?.map((e) => _$Enum$SchoolStaffRolesEnumMap[e])
          .toList(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$SchoolStaffCreateManyInput _$Input$SchoolStaffCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    Input$SchoolStaffCreateManyInput(
      id: json['id'] as String?,
      schoolId: json['schoolId'] as String,
      userId: json['userId'] as String,
      roles: (json['roles'] as List<dynamic>?)
          ?.map((e) => $enumDecodeNullable(_$Enum$SchoolStaffRolesEnumMap, e,
              unknownValue: Enum$SchoolStaffRoles.$unknown))
          .toList(),
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
    );

Map<String, dynamic> _$Input$SchoolStaffCreateManyInputToJson(
        Input$SchoolStaffCreateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'schoolId': instance.schoolId,
      'userId': instance.userId,
      'roles': instance.roles
          ?.map((e) => _$Enum$SchoolStaffRolesEnumMap[e])
          .toList(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$SchoolStaffCreateManySchoolInput
    _$Input$SchoolStaffCreateManySchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffCreateManySchoolInput(
          id: json['id'] as String?,
          userId: json['userId'] as String,
          roles: (json['roles'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$SchoolStaffRolesEnumMap, e,
                  unknownValue: Enum$SchoolStaffRoles.$unknown))
              .toList(),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$SchoolStaffCreateManySchoolInputToJson(
        Input$SchoolStaffCreateManySchoolInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'userId': instance.userId,
      'roles': instance.roles
          ?.map((e) => _$Enum$SchoolStaffRolesEnumMap[e])
          .toList(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$SchoolStaffCreateManySchoolInputEnvelope
    _$Input$SchoolStaffCreateManySchoolInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffCreateManySchoolInputEnvelope(
          data: Input$SchoolStaffCreateManySchoolInput.fromJson(
              json['data'] as Map<String, dynamic>),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$Input$SchoolStaffCreateManySchoolInputEnvelopeToJson(
        Input$SchoolStaffCreateManySchoolInputEnvelope instance) =>
    <String, dynamic>{
      'data': instance.data.toJson(),
      'skipDuplicates': instance.skipDuplicates,
    };

Input$SchoolStaffCreateManyUserInput
    _$Input$SchoolStaffCreateManyUserInputFromJson(Map<String, dynamic> json) =>
        Input$SchoolStaffCreateManyUserInput(
          id: json['id'] as String?,
          schoolId: json['schoolId'] as String,
          roles: (json['roles'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$SchoolStaffRolesEnumMap, e,
                  unknownValue: Enum$SchoolStaffRoles.$unknown))
              .toList(),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$SchoolStaffCreateManyUserInputToJson(
        Input$SchoolStaffCreateManyUserInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'schoolId': instance.schoolId,
      'roles': instance.roles
          ?.map((e) => _$Enum$SchoolStaffRolesEnumMap[e])
          .toList(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$SchoolStaffCreateManyUserInputEnvelope
    _$Input$SchoolStaffCreateManyUserInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffCreateManyUserInputEnvelope(
          data: Input$SchoolStaffCreateManyUserInput.fromJson(
              json['data'] as Map<String, dynamic>),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$Input$SchoolStaffCreateManyUserInputEnvelopeToJson(
        Input$SchoolStaffCreateManyUserInputEnvelope instance) =>
    <String, dynamic>{
      'data': instance.data.toJson(),
      'skipDuplicates': instance.skipDuplicates,
    };

Input$SchoolStaffCreateNestedManyWithoutSchoolInput
    _$Input$SchoolStaffCreateNestedManyWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffCreateNestedManyWithoutSchoolInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffCreateWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffCreateOrConnectWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$SchoolStaffCreateManySchoolInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$SchoolStaffCreateNestedManyWithoutSchoolInputToJson(
            Input$SchoolStaffCreateNestedManyWithoutSchoolInput instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
        };

Input$SchoolStaffCreateNestedManyWithoutUserInput
    _$Input$SchoolStaffCreateNestedManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffCreateNestedManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$SchoolStaffCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$SchoolStaffCreateNestedManyWithoutUserInputToJson(
        Input$SchoolStaffCreateNestedManyWithoutUserInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$SchoolStaffCreateOrConnectWithoutSchoolInput
    _$Input$SchoolStaffCreateOrConnectWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffCreateOrConnectWithoutSchoolInput(
          where: Input$SchoolStaffWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$SchoolStaffUncheckedCreateWithoutSchoolInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolStaffCreateOrConnectWithoutSchoolInputToJson(
        Input$SchoolStaffCreateOrConnectWithoutSchoolInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$SchoolStaffCreateOrConnectWithoutUserInput
    _$Input$SchoolStaffCreateOrConnectWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffCreateOrConnectWithoutUserInput(
          where: Input$SchoolStaffWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$SchoolStaffUncheckedCreateWithoutUserInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolStaffCreateOrConnectWithoutUserInputToJson(
        Input$SchoolStaffCreateOrConnectWithoutUserInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$SchoolStaffCreaterolesInput _$Input$SchoolStaffCreaterolesInputFromJson(
        Map<String, dynamic> json) =>
    Input$SchoolStaffCreaterolesInput(
      $set: $enumDecode(_$Enum$SchoolStaffRolesEnumMap, json['set'],
          unknownValue: Enum$SchoolStaffRoles.$unknown),
    );

Map<String, dynamic> _$Input$SchoolStaffCreaterolesInputToJson(
        Input$SchoolStaffCreaterolesInput instance) =>
    <String, dynamic>{
      'set': _$Enum$SchoolStaffRolesEnumMap[instance.$set],
    };

Input$SchoolStaffCreateWithoutSchoolInput
    _$Input$SchoolStaffCreateWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffCreateWithoutSchoolInput(
          id: json['id'] as String?,
          user: Input$UserCreateNestedOneWithoutSchoolStaffsInput.fromJson(
              json['user'] as Map<String, dynamic>),
          roles: (json['roles'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$SchoolStaffRolesEnumMap, e,
                  unknownValue: Enum$SchoolStaffRoles.$unknown))
              .toList(),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$SchoolStaffCreateWithoutSchoolInputToJson(
        Input$SchoolStaffCreateWithoutSchoolInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'user': instance.user.toJson(),
      'roles': instance.roles
          ?.map((e) => _$Enum$SchoolStaffRolesEnumMap[e])
          .toList(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$SchoolStaffCreateWithoutUserInput
    _$Input$SchoolStaffCreateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffCreateWithoutUserInput(
          id: json['id'] as String?,
          school: Input$SchoolCreateNestedOneWithoutSchoolStaffsInput.fromJson(
              json['school'] as Map<String, dynamic>),
          roles: (json['roles'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$SchoolStaffRolesEnumMap, e,
                  unknownValue: Enum$SchoolStaffRoles.$unknown))
              .toList(),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$SchoolStaffCreateWithoutUserInputToJson(
        Input$SchoolStaffCreateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'school': instance.school.toJson(),
      'roles': instance.roles
          ?.map((e) => _$Enum$SchoolStaffRolesEnumMap[e])
          .toList(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$SchoolStaffListRelationFilter
    _$Input$SchoolStaffListRelationFilterFromJson(Map<String, dynamic> json) =>
        Input$SchoolStaffListRelationFilter(
          every: json['every'] == null
              ? null
              : Input$SchoolStaffWhereInput.fromJson(
                  json['every'] as Map<String, dynamic>),
          some: json['some'] == null
              ? null
              : Input$SchoolStaffWhereInput.fromJson(
                  json['some'] as Map<String, dynamic>),
          none: json['none'] == null
              ? null
              : Input$SchoolStaffWhereInput.fromJson(
                  json['none'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolStaffListRelationFilterToJson(
        Input$SchoolStaffListRelationFilter instance) =>
    <String, dynamic>{
      'every': instance.every?.toJson(),
      'some': instance.some?.toJson(),
      'none': instance.none?.toJson(),
    };

Input$SchoolStaffMaxOrderByAggregateInput
    _$Input$SchoolStaffMaxOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffMaxOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          schoolId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['schoolId'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$SchoolStaffMaxOrderByAggregateInputToJson(
        Input$SchoolStaffMaxOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'schoolId': _$Enum$SortOrderEnumMap[instance.schoolId],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$SchoolStaffMinOrderByAggregateInput
    _$Input$SchoolStaffMinOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffMinOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          schoolId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['schoolId'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$SchoolStaffMinOrderByAggregateInputToJson(
        Input$SchoolStaffMinOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'schoolId': _$Enum$SortOrderEnumMap[instance.schoolId],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$SchoolStaffOrderByRelationAggregateInput
    _$Input$SchoolStaffOrderByRelationAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffOrderByRelationAggregateInput(
          $_count: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['_count'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$SchoolStaffOrderByRelationAggregateInputToJson(
        Input$SchoolStaffOrderByRelationAggregateInput instance) =>
    <String, dynamic>{
      '_count': _$Enum$SortOrderEnumMap[instance.$_count],
    };

Input$SchoolStaffOrderByWithAggregationInput
    _$Input$SchoolStaffOrderByWithAggregationInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffOrderByWithAggregationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          schoolId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['schoolId'],
              unknownValue: Enum$SortOrder.$unknown),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          roles: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['roles'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          $_count: json['_count'] == null
              ? null
              : Input$SchoolStaffCountOrderByAggregateInput.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$SchoolStaffMaxOrderByAggregateInput.fromJson(
                  json['_max'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$SchoolStaffMinOrderByAggregateInput.fromJson(
                  json['_min'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolStaffOrderByWithAggregationInputToJson(
        Input$SchoolStaffOrderByWithAggregationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'schoolId': _$Enum$SortOrderEnumMap[instance.schoolId],
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'roles': _$Enum$SortOrderEnumMap[instance.roles],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      '_count': instance.$_count?.toJson(),
      '_max': instance.$_max?.toJson(),
      '_min': instance.$_min?.toJson(),
    };

Input$SchoolStaffOrderByWithRelationInput
    _$Input$SchoolStaffOrderByWithRelationInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffOrderByWithRelationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          schoolId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['schoolId'],
              unknownValue: Enum$SortOrder.$unknown),
          school: json['school'] == null
              ? null
              : Input$SchoolOrderByWithRelationInput.fromJson(
                  json['school'] as Map<String, dynamic>),
          userId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['userId'],
              unknownValue: Enum$SortOrder.$unknown),
          user: json['user'] == null
              ? null
              : Input$UserOrderByWithRelationInput.fromJson(
                  json['user'] as Map<String, dynamic>),
          roles: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['roles'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$SchoolStaffOrderByWithRelationInputToJson(
        Input$SchoolStaffOrderByWithRelationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'schoolId': _$Enum$SortOrderEnumMap[instance.schoolId],
      'school': instance.school?.toJson(),
      'userId': _$Enum$SortOrderEnumMap[instance.userId],
      'user': instance.user?.toJson(),
      'roles': _$Enum$SortOrderEnumMap[instance.roles],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
    };

Input$SchoolStaffScalarWhereInput _$Input$SchoolStaffScalarWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$SchoolStaffScalarWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$SchoolStaffScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$SchoolStaffScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$SchoolStaffScalarWhereInput.fromJson(
                  e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      schoolId: json['schoolId'] == null
          ? null
          : Input$StringFilter.fromJson(
              json['schoolId'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : Input$StringFilter.fromJson(json['userId'] as Map<String, dynamic>),
      roles: json['roles'] == null
          ? null
          : Input$EnumSchoolStaffRolesNullableListFilter.fromJson(
              json['roles'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$SchoolStaffScalarWhereInputToJson(
        Input$SchoolStaffScalarWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
      'userId': instance.userId?.toJson(),
      'roles': instance.roles?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$SchoolStaffScalarWhereWithAggregatesInput
    _$Input$SchoolStaffScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          OR: (json['OR'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          NOT: (json['NOT'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          id: json['id'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['id'] as Map<String, dynamic>),
          schoolId: json['schoolId'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['schoolId'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['userId'] as Map<String, dynamic>),
          roles: json['roles'] == null
              ? null
              : Input$EnumSchoolStaffRolesNullableListFilter.fromJson(
                  json['roles'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolStaffScalarWhereWithAggregatesInputToJson(
        Input$SchoolStaffScalarWhereWithAggregatesInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
      'userId': instance.userId?.toJson(),
      'roles': instance.roles?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$SchoolStaffUncheckedCreateInput
    _$Input$SchoolStaffUncheckedCreateInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffUncheckedCreateInput(
          id: json['id'] as String?,
          schoolId: json['schoolId'] as String,
          userId: json['userId'] as String,
          roles: (json['roles'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$SchoolStaffRolesEnumMap, e,
                  unknownValue: Enum$SchoolStaffRoles.$unknown))
              .toList(),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$SchoolStaffUncheckedCreateInputToJson(
        Input$SchoolStaffUncheckedCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'schoolId': instance.schoolId,
      'userId': instance.userId,
      'roles': instance.roles
          ?.map((e) => _$Enum$SchoolStaffRolesEnumMap[e])
          .toList(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$SchoolStaffUncheckedCreateNestedManyWithoutSchoolInput
    _$Input$SchoolStaffUncheckedCreateNestedManyWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffUncheckedCreateNestedManyWithoutSchoolInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffCreateWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffCreateOrConnectWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$SchoolStaffCreateManySchoolInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$SchoolStaffUncheckedCreateNestedManyWithoutSchoolInputToJson(
            Input$SchoolStaffUncheckedCreateNestedManyWithoutSchoolInput
                instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
        };

Input$SchoolStaffUncheckedCreateNestedManyWithoutUserInput
    _$Input$SchoolStaffUncheckedCreateNestedManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffUncheckedCreateNestedManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$SchoolStaffCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String,
    dynamic> _$Input$SchoolStaffUncheckedCreateNestedManyWithoutUserInputToJson(
        Input$SchoolStaffUncheckedCreateNestedManyWithoutUserInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$SchoolStaffUncheckedCreateWithoutSchoolInput
    _$Input$SchoolStaffUncheckedCreateWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffUncheckedCreateWithoutSchoolInput(
          id: json['id'] as String?,
          userId: json['userId'] as String,
          roles: (json['roles'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$SchoolStaffRolesEnumMap, e,
                  unknownValue: Enum$SchoolStaffRoles.$unknown))
              .toList(),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$SchoolStaffUncheckedCreateWithoutSchoolInputToJson(
        Input$SchoolStaffUncheckedCreateWithoutSchoolInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'userId': instance.userId,
      'roles': instance.roles
          ?.map((e) => _$Enum$SchoolStaffRolesEnumMap[e])
          .toList(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$SchoolStaffUncheckedCreateWithoutUserInput
    _$Input$SchoolStaffUncheckedCreateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffUncheckedCreateWithoutUserInput(
          id: json['id'] as String?,
          schoolId: json['schoolId'] as String,
          roles: (json['roles'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$SchoolStaffRolesEnumMap, e,
                  unknownValue: Enum$SchoolStaffRoles.$unknown))
              .toList(),
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
        );

Map<String, dynamic> _$Input$SchoolStaffUncheckedCreateWithoutUserInputToJson(
        Input$SchoolStaffUncheckedCreateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'schoolId': instance.schoolId,
      'roles': instance.roles
          ?.map((e) => _$Enum$SchoolStaffRolesEnumMap[e])
          .toList(),
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
    };

Input$SchoolStaffUncheckedUpdateInput
    _$Input$SchoolStaffUncheckedUpdateInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffUncheckedUpdateInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          schoolId: json['schoolId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['schoolId'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          roles: (json['roles'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$SchoolStaffRolesEnumMap, e,
                  unknownValue: Enum$SchoolStaffRoles.$unknown))
              .toList(),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolStaffUncheckedUpdateInputToJson(
        Input$SchoolStaffUncheckedUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
      'userId': instance.userId?.toJson(),
      'roles': instance.roles
          ?.map((e) => _$Enum$SchoolStaffRolesEnumMap[e])
          .toList(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$SchoolStaffUncheckedUpdateManyInput
    _$Input$SchoolStaffUncheckedUpdateManyInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffUncheckedUpdateManyInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          schoolId: json['schoolId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['schoolId'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          roles: (json['roles'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$SchoolStaffRolesEnumMap, e,
                  unknownValue: Enum$SchoolStaffRoles.$unknown))
              .toList(),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolStaffUncheckedUpdateManyInputToJson(
        Input$SchoolStaffUncheckedUpdateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
      'userId': instance.userId?.toJson(),
      'roles': instance.roles
          ?.map((e) => _$Enum$SchoolStaffRolesEnumMap[e])
          .toList(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$SchoolStaffUncheckedUpdateManyWithoutSchoolInput
    _$Input$SchoolStaffUncheckedUpdateManyWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffUncheckedUpdateManyWithoutSchoolInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffCreateWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffCreateOrConnectWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffUpsertWithWhereUniqueWithoutSchoolInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$SchoolStaffCreateManySchoolInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffUpdateWithWhereUniqueWithoutSchoolInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffUpdateManyWithWhereWithoutSchoolInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$SchoolStaffUncheckedUpdateManyWithoutSchoolInputToJson(
            Input$SchoolStaffUncheckedUpdateManyWithoutSchoolInput instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'set': instance.$set?.map((e) => e?.toJson()).toList(),
          'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
          'delete': instance.delete?.map((e) => e?.toJson()).toList(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
          'update': instance.update?.map((e) => e?.toJson()).toList(),
          'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
          'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
        };

Input$SchoolStaffUncheckedUpdateManyWithoutSchoolStaffsInput
    _$Input$SchoolStaffUncheckedUpdateManyWithoutSchoolStaffsInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffUncheckedUpdateManyWithoutSchoolStaffsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          schoolId: json['schoolId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['schoolId'] as Map<String, dynamic>),
          roles: (json['roles'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$SchoolStaffRolesEnumMap, e,
                  unknownValue: Enum$SchoolStaffRoles.$unknown))
              .toList(),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$SchoolStaffUncheckedUpdateManyWithoutSchoolStaffsInputToJson(
            Input$SchoolStaffUncheckedUpdateManyWithoutSchoolStaffsInput
                instance) =>
        <String, dynamic>{
          'id': instance.id?.toJson(),
          'schoolId': instance.schoolId?.toJson(),
          'roles': instance.roles
              ?.map((e) => _$Enum$SchoolStaffRolesEnumMap[e])
              .toList(),
          'createdAt': instance.createdAt?.toJson(),
          'updatedAt': instance.updatedAt?.toJson(),
        };

Input$SchoolStaffUncheckedUpdateManyWithoutUserInput
    _$Input$SchoolStaffUncheckedUpdateManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffUncheckedUpdateManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffUpsertWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$SchoolStaffCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffUpdateWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffUpdateManyWithWhereWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$SchoolStaffUncheckedUpdateManyWithoutUserInputToJson(
            Input$SchoolStaffUncheckedUpdateManyWithoutUserInput instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'set': instance.$set?.map((e) => e?.toJson()).toList(),
          'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
          'delete': instance.delete?.map((e) => e?.toJson()).toList(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
          'update': instance.update?.map((e) => e?.toJson()).toList(),
          'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
          'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
        };

Input$SchoolStaffUncheckedUpdateWithoutSchoolInput
    _$Input$SchoolStaffUncheckedUpdateWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffUncheckedUpdateWithoutSchoolInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          roles: (json['roles'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$SchoolStaffRolesEnumMap, e,
                  unknownValue: Enum$SchoolStaffRoles.$unknown))
              .toList(),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolStaffUncheckedUpdateWithoutSchoolInputToJson(
        Input$SchoolStaffUncheckedUpdateWithoutSchoolInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'userId': instance.userId?.toJson(),
      'roles': instance.roles
          ?.map((e) => _$Enum$SchoolStaffRolesEnumMap[e])
          .toList(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$SchoolStaffUncheckedUpdateWithoutUserInput
    _$Input$SchoolStaffUncheckedUpdateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffUncheckedUpdateWithoutUserInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          schoolId: json['schoolId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['schoolId'] as Map<String, dynamic>),
          roles: (json['roles'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$SchoolStaffRolesEnumMap, e,
                  unknownValue: Enum$SchoolStaffRoles.$unknown))
              .toList(),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolStaffUncheckedUpdateWithoutUserInputToJson(
        Input$SchoolStaffUncheckedUpdateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
      'roles': instance.roles
          ?.map((e) => _$Enum$SchoolStaffRolesEnumMap[e])
          .toList(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$SchoolStaffUpdateInput _$Input$SchoolStaffUpdateInputFromJson(
        Map<String, dynamic> json) =>
    Input$SchoolStaffUpdateInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      school: json['school'] == null
          ? null
          : Input$SchoolUpdateOneRequiredWithoutSchoolStaffsInput.fromJson(
              json['school'] as Map<String, dynamic>),
      user: json['user'] == null
          ? null
          : Input$UserUpdateOneRequiredWithoutSchoolStaffsInput.fromJson(
              json['user'] as Map<String, dynamic>),
      roles: (json['roles'] as List<dynamic>?)
          ?.map((e) => $enumDecodeNullable(_$Enum$SchoolStaffRolesEnumMap, e,
              unknownValue: Enum$SchoolStaffRoles.$unknown))
          .toList(),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$SchoolStaffUpdateInputToJson(
        Input$SchoolStaffUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'school': instance.school?.toJson(),
      'user': instance.user?.toJson(),
      'roles': instance.roles
          ?.map((e) => _$Enum$SchoolStaffRolesEnumMap[e])
          .toList(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$SchoolStaffUpdateManyMutationInput
    _$Input$SchoolStaffUpdateManyMutationInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffUpdateManyMutationInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          roles: (json['roles'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$SchoolStaffRolesEnumMap, e,
                  unknownValue: Enum$SchoolStaffRoles.$unknown))
              .toList(),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolStaffUpdateManyMutationInputToJson(
        Input$SchoolStaffUpdateManyMutationInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'roles': instance.roles
          ?.map((e) => _$Enum$SchoolStaffRolesEnumMap[e])
          .toList(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$SchoolStaffUpdateManyWithoutSchoolInput
    _$Input$SchoolStaffUpdateManyWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffUpdateManyWithoutSchoolInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffCreateWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffCreateOrConnectWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffUpsertWithWhereUniqueWithoutSchoolInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$SchoolStaffCreateManySchoolInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffUpdateWithWhereUniqueWithoutSchoolInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffUpdateManyWithWhereWithoutSchoolInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$SchoolStaffUpdateManyWithoutSchoolInputToJson(
        Input$SchoolStaffUpdateManyWithoutSchoolInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$SchoolStaffUpdateManyWithoutUserInput
    _$Input$SchoolStaffUpdateManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffUpdateManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffCreateWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffCreateOrConnectWithoutUserInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffUpsertWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$SchoolStaffCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffUpdateWithWhereUniqueWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffUpdateManyWithWhereWithoutUserInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolStaffScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$SchoolStaffUpdateManyWithoutUserInputToJson(
        Input$SchoolStaffUpdateManyWithoutUserInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$SchoolStaffUpdateManyWithWhereWithoutSchoolInput
    _$Input$SchoolStaffUpdateManyWithWhereWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffUpdateManyWithWhereWithoutSchoolInput(
          where: Input$SchoolStaffScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$SchoolStaffUncheckedUpdateManyWithoutSchoolStaffsInput
              .fromJson(json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$SchoolStaffUpdateManyWithWhereWithoutSchoolInputToJson(
            Input$SchoolStaffUpdateManyWithWhereWithoutSchoolInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$SchoolStaffUpdateManyWithWhereWithoutUserInput
    _$Input$SchoolStaffUpdateManyWithWhereWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffUpdateManyWithWhereWithoutUserInput(
          where: Input$SchoolStaffScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$SchoolStaffUncheckedUpdateManyWithoutSchoolStaffsInput
              .fromJson(json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$SchoolStaffUpdateManyWithWhereWithoutUserInputToJson(
            Input$SchoolStaffUpdateManyWithWhereWithoutUserInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$SchoolStaffUpdaterolesInput _$Input$SchoolStaffUpdaterolesInputFromJson(
        Map<String, dynamic> json) =>
    Input$SchoolStaffUpdaterolesInput(
      $set: (json['set'] as List<dynamic>?)
          ?.map((e) => $enumDecodeNullable(_$Enum$SchoolStaffRolesEnumMap, e,
              unknownValue: Enum$SchoolStaffRoles.$unknown))
          .toList(),
      push: (json['push'] as List<dynamic>?)
          ?.map((e) => $enumDecodeNullable(_$Enum$SchoolStaffRolesEnumMap, e,
              unknownValue: Enum$SchoolStaffRoles.$unknown))
          .toList(),
    );

Map<String, dynamic> _$Input$SchoolStaffUpdaterolesInputToJson(
        Input$SchoolStaffUpdaterolesInput instance) =>
    <String, dynamic>{
      'set':
          instance.$set?.map((e) => _$Enum$SchoolStaffRolesEnumMap[e]).toList(),
      'push':
          instance.push?.map((e) => _$Enum$SchoolStaffRolesEnumMap[e]).toList(),
    };

Input$SchoolStaffUpdateWithoutSchoolInput
    _$Input$SchoolStaffUpdateWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffUpdateWithoutSchoolInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          user: json['user'] == null
              ? null
              : Input$UserUpdateOneRequiredWithoutSchoolStaffsInput.fromJson(
                  json['user'] as Map<String, dynamic>),
          roles: (json['roles'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$SchoolStaffRolesEnumMap, e,
                  unknownValue: Enum$SchoolStaffRoles.$unknown))
              .toList(),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolStaffUpdateWithoutSchoolInputToJson(
        Input$SchoolStaffUpdateWithoutSchoolInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'user': instance.user?.toJson(),
      'roles': instance.roles
          ?.map((e) => _$Enum$SchoolStaffRolesEnumMap[e])
          .toList(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$SchoolStaffUpdateWithoutUserInput
    _$Input$SchoolStaffUpdateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffUpdateWithoutUserInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          school: json['school'] == null
              ? null
              : Input$SchoolUpdateOneRequiredWithoutSchoolStaffsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
          roles: (json['roles'] as List<dynamic>?)
              ?.map((e) => $enumDecodeNullable(
                  _$Enum$SchoolStaffRolesEnumMap, e,
                  unknownValue: Enum$SchoolStaffRoles.$unknown))
              .toList(),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolStaffUpdateWithoutUserInputToJson(
        Input$SchoolStaffUpdateWithoutUserInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'school': instance.school?.toJson(),
      'roles': instance.roles
          ?.map((e) => _$Enum$SchoolStaffRolesEnumMap[e])
          .toList(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$SchoolStaffUpdateWithWhereUniqueWithoutSchoolInput
    _$Input$SchoolStaffUpdateWithWhereUniqueWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffUpdateWithWhereUniqueWithoutSchoolInput(
          where: Input$SchoolStaffWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$SchoolStaffUncheckedUpdateWithoutSchoolInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String,
    dynamic> _$Input$SchoolStaffUpdateWithWhereUniqueWithoutSchoolInputToJson(
        Input$SchoolStaffUpdateWithWhereUniqueWithoutSchoolInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

Input$SchoolStaffUpdateWithWhereUniqueWithoutUserInput
    _$Input$SchoolStaffUpdateWithWhereUniqueWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffUpdateWithWhereUniqueWithoutUserInput(
          where: Input$SchoolStaffWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$SchoolStaffUncheckedUpdateWithoutUserInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$SchoolStaffUpdateWithWhereUniqueWithoutUserInputToJson(
            Input$SchoolStaffUpdateWithWhereUniqueWithoutUserInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$SchoolStaffUpsertWithWhereUniqueWithoutSchoolInput
    _$Input$SchoolStaffUpsertWithWhereUniqueWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffUpsertWithWhereUniqueWithoutSchoolInput(
          where: Input$SchoolStaffWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: Input$SchoolStaffUncheckedUpdateWithoutSchoolInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$SchoolStaffUncheckedCreateWithoutSchoolInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String,
    dynamic> _$Input$SchoolStaffUpsertWithWhereUniqueWithoutSchoolInputToJson(
        Input$SchoolStaffUpsertWithWhereUniqueWithoutSchoolInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$SchoolStaffUpsertWithWhereUniqueWithoutUserInput
    _$Input$SchoolStaffUpsertWithWhereUniqueWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolStaffUpsertWithWhereUniqueWithoutUserInput(
          where: Input$SchoolStaffWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: Input$SchoolStaffUncheckedUpdateWithoutUserInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$SchoolStaffUncheckedCreateWithoutUserInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$SchoolStaffUpsertWithWhereUniqueWithoutUserInputToJson(
            Input$SchoolStaffUpsertWithWhereUniqueWithoutUserInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

Input$SchoolStaffWhereInput _$Input$SchoolStaffWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$SchoolStaffWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$SchoolStaffWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$SchoolStaffWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$SchoolStaffWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      schoolId: json['schoolId'] == null
          ? null
          : Input$StringFilter.fromJson(
              json['schoolId'] as Map<String, dynamic>),
      school: json['school'] == null
          ? null
          : Input$SchoolWhereInput.fromJson(
              json['school'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : Input$StringFilter.fromJson(json['userId'] as Map<String, dynamic>),
      user: json['user'] == null
          ? null
          : Input$UserWhereInput.fromJson(json['user'] as Map<String, dynamic>),
      roles: json['roles'] == null
          ? null
          : Input$EnumSchoolStaffRolesNullableListFilter.fromJson(
              json['roles'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$SchoolStaffWhereInputToJson(
        Input$SchoolStaffWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
      'school': instance.school?.toJson(),
      'userId': instance.userId?.toJson(),
      'user': instance.user?.toJson(),
      'roles': instance.roles?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
    };

Input$SchoolStaffWhereUniqueInput _$Input$SchoolStaffWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    Input$SchoolStaffWhereUniqueInput(
      id: json['id'] as String?,
    );

Map<String, dynamic> _$Input$SchoolStaffWhereUniqueInputToJson(
        Input$SchoolStaffWhereUniqueInput instance) =>
    <String, dynamic>{
      'id': instance.id,
    };

Input$SchoolSumOrderByAggregateInput
    _$Input$SchoolSumOrderByAggregateInputFromJson(Map<String, dynamic> json) =>
        Input$SchoolSumOrderByAggregateInput(
          levels: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['levels'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$SchoolSumOrderByAggregateInputToJson(
        Input$SchoolSumOrderByAggregateInput instance) =>
    <String, dynamic>{
      'levels': _$Enum$SortOrderEnumMap[instance.levels],
    };

Input$SchoolUncheckedCreateInput _$Input$SchoolUncheckedCreateInputFromJson(
        Map<String, dynamic> json) =>
    Input$SchoolUncheckedCreateInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      npsn: json['npsn'] as String?,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
      classrooms: json['classrooms'] == null
          ? null
          : Input$ClassroomUncheckedCreateNestedManyWithoutSchoolInput.fromJson(
              json['classrooms'] as Map<String, dynamic>),
      levels:
          (json['levels'] as List<dynamic>?)?.map((e) => e as int?).toList(),
      type: json['type'] as String,
      address: json['address'] as String?,
      logoPath: json['logoPath'] as String?,
      bannerPath: json['bannerPath'] as String?,
      provinceId: json['provinceId'] as String,
      regencyId: json['regencyId'] as String,
      schoolStaffs: json['schoolStaffs'] == null
          ? null
          : Input$SchoolStaffUncheckedCreateNestedManyWithoutSchoolInput
              .fromJson(json['schoolStaffs'] as Map<String, dynamic>),
      students: json['students'] == null
          ? null
          : Input$UserUncheckedCreateNestedManyWithoutSchoolInput.fromJson(
              json['students'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$SchoolUncheckedCreateInputToJson(
        Input$SchoolUncheckedCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'npsn': instance.npsn,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'classrooms': instance.classrooms?.toJson(),
      'levels': instance.levels,
      'type': instance.type,
      'address': instance.address,
      'logoPath': instance.logoPath,
      'bannerPath': instance.bannerPath,
      'provinceId': instance.provinceId,
      'regencyId': instance.regencyId,
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'students': instance.students?.toJson(),
    };

Input$SchoolUncheckedCreateNestedManyWithoutProvinceInput
    _$Input$SchoolUncheckedCreateNestedManyWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUncheckedCreateNestedManyWithoutProvinceInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolCreateWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolCreateOrConnectWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$SchoolCreateManyProvinceInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String,
    dynamic> _$Input$SchoolUncheckedCreateNestedManyWithoutProvinceInputToJson(
        Input$SchoolUncheckedCreateNestedManyWithoutProvinceInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$SchoolUncheckedCreateNestedManyWithoutRegencyInput
    _$Input$SchoolUncheckedCreateNestedManyWithoutRegencyInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUncheckedCreateNestedManyWithoutRegencyInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolCreateWithoutRegencyInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolCreateOrConnectWithoutRegencyInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$SchoolCreateManyRegencyInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String,
    dynamic> _$Input$SchoolUncheckedCreateNestedManyWithoutRegencyInputToJson(
        Input$SchoolUncheckedCreateNestedManyWithoutRegencyInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$SchoolUncheckedCreateWithoutClassroomsInput
    _$Input$SchoolUncheckedCreateWithoutClassroomsInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUncheckedCreateWithoutClassroomsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          npsn: json['npsn'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          levels: (json['levels'] as List<dynamic>?)
              ?.map((e) => e as int?)
              .toList(),
          type: json['type'] as String,
          address: json['address'] as String?,
          logoPath: json['logoPath'] as String?,
          bannerPath: json['bannerPath'] as String?,
          provinceId: json['provinceId'] as String,
          regencyId: json['regencyId'] as String,
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedCreateNestedManyWithoutSchoolInput
                  .fromJson(json['schoolStaffs'] as Map<String, dynamic>),
          students: json['students'] == null
              ? null
              : Input$UserUncheckedCreateNestedManyWithoutSchoolInput.fromJson(
                  json['students'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolUncheckedCreateWithoutClassroomsInputToJson(
        Input$SchoolUncheckedCreateWithoutClassroomsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'npsn': instance.npsn,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'levels': instance.levels,
      'type': instance.type,
      'address': instance.address,
      'logoPath': instance.logoPath,
      'bannerPath': instance.bannerPath,
      'provinceId': instance.provinceId,
      'regencyId': instance.regencyId,
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'students': instance.students?.toJson(),
    };

Input$SchoolUncheckedCreateWithoutProvinceInput
    _$Input$SchoolUncheckedCreateWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUncheckedCreateWithoutProvinceInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          npsn: json['npsn'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedCreateNestedManyWithoutSchoolInput
                  .fromJson(json['classrooms'] as Map<String, dynamic>),
          levels: (json['levels'] as List<dynamic>?)
              ?.map((e) => e as int?)
              .toList(),
          type: json['type'] as String,
          address: json['address'] as String?,
          logoPath: json['logoPath'] as String?,
          bannerPath: json['bannerPath'] as String?,
          regencyId: json['regencyId'] as String,
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedCreateNestedManyWithoutSchoolInput
                  .fromJson(json['schoolStaffs'] as Map<String, dynamic>),
          students: json['students'] == null
              ? null
              : Input$UserUncheckedCreateNestedManyWithoutSchoolInput.fromJson(
                  json['students'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolUncheckedCreateWithoutProvinceInputToJson(
        Input$SchoolUncheckedCreateWithoutProvinceInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'npsn': instance.npsn,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'classrooms': instance.classrooms?.toJson(),
      'levels': instance.levels,
      'type': instance.type,
      'address': instance.address,
      'logoPath': instance.logoPath,
      'bannerPath': instance.bannerPath,
      'regencyId': instance.regencyId,
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'students': instance.students?.toJson(),
    };

Input$SchoolUncheckedCreateWithoutRegencyInput
    _$Input$SchoolUncheckedCreateWithoutRegencyInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUncheckedCreateWithoutRegencyInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          npsn: json['npsn'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedCreateNestedManyWithoutSchoolInput
                  .fromJson(json['classrooms'] as Map<String, dynamic>),
          levels: (json['levels'] as List<dynamic>?)
              ?.map((e) => e as int?)
              .toList(),
          type: json['type'] as String,
          address: json['address'] as String?,
          logoPath: json['logoPath'] as String?,
          bannerPath: json['bannerPath'] as String?,
          provinceId: json['provinceId'] as String,
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedCreateNestedManyWithoutSchoolInput
                  .fromJson(json['schoolStaffs'] as Map<String, dynamic>),
          students: json['students'] == null
              ? null
              : Input$UserUncheckedCreateNestedManyWithoutSchoolInput.fromJson(
                  json['students'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolUncheckedCreateWithoutRegencyInputToJson(
        Input$SchoolUncheckedCreateWithoutRegencyInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'npsn': instance.npsn,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'classrooms': instance.classrooms?.toJson(),
      'levels': instance.levels,
      'type': instance.type,
      'address': instance.address,
      'logoPath': instance.logoPath,
      'bannerPath': instance.bannerPath,
      'provinceId': instance.provinceId,
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'students': instance.students?.toJson(),
    };

Input$SchoolUncheckedCreateWithoutSchoolStaffsInput
    _$Input$SchoolUncheckedCreateWithoutSchoolStaffsInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUncheckedCreateWithoutSchoolStaffsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          npsn: json['npsn'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedCreateNestedManyWithoutSchoolInput
                  .fromJson(json['classrooms'] as Map<String, dynamic>),
          levels: (json['levels'] as List<dynamic>?)
              ?.map((e) => e as int?)
              .toList(),
          type: json['type'] as String,
          address: json['address'] as String?,
          logoPath: json['logoPath'] as String?,
          bannerPath: json['bannerPath'] as String?,
          provinceId: json['provinceId'] as String,
          regencyId: json['regencyId'] as String,
          students: json['students'] == null
              ? null
              : Input$UserUncheckedCreateNestedManyWithoutSchoolInput.fromJson(
                  json['students'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$SchoolUncheckedCreateWithoutSchoolStaffsInputToJson(
            Input$SchoolUncheckedCreateWithoutSchoolStaffsInput instance) =>
        <String, dynamic>{
          'id': instance.id,
          'name': instance.name,
          'npsn': instance.npsn,
          'createdAt': instance.createdAt,
          'updatedAt': instance.updatedAt,
          'classrooms': instance.classrooms?.toJson(),
          'levels': instance.levels,
          'type': instance.type,
          'address': instance.address,
          'logoPath': instance.logoPath,
          'bannerPath': instance.bannerPath,
          'provinceId': instance.provinceId,
          'regencyId': instance.regencyId,
          'students': instance.students?.toJson(),
        };

Input$SchoolUncheckedCreateWithoutStudentsInput
    _$Input$SchoolUncheckedCreateWithoutStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUncheckedCreateWithoutStudentsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          npsn: json['npsn'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedCreateNestedManyWithoutSchoolInput
                  .fromJson(json['classrooms'] as Map<String, dynamic>),
          levels: (json['levels'] as List<dynamic>?)
              ?.map((e) => e as int?)
              .toList(),
          type: json['type'] as String,
          address: json['address'] as String?,
          logoPath: json['logoPath'] as String?,
          bannerPath: json['bannerPath'] as String?,
          provinceId: json['provinceId'] as String,
          regencyId: json['regencyId'] as String,
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedCreateNestedManyWithoutSchoolInput
                  .fromJson(json['schoolStaffs'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolUncheckedCreateWithoutStudentsInputToJson(
        Input$SchoolUncheckedCreateWithoutStudentsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'npsn': instance.npsn,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'classrooms': instance.classrooms?.toJson(),
      'levels': instance.levels,
      'type': instance.type,
      'address': instance.address,
      'logoPath': instance.logoPath,
      'bannerPath': instance.bannerPath,
      'provinceId': instance.provinceId,
      'regencyId': instance.regencyId,
      'schoolStaffs': instance.schoolStaffs?.toJson(),
    };

Input$SchoolUncheckedUpdateInput _$Input$SchoolUncheckedUpdateInputFromJson(
        Map<String, dynamic> json) =>
    Input$SchoolUncheckedUpdateInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      npsn: json['npsn'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['npsn'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      classrooms: json['classrooms'] == null
          ? null
          : Input$ClassroomUncheckedUpdateManyWithoutSchoolInput.fromJson(
              json['classrooms'] as Map<String, dynamic>),
      levels:
          (json['levels'] as List<dynamic>?)?.map((e) => e as int?).toList(),
      type: json['type'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['type'] as Map<String, dynamic>),
      address: json['address'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['address'] as Map<String, dynamic>),
      logoPath: json['logoPath'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['logoPath'] as Map<String, dynamic>),
      bannerPath: json['bannerPath'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['bannerPath'] as Map<String, dynamic>),
      provinceId: json['provinceId'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['provinceId'] as Map<String, dynamic>),
      regencyId: json['regencyId'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['regencyId'] as Map<String, dynamic>),
      schoolStaffs: json['schoolStaffs'] == null
          ? null
          : Input$SchoolStaffUncheckedUpdateManyWithoutSchoolInput.fromJson(
              json['schoolStaffs'] as Map<String, dynamic>),
      students: json['students'] == null
          ? null
          : Input$UserUncheckedUpdateManyWithoutSchoolInput.fromJson(
              json['students'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$SchoolUncheckedUpdateInputToJson(
        Input$SchoolUncheckedUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'npsn': instance.npsn?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'levels': instance.levels,
      'type': instance.type?.toJson(),
      'address': instance.address?.toJson(),
      'logoPath': instance.logoPath?.toJson(),
      'bannerPath': instance.bannerPath?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'students': instance.students?.toJson(),
    };

Input$SchoolUncheckedUpdateManyInput
    _$Input$SchoolUncheckedUpdateManyInputFromJson(Map<String, dynamic> json) =>
        Input$SchoolUncheckedUpdateManyInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          npsn: json['npsn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['npsn'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          levels: (json['levels'] as List<dynamic>?)
              ?.map((e) => e as int?)
              .toList(),
          type: json['type'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          logoPath: json['logoPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['logoPath'] as Map<String, dynamic>),
          bannerPath: json['bannerPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['bannerPath'] as Map<String, dynamic>),
          provinceId: json['provinceId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['provinceId'] as Map<String, dynamic>),
          regencyId: json['regencyId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['regencyId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolUncheckedUpdateManyInputToJson(
        Input$SchoolUncheckedUpdateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'npsn': instance.npsn?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'levels': instance.levels,
      'type': instance.type?.toJson(),
      'address': instance.address?.toJson(),
      'logoPath': instance.logoPath?.toJson(),
      'bannerPath': instance.bannerPath?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
    };

Input$SchoolUncheckedUpdateManyWithoutProvinceInput
    _$Input$SchoolUncheckedUpdateManyWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUncheckedUpdateManyWithoutProvinceInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolCreateWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolCreateOrConnectWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolUpsertWithWhereUniqueWithoutProvinceInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$SchoolCreateManyProvinceInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolUpdateWithWhereUniqueWithoutProvinceInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolUpdateManyWithWhereWithoutProvinceInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$SchoolUncheckedUpdateManyWithoutProvinceInputToJson(
            Input$SchoolUncheckedUpdateManyWithoutProvinceInput instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'set': instance.$set?.map((e) => e?.toJson()).toList(),
          'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
          'delete': instance.delete?.map((e) => e?.toJson()).toList(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
          'update': instance.update?.map((e) => e?.toJson()).toList(),
          'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
          'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
        };

Input$SchoolUncheckedUpdateManyWithoutRegencyInput
    _$Input$SchoolUncheckedUpdateManyWithoutRegencyInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUncheckedUpdateManyWithoutRegencyInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolCreateWithoutRegencyInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolCreateOrConnectWithoutRegencyInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolUpsertWithWhereUniqueWithoutRegencyInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$SchoolCreateManyRegencyInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolUpdateWithWhereUniqueWithoutRegencyInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolUpdateManyWithWhereWithoutRegencyInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$SchoolUncheckedUpdateManyWithoutRegencyInputToJson(
        Input$SchoolUncheckedUpdateManyWithoutRegencyInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$SchoolUncheckedUpdateManyWithoutSchoolInput
    _$Input$SchoolUncheckedUpdateManyWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUncheckedUpdateManyWithoutSchoolInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          npsn: json['npsn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['npsn'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          levels: (json['levels'] as List<dynamic>?)
              ?.map((e) => e as int?)
              .toList(),
          type: json['type'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          logoPath: json['logoPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['logoPath'] as Map<String, dynamic>),
          bannerPath: json['bannerPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['bannerPath'] as Map<String, dynamic>),
          regencyId: json['regencyId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['regencyId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolUncheckedUpdateManyWithoutSchoolInputToJson(
        Input$SchoolUncheckedUpdateManyWithoutSchoolInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'npsn': instance.npsn?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'levels': instance.levels,
      'type': instance.type?.toJson(),
      'address': instance.address?.toJson(),
      'logoPath': instance.logoPath?.toJson(),
      'bannerPath': instance.bannerPath?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
    };

Input$SchoolUncheckedUpdateWithoutClassroomsInput
    _$Input$SchoolUncheckedUpdateWithoutClassroomsInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUncheckedUpdateWithoutClassroomsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          npsn: json['npsn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['npsn'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          levels: (json['levels'] as List<dynamic>?)
              ?.map((e) => e as int?)
              .toList(),
          type: json['type'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          logoPath: json['logoPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['logoPath'] as Map<String, dynamic>),
          bannerPath: json['bannerPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['bannerPath'] as Map<String, dynamic>),
          provinceId: json['provinceId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['provinceId'] as Map<String, dynamic>),
          regencyId: json['regencyId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['regencyId'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedUpdateManyWithoutSchoolInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          students: json['students'] == null
              ? null
              : Input$UserUncheckedUpdateManyWithoutSchoolInput.fromJson(
                  json['students'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolUncheckedUpdateWithoutClassroomsInputToJson(
        Input$SchoolUncheckedUpdateWithoutClassroomsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'npsn': instance.npsn?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'levels': instance.levels,
      'type': instance.type?.toJson(),
      'address': instance.address?.toJson(),
      'logoPath': instance.logoPath?.toJson(),
      'bannerPath': instance.bannerPath?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'students': instance.students?.toJson(),
    };

Input$SchoolUncheckedUpdateWithoutProvinceInput
    _$Input$SchoolUncheckedUpdateWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUncheckedUpdateWithoutProvinceInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          npsn: json['npsn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['npsn'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedUpdateManyWithoutSchoolInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          levels: (json['levels'] as List<dynamic>?)
              ?.map((e) => e as int?)
              .toList(),
          type: json['type'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          logoPath: json['logoPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['logoPath'] as Map<String, dynamic>),
          bannerPath: json['bannerPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['bannerPath'] as Map<String, dynamic>),
          regencyId: json['regencyId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['regencyId'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedUpdateManyWithoutSchoolInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          students: json['students'] == null
              ? null
              : Input$UserUncheckedUpdateManyWithoutSchoolInput.fromJson(
                  json['students'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolUncheckedUpdateWithoutProvinceInputToJson(
        Input$SchoolUncheckedUpdateWithoutProvinceInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'npsn': instance.npsn?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'levels': instance.levels,
      'type': instance.type?.toJson(),
      'address': instance.address?.toJson(),
      'logoPath': instance.logoPath?.toJson(),
      'bannerPath': instance.bannerPath?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'students': instance.students?.toJson(),
    };

Input$SchoolUncheckedUpdateWithoutRegencyInput
    _$Input$SchoolUncheckedUpdateWithoutRegencyInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUncheckedUpdateWithoutRegencyInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          npsn: json['npsn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['npsn'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedUpdateManyWithoutSchoolInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          levels: (json['levels'] as List<dynamic>?)
              ?.map((e) => e as int?)
              .toList(),
          type: json['type'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          logoPath: json['logoPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['logoPath'] as Map<String, dynamic>),
          bannerPath: json['bannerPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['bannerPath'] as Map<String, dynamic>),
          provinceId: json['provinceId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['provinceId'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedUpdateManyWithoutSchoolInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          students: json['students'] == null
              ? null
              : Input$UserUncheckedUpdateManyWithoutSchoolInput.fromJson(
                  json['students'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolUncheckedUpdateWithoutRegencyInputToJson(
        Input$SchoolUncheckedUpdateWithoutRegencyInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'npsn': instance.npsn?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'levels': instance.levels,
      'type': instance.type?.toJson(),
      'address': instance.address?.toJson(),
      'logoPath': instance.logoPath?.toJson(),
      'bannerPath': instance.bannerPath?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'students': instance.students?.toJson(),
    };

Input$SchoolUncheckedUpdateWithoutSchoolStaffsInput
    _$Input$SchoolUncheckedUpdateWithoutSchoolStaffsInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUncheckedUpdateWithoutSchoolStaffsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          npsn: json['npsn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['npsn'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedUpdateManyWithoutSchoolInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          levels: (json['levels'] as List<dynamic>?)
              ?.map((e) => e as int?)
              .toList(),
          type: json['type'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          logoPath: json['logoPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['logoPath'] as Map<String, dynamic>),
          bannerPath: json['bannerPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['bannerPath'] as Map<String, dynamic>),
          provinceId: json['provinceId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['provinceId'] as Map<String, dynamic>),
          regencyId: json['regencyId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['regencyId'] as Map<String, dynamic>),
          students: json['students'] == null
              ? null
              : Input$UserUncheckedUpdateManyWithoutSchoolInput.fromJson(
                  json['students'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$SchoolUncheckedUpdateWithoutSchoolStaffsInputToJson(
            Input$SchoolUncheckedUpdateWithoutSchoolStaffsInput instance) =>
        <String, dynamic>{
          'id': instance.id?.toJson(),
          'name': instance.name?.toJson(),
          'npsn': instance.npsn?.toJson(),
          'createdAt': instance.createdAt?.toJson(),
          'updatedAt': instance.updatedAt?.toJson(),
          'classrooms': instance.classrooms?.toJson(),
          'levels': instance.levels,
          'type': instance.type?.toJson(),
          'address': instance.address?.toJson(),
          'logoPath': instance.logoPath?.toJson(),
          'bannerPath': instance.bannerPath?.toJson(),
          'provinceId': instance.provinceId?.toJson(),
          'regencyId': instance.regencyId?.toJson(),
          'students': instance.students?.toJson(),
        };

Input$SchoolUncheckedUpdateWithoutStudentsInput
    _$Input$SchoolUncheckedUpdateWithoutStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUncheckedUpdateWithoutStudentsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          npsn: json['npsn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['npsn'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedUpdateManyWithoutSchoolInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          levels: (json['levels'] as List<dynamic>?)
              ?.map((e) => e as int?)
              .toList(),
          type: json['type'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          logoPath: json['logoPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['logoPath'] as Map<String, dynamic>),
          bannerPath: json['bannerPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['bannerPath'] as Map<String, dynamic>),
          provinceId: json['provinceId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['provinceId'] as Map<String, dynamic>),
          regencyId: json['regencyId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['regencyId'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedUpdateManyWithoutSchoolInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolUncheckedUpdateWithoutStudentsInputToJson(
        Input$SchoolUncheckedUpdateWithoutStudentsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'npsn': instance.npsn?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'levels': instance.levels,
      'type': instance.type?.toJson(),
      'address': instance.address?.toJson(),
      'logoPath': instance.logoPath?.toJson(),
      'bannerPath': instance.bannerPath?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
    };

Input$SchoolUpdateInput _$Input$SchoolUpdateInputFromJson(
        Map<String, dynamic> json) =>
    Input$SchoolUpdateInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      npsn: json['npsn'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['npsn'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      classrooms: json['classrooms'] == null
          ? null
          : Input$ClassroomUpdateManyWithoutSchoolInput.fromJson(
              json['classrooms'] as Map<String, dynamic>),
      levels:
          (json['levels'] as List<dynamic>?)?.map((e) => e as int?).toList(),
      type: json['type'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['type'] as Map<String, dynamic>),
      address: json['address'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['address'] as Map<String, dynamic>),
      logoPath: json['logoPath'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['logoPath'] as Map<String, dynamic>),
      bannerPath: json['bannerPath'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['bannerPath'] as Map<String, dynamic>),
      province: json['province'] == null
          ? null
          : Input$ProvinceUpdateOneRequiredWithoutSchoolInput.fromJson(
              json['province'] as Map<String, dynamic>),
      regency: json['regency'] == null
          ? null
          : Input$RegencyUpdateOneRequiredWithoutSchoolInput.fromJson(
              json['regency'] as Map<String, dynamic>),
      schoolStaffs: json['schoolStaffs'] == null
          ? null
          : Input$SchoolStaffUpdateManyWithoutSchoolInput.fromJson(
              json['schoolStaffs'] as Map<String, dynamic>),
      students: json['students'] == null
          ? null
          : Input$UserUpdateManyWithoutSchoolInput.fromJson(
              json['students'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$SchoolUpdateInputToJson(
        Input$SchoolUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'npsn': instance.npsn?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'levels': instance.levels,
      'type': instance.type?.toJson(),
      'address': instance.address?.toJson(),
      'logoPath': instance.logoPath?.toJson(),
      'bannerPath': instance.bannerPath?.toJson(),
      'province': instance.province?.toJson(),
      'regency': instance.regency?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'students': instance.students?.toJson(),
    };

Input$SchoolUpdatelevelsInput _$Input$SchoolUpdatelevelsInputFromJson(
        Map<String, dynamic> json) =>
    Input$SchoolUpdatelevelsInput(
      $set: (json['set'] as List<dynamic>?)?.map((e) => e as int?).toList(),
      push: (json['push'] as List<dynamic>?)?.map((e) => e as int?).toList(),
    );

Map<String, dynamic> _$Input$SchoolUpdatelevelsInputToJson(
        Input$SchoolUpdatelevelsInput instance) =>
    <String, dynamic>{
      'set': instance.$set,
      'push': instance.push,
    };

Input$SchoolUpdateManyMutationInput
    _$Input$SchoolUpdateManyMutationInputFromJson(Map<String, dynamic> json) =>
        Input$SchoolUpdateManyMutationInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          npsn: json['npsn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['npsn'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          levels: (json['levels'] as List<dynamic>?)
              ?.map((e) => e as int?)
              .toList(),
          type: json['type'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          logoPath: json['logoPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['logoPath'] as Map<String, dynamic>),
          bannerPath: json['bannerPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['bannerPath'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolUpdateManyMutationInputToJson(
        Input$SchoolUpdateManyMutationInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'npsn': instance.npsn?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'levels': instance.levels,
      'type': instance.type?.toJson(),
      'address': instance.address?.toJson(),
      'logoPath': instance.logoPath?.toJson(),
      'bannerPath': instance.bannerPath?.toJson(),
    };

Input$SchoolUpdateManyWithoutProvinceInput
    _$Input$SchoolUpdateManyWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUpdateManyWithoutProvinceInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolCreateWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolCreateOrConnectWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolUpsertWithWhereUniqueWithoutProvinceInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$SchoolCreateManyProvinceInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolUpdateWithWhereUniqueWithoutProvinceInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolUpdateManyWithWhereWithoutProvinceInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$SchoolUpdateManyWithoutProvinceInputToJson(
        Input$SchoolUpdateManyWithoutProvinceInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$SchoolUpdateManyWithoutRegencyInput
    _$Input$SchoolUpdateManyWithoutRegencyInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUpdateManyWithoutRegencyInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolCreateWithoutRegencyInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolCreateOrConnectWithoutRegencyInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolUpsertWithWhereUniqueWithoutRegencyInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$SchoolCreateManyRegencyInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolUpdateWithWhereUniqueWithoutRegencyInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolUpdateManyWithWhereWithoutRegencyInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$SchoolScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$SchoolUpdateManyWithoutRegencyInputToJson(
        Input$SchoolUpdateManyWithoutRegencyInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$SchoolUpdateManyWithWhereWithoutProvinceInput
    _$Input$SchoolUpdateManyWithWhereWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUpdateManyWithWhereWithoutProvinceInput(
          where: Input$SchoolScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$SchoolUncheckedUpdateManyWithoutSchoolInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$SchoolUpdateManyWithWhereWithoutProvinceInputToJson(
            Input$SchoolUpdateManyWithWhereWithoutProvinceInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$SchoolUpdateManyWithWhereWithoutRegencyInput
    _$Input$SchoolUpdateManyWithWhereWithoutRegencyInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUpdateManyWithWhereWithoutRegencyInput(
          where: Input$SchoolScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$SchoolUncheckedUpdateManyWithoutSchoolInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolUpdateManyWithWhereWithoutRegencyInputToJson(
        Input$SchoolUpdateManyWithWhereWithoutRegencyInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

Input$SchoolUpdateOneRequiredWithoutSchoolStaffsInput
    _$Input$SchoolUpdateOneRequiredWithoutSchoolStaffsInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUpdateOneRequiredWithoutSchoolStaffsInput(
          create: json['create'] == null
              ? null
              : Input$SchoolUncheckedCreateWithoutSchoolStaffsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$SchoolCreateOrConnectWithoutSchoolStaffsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : Input$SchoolUpsertWithoutSchoolStaffsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$SchoolWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : Input$SchoolUncheckedUpdateWithoutSchoolStaffsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$SchoolUpdateOneRequiredWithoutSchoolStaffsInputToJson(
            Input$SchoolUpdateOneRequiredWithoutSchoolStaffsInput instance) =>
        <String, dynamic>{
          'create': instance.create?.toJson(),
          'connectOrCreate': instance.connectOrCreate?.toJson(),
          'upsert': instance.upsert?.toJson(),
          'connect': instance.connect?.toJson(),
          'update': instance.update?.toJson(),
        };

Input$SchoolUpdateOneWithoutClassroomsInput
    _$Input$SchoolUpdateOneWithoutClassroomsInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUpdateOneWithoutClassroomsInput(
          create: json['create'] == null
              ? null
              : Input$SchoolUncheckedCreateWithoutClassroomsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$SchoolCreateOrConnectWithoutClassroomsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : Input$SchoolUpsertWithoutClassroomsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          disconnect: json['disconnect'] as bool?,
          delete: json['delete'] as bool?,
          connect: json['connect'] == null
              ? null
              : Input$SchoolWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : Input$SchoolUncheckedUpdateWithoutClassroomsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolUpdateOneWithoutClassroomsInputToJson(
        Input$SchoolUpdateOneWithoutClassroomsInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'upsert': instance.upsert?.toJson(),
      'disconnect': instance.disconnect,
      'delete': instance.delete,
      'connect': instance.connect?.toJson(),
      'update': instance.update?.toJson(),
    };

Input$SchoolUpdateOneWithoutStudentsInput
    _$Input$SchoolUpdateOneWithoutStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUpdateOneWithoutStudentsInput(
          create: json['create'] == null
              ? null
              : Input$SchoolUncheckedCreateWithoutStudentsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$SchoolCreateOrConnectWithoutStudentsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : Input$SchoolUpsertWithoutStudentsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          disconnect: json['disconnect'] as bool?,
          delete: json['delete'] as bool?,
          connect: json['connect'] == null
              ? null
              : Input$SchoolWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : Input$SchoolUncheckedUpdateWithoutStudentsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolUpdateOneWithoutStudentsInputToJson(
        Input$SchoolUpdateOneWithoutStudentsInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'upsert': instance.upsert?.toJson(),
      'disconnect': instance.disconnect,
      'delete': instance.delete,
      'connect': instance.connect?.toJson(),
      'update': instance.update?.toJson(),
    };

Input$SchoolUpdateWithoutClassroomsInput
    _$Input$SchoolUpdateWithoutClassroomsInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUpdateWithoutClassroomsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          npsn: json['npsn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['npsn'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          levels: (json['levels'] as List<dynamic>?)
              ?.map((e) => e as int?)
              .toList(),
          type: json['type'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          logoPath: json['logoPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['logoPath'] as Map<String, dynamic>),
          bannerPath: json['bannerPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['bannerPath'] as Map<String, dynamic>),
          province: json['province'] == null
              ? null
              : Input$ProvinceUpdateOneRequiredWithoutSchoolInput.fromJson(
                  json['province'] as Map<String, dynamic>),
          regency: json['regency'] == null
              ? null
              : Input$RegencyUpdateOneRequiredWithoutSchoolInput.fromJson(
                  json['regency'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUpdateManyWithoutSchoolInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          students: json['students'] == null
              ? null
              : Input$UserUpdateManyWithoutSchoolInput.fromJson(
                  json['students'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolUpdateWithoutClassroomsInputToJson(
        Input$SchoolUpdateWithoutClassroomsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'npsn': instance.npsn?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'levels': instance.levels,
      'type': instance.type?.toJson(),
      'address': instance.address?.toJson(),
      'logoPath': instance.logoPath?.toJson(),
      'bannerPath': instance.bannerPath?.toJson(),
      'province': instance.province?.toJson(),
      'regency': instance.regency?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'students': instance.students?.toJson(),
    };

Input$SchoolUpdateWithoutProvinceInput
    _$Input$SchoolUpdateWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUpdateWithoutProvinceInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          npsn: json['npsn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['npsn'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUpdateManyWithoutSchoolInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          levels: (json['levels'] as List<dynamic>?)
              ?.map((e) => e as int?)
              .toList(),
          type: json['type'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          logoPath: json['logoPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['logoPath'] as Map<String, dynamic>),
          bannerPath: json['bannerPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['bannerPath'] as Map<String, dynamic>),
          regency: json['regency'] == null
              ? null
              : Input$RegencyUpdateOneRequiredWithoutSchoolInput.fromJson(
                  json['regency'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUpdateManyWithoutSchoolInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          students: json['students'] == null
              ? null
              : Input$UserUpdateManyWithoutSchoolInput.fromJson(
                  json['students'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolUpdateWithoutProvinceInputToJson(
        Input$SchoolUpdateWithoutProvinceInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'npsn': instance.npsn?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'levels': instance.levels,
      'type': instance.type?.toJson(),
      'address': instance.address?.toJson(),
      'logoPath': instance.logoPath?.toJson(),
      'bannerPath': instance.bannerPath?.toJson(),
      'regency': instance.regency?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'students': instance.students?.toJson(),
    };

Input$SchoolUpdateWithoutRegencyInput
    _$Input$SchoolUpdateWithoutRegencyInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUpdateWithoutRegencyInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          npsn: json['npsn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['npsn'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUpdateManyWithoutSchoolInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          levels: (json['levels'] as List<dynamic>?)
              ?.map((e) => e as int?)
              .toList(),
          type: json['type'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          logoPath: json['logoPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['logoPath'] as Map<String, dynamic>),
          bannerPath: json['bannerPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['bannerPath'] as Map<String, dynamic>),
          province: json['province'] == null
              ? null
              : Input$ProvinceUpdateOneRequiredWithoutSchoolInput.fromJson(
                  json['province'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUpdateManyWithoutSchoolInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          students: json['students'] == null
              ? null
              : Input$UserUpdateManyWithoutSchoolInput.fromJson(
                  json['students'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolUpdateWithoutRegencyInputToJson(
        Input$SchoolUpdateWithoutRegencyInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'npsn': instance.npsn?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'levels': instance.levels,
      'type': instance.type?.toJson(),
      'address': instance.address?.toJson(),
      'logoPath': instance.logoPath?.toJson(),
      'bannerPath': instance.bannerPath?.toJson(),
      'province': instance.province?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'students': instance.students?.toJson(),
    };

Input$SchoolUpdateWithoutSchoolStaffsInput
    _$Input$SchoolUpdateWithoutSchoolStaffsInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUpdateWithoutSchoolStaffsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          npsn: json['npsn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['npsn'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUpdateManyWithoutSchoolInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          levels: (json['levels'] as List<dynamic>?)
              ?.map((e) => e as int?)
              .toList(),
          type: json['type'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          logoPath: json['logoPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['logoPath'] as Map<String, dynamic>),
          bannerPath: json['bannerPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['bannerPath'] as Map<String, dynamic>),
          province: json['province'] == null
              ? null
              : Input$ProvinceUpdateOneRequiredWithoutSchoolInput.fromJson(
                  json['province'] as Map<String, dynamic>),
          regency: json['regency'] == null
              ? null
              : Input$RegencyUpdateOneRequiredWithoutSchoolInput.fromJson(
                  json['regency'] as Map<String, dynamic>),
          students: json['students'] == null
              ? null
              : Input$UserUpdateManyWithoutSchoolInput.fromJson(
                  json['students'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolUpdateWithoutSchoolStaffsInputToJson(
        Input$SchoolUpdateWithoutSchoolStaffsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'npsn': instance.npsn?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'levels': instance.levels,
      'type': instance.type?.toJson(),
      'address': instance.address?.toJson(),
      'logoPath': instance.logoPath?.toJson(),
      'bannerPath': instance.bannerPath?.toJson(),
      'province': instance.province?.toJson(),
      'regency': instance.regency?.toJson(),
      'students': instance.students?.toJson(),
    };

Input$SchoolUpdateWithoutStudentsInput
    _$Input$SchoolUpdateWithoutStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUpdateWithoutStudentsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          npsn: json['npsn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['npsn'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUpdateManyWithoutSchoolInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          levels: (json['levels'] as List<dynamic>?)
              ?.map((e) => e as int?)
              .toList(),
          type: json['type'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['type'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          logoPath: json['logoPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['logoPath'] as Map<String, dynamic>),
          bannerPath: json['bannerPath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['bannerPath'] as Map<String, dynamic>),
          province: json['province'] == null
              ? null
              : Input$ProvinceUpdateOneRequiredWithoutSchoolInput.fromJson(
                  json['province'] as Map<String, dynamic>),
          regency: json['regency'] == null
              ? null
              : Input$RegencyUpdateOneRequiredWithoutSchoolInput.fromJson(
                  json['regency'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUpdateManyWithoutSchoolInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolUpdateWithoutStudentsInputToJson(
        Input$SchoolUpdateWithoutStudentsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'npsn': instance.npsn?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'levels': instance.levels,
      'type': instance.type?.toJson(),
      'address': instance.address?.toJson(),
      'logoPath': instance.logoPath?.toJson(),
      'bannerPath': instance.bannerPath?.toJson(),
      'province': instance.province?.toJson(),
      'regency': instance.regency?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
    };

Input$SchoolUpdateWithWhereUniqueWithoutProvinceInput
    _$Input$SchoolUpdateWithWhereUniqueWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUpdateWithWhereUniqueWithoutProvinceInput(
          where: Input$SchoolWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$SchoolUncheckedUpdateWithoutProvinceInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$SchoolUpdateWithWhereUniqueWithoutProvinceInputToJson(
            Input$SchoolUpdateWithWhereUniqueWithoutProvinceInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$SchoolUpdateWithWhereUniqueWithoutRegencyInput
    _$Input$SchoolUpdateWithWhereUniqueWithoutRegencyInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUpdateWithWhereUniqueWithoutRegencyInput(
          where: Input$SchoolWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$SchoolUncheckedUpdateWithoutRegencyInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$SchoolUpdateWithWhereUniqueWithoutRegencyInputToJson(
            Input$SchoolUpdateWithWhereUniqueWithoutRegencyInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$SchoolUpsertWithoutClassroomsInput
    _$Input$SchoolUpsertWithoutClassroomsInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUpsertWithoutClassroomsInput(
          update: Input$SchoolUncheckedUpdateWithoutClassroomsInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$SchoolUncheckedCreateWithoutClassroomsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolUpsertWithoutClassroomsInputToJson(
        Input$SchoolUpsertWithoutClassroomsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$SchoolUpsertWithoutSchoolStaffsInput
    _$Input$SchoolUpsertWithoutSchoolStaffsInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUpsertWithoutSchoolStaffsInput(
          update: Input$SchoolUncheckedUpdateWithoutSchoolStaffsInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$SchoolUncheckedCreateWithoutSchoolStaffsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolUpsertWithoutSchoolStaffsInputToJson(
        Input$SchoolUpsertWithoutSchoolStaffsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$SchoolUpsertWithoutStudentsInput
    _$Input$SchoolUpsertWithoutStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUpsertWithoutStudentsInput(
          update: Input$SchoolUncheckedUpdateWithoutStudentsInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$SchoolUncheckedCreateWithoutStudentsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$SchoolUpsertWithoutStudentsInputToJson(
        Input$SchoolUpsertWithoutStudentsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$SchoolUpsertWithWhereUniqueWithoutProvinceInput
    _$Input$SchoolUpsertWithWhereUniqueWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUpsertWithWhereUniqueWithoutProvinceInput(
          where: Input$SchoolWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: Input$SchoolUncheckedUpdateWithoutProvinceInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$SchoolUncheckedCreateWithoutProvinceInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$SchoolUpsertWithWhereUniqueWithoutProvinceInputToJson(
            Input$SchoolUpsertWithWhereUniqueWithoutProvinceInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

Input$SchoolUpsertWithWhereUniqueWithoutRegencyInput
    _$Input$SchoolUpsertWithWhereUniqueWithoutRegencyInputFromJson(
            Map<String, dynamic> json) =>
        Input$SchoolUpsertWithWhereUniqueWithoutRegencyInput(
          where: Input$SchoolWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: Input$SchoolUncheckedUpdateWithoutRegencyInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$SchoolUncheckedCreateWithoutRegencyInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$SchoolUpsertWithWhereUniqueWithoutRegencyInputToJson(
            Input$SchoolUpsertWithWhereUniqueWithoutRegencyInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

Input$SchoolWhereInput _$Input$SchoolWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$SchoolWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$SchoolWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$SchoolWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$SchoolWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      npsn: json['npsn'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['npsn'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      classrooms: json['classrooms'] == null
          ? null
          : Input$ClassroomListRelationFilter.fromJson(
              json['classrooms'] as Map<String, dynamic>),
      levels: json['levels'] == null
          ? null
          : Input$IntNullableListFilter.fromJson(
              json['levels'] as Map<String, dynamic>),
      type: json['type'] == null
          ? null
          : Input$StringFilter.fromJson(json['type'] as Map<String, dynamic>),
      address: json['address'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['address'] as Map<String, dynamic>),
      logoPath: json['logoPath'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['logoPath'] as Map<String, dynamic>),
      bannerPath: json['bannerPath'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['bannerPath'] as Map<String, dynamic>),
      provinceId: json['provinceId'] == null
          ? null
          : Input$StringFilter.fromJson(
              json['provinceId'] as Map<String, dynamic>),
      province: json['province'] == null
          ? null
          : Input$ProvinceWhereInput.fromJson(
              json['province'] as Map<String, dynamic>),
      regencyId: json['regencyId'] == null
          ? null
          : Input$StringFilter.fromJson(
              json['regencyId'] as Map<String, dynamic>),
      regency: json['regency'] == null
          ? null
          : Input$RegencyWhereInput.fromJson(
              json['regency'] as Map<String, dynamic>),
      schoolStaffs: json['schoolStaffs'] == null
          ? null
          : Input$SchoolStaffListRelationFilter.fromJson(
              json['schoolStaffs'] as Map<String, dynamic>),
      students: json['students'] == null
          ? null
          : Input$UserListRelationFilter.fromJson(
              json['students'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$SchoolWhereInputToJson(
        Input$SchoolWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'npsn': instance.npsn?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'levels': instance.levels?.toJson(),
      'type': instance.type?.toJson(),
      'address': instance.address?.toJson(),
      'logoPath': instance.logoPath?.toJson(),
      'bannerPath': instance.bannerPath?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'province': instance.province?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
      'regency': instance.regency?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'students': instance.students?.toJson(),
    };

Input$SchoolWhereUniqueInput _$Input$SchoolWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    Input$SchoolWhereUniqueInput(
      id: json['id'] as String?,
    );

Map<String, dynamic> _$Input$SchoolWhereUniqueInputToJson(
        Input$SchoolWhereUniqueInput instance) =>
    <String, dynamic>{
      'id': instance.id,
    };

Input$StringFieldUpdateOperationsInput
    _$Input$StringFieldUpdateOperationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$StringFieldUpdateOperationsInput(
          $set: json['set'] as String?,
        );

Map<String, dynamic> _$Input$StringFieldUpdateOperationsInputToJson(
        Input$StringFieldUpdateOperationsInput instance) =>
    <String, dynamic>{
      'set': instance.$set,
    };

Input$StringFilter _$Input$StringFilterFromJson(Map<String, dynamic> json) =>
    Input$StringFilter(
      equals: json['equals'] as String?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as String?).toList(),
      notIn:
          (json['notIn'] as List<dynamic>?)?.map((e) => e as String?).toList(),
      lt: json['lt'] as String?,
      lte: json['lte'] as String?,
      gt: json['gt'] as String?,
      gte: json['gte'] as String?,
      contains: json['contains'] as String?,
      startsWith: json['startsWith'] as String?,
      endsWith: json['endsWith'] as String?,
      mode: $enumDecodeNullable(_$Enum$QueryModeEnumMap, json['mode'],
          unknownValue: Enum$QueryMode.$unknown),
      not: json['not'] == null
          ? null
          : Input$NestedStringFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$StringFilterToJson(Input$StringFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'contains': instance.contains,
      'startsWith': instance.startsWith,
      'endsWith': instance.endsWith,
      'mode': _$Enum$QueryModeEnumMap[instance.mode],
      'not': instance.not?.toJson(),
    };

const _$Enum$QueryModeEnumMap = {
  Enum$QueryMode.$default: 'default',
  Enum$QueryMode.insensitive: 'insensitive',
  Enum$QueryMode.$unknown: r'$unknown',
};

Input$StringNullableFilter _$Input$StringNullableFilterFromJson(
        Map<String, dynamic> json) =>
    Input$StringNullableFilter(
      equals: json['equals'] as String?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as String?).toList(),
      notIn:
          (json['notIn'] as List<dynamic>?)?.map((e) => e as String?).toList(),
      lt: json['lt'] as String?,
      lte: json['lte'] as String?,
      gt: json['gt'] as String?,
      gte: json['gte'] as String?,
      contains: json['contains'] as String?,
      startsWith: json['startsWith'] as String?,
      endsWith: json['endsWith'] as String?,
      mode: $enumDecodeNullable(_$Enum$QueryModeEnumMap, json['mode'],
          unknownValue: Enum$QueryMode.$unknown),
      not: json['not'] == null
          ? null
          : Input$NestedStringNullableFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$StringNullableFilterToJson(
        Input$StringNullableFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'contains': instance.contains,
      'startsWith': instance.startsWith,
      'endsWith': instance.endsWith,
      'mode': _$Enum$QueryModeEnumMap[instance.mode],
      'not': instance.not?.toJson(),
    };

Input$StringNullableListFilter _$Input$StringNullableListFilterFromJson(
        Map<String, dynamic> json) =>
    Input$StringNullableListFilter(
      equals:
          (json['equals'] as List<dynamic>?)?.map((e) => e as String?).toList(),
      has: json['has'] as String?,
      hasEvery: (json['hasEvery'] as List<dynamic>?)
          ?.map((e) => e as String?)
          .toList(),
      hasSome: (json['hasSome'] as List<dynamic>?)
          ?.map((e) => e as String?)
          .toList(),
      isEmpty: json['isEmpty'] as bool?,
    );

Map<String, dynamic> _$Input$StringNullableListFilterToJson(
        Input$StringNullableListFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'has': instance.has,
      'hasEvery': instance.hasEvery,
      'hasSome': instance.hasSome,
      'isEmpty': instance.isEmpty,
    };

Input$StringNullableWithAggregatesFilter
    _$Input$StringNullableWithAggregatesFilterFromJson(
            Map<String, dynamic> json) =>
        Input$StringNullableWithAggregatesFilter(
          equals: json['equals'] as String?,
          $in:
              (json['in'] as List<dynamic>?)?.map((e) => e as String?).toList(),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => e as String?)
              .toList(),
          lt: json['lt'] as String?,
          lte: json['lte'] as String?,
          gt: json['gt'] as String?,
          gte: json['gte'] as String?,
          contains: json['contains'] as String?,
          startsWith: json['startsWith'] as String?,
          endsWith: json['endsWith'] as String?,
          mode: $enumDecodeNullable(_$Enum$QueryModeEnumMap, json['mode'],
              unknownValue: Enum$QueryMode.$unknown),
          not: json['not'] == null
              ? null
              : Input$NestedStringNullableWithAggregatesFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
          $_count: json['_count'] == null
              ? null
              : Input$NestedIntNullableFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$NestedStringNullableFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$NestedStringNullableFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$StringNullableWithAggregatesFilterToJson(
        Input$StringNullableWithAggregatesFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'contains': instance.contains,
      'startsWith': instance.startsWith,
      'endsWith': instance.endsWith,
      'mode': _$Enum$QueryModeEnumMap[instance.mode],
      'not': instance.not?.toJson(),
      '_count': instance.$_count?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_max': instance.$_max?.toJson(),
    };

Input$StringWithAggregatesFilter _$Input$StringWithAggregatesFilterFromJson(
        Map<String, dynamic> json) =>
    Input$StringWithAggregatesFilter(
      equals: json['equals'] as String?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as String?).toList(),
      notIn:
          (json['notIn'] as List<dynamic>?)?.map((e) => e as String?).toList(),
      lt: json['lt'] as String?,
      lte: json['lte'] as String?,
      gt: json['gt'] as String?,
      gte: json['gte'] as String?,
      contains: json['contains'] as String?,
      startsWith: json['startsWith'] as String?,
      endsWith: json['endsWith'] as String?,
      mode: $enumDecodeNullable(_$Enum$QueryModeEnumMap, json['mode'],
          unknownValue: Enum$QueryMode.$unknown),
      not: json['not'] == null
          ? null
          : Input$NestedStringWithAggregatesFilter.fromJson(
              json['not'] as Map<String, dynamic>),
      $_count: json['_count'] == null
          ? null
          : Input$NestedIntFilter.fromJson(
              json['_count'] as Map<String, dynamic>),
      $_min: json['_min'] == null
          ? null
          : Input$NestedStringFilter.fromJson(
              json['_min'] as Map<String, dynamic>),
      $_max: json['_max'] == null
          ? null
          : Input$NestedStringFilter.fromJson(
              json['_max'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$StringWithAggregatesFilterToJson(
        Input$StringWithAggregatesFilter instance) =>
    <String, dynamic>{
      'equals': instance.equals,
      'in': instance.$in,
      'notIn': instance.notIn,
      'lt': instance.lt,
      'lte': instance.lte,
      'gt': instance.gt,
      'gte': instance.gte,
      'contains': instance.contains,
      'startsWith': instance.startsWith,
      'endsWith': instance.endsWith,
      'mode': _$Enum$QueryModeEnumMap[instance.mode],
      'not': instance.not?.toJson(),
      '_count': instance.$_count?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_max': instance.$_max?.toJson(),
    };

Input$UserAvgOrderByAggregateInput _$Input$UserAvgOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    Input$UserAvgOrderByAggregateInput(
      balance: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['balance'],
          unknownValue: Enum$SortOrder.$unknown),
    );

Map<String, dynamic> _$Input$UserAvgOrderByAggregateInputToJson(
        Input$UserAvgOrderByAggregateInput instance) =>
    <String, dynamic>{
      'balance': _$Enum$SortOrderEnumMap[instance.balance],
    };

Input$UserCountOrderByAggregateInput
    _$Input$UserCountOrderByAggregateInputFromJson(Map<String, dynamic> json) =>
        Input$UserCountOrderByAggregateInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          email: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['email'],
              unknownValue: Enum$SortOrder.$unknown),
          phoneNumber: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['phoneNumber'],
              unknownValue: Enum$SortOrder.$unknown),
          address: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['address'],
              unknownValue: Enum$SortOrder.$unknown),
          profilePicturePath: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['profilePicturePath'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          nisn: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['nisn'],
              unknownValue: Enum$SortOrder.$unknown),
          nrg: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['nrg'],
              unknownValue: Enum$SortOrder.$unknown),
          verifykey: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['verifykey'],
              unknownValue: Enum$SortOrder.$unknown),
          verifyType: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['verifyType'],
              unknownValue: Enum$SortOrder.$unknown),
          provinceId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['provinceId'],
              unknownValue: Enum$SortOrder.$unknown),
          regencyId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['regencyId'],
              unknownValue: Enum$SortOrder.$unknown),
          isAdmin: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['isAdmin'],
              unknownValue: Enum$SortOrder.$unknown),
          isBimbel: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['isBimbel'],
              unknownValue: Enum$SortOrder.$unknown),
          role: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['role'],
              unknownValue: Enum$SortOrder.$unknown),
          balance: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['balance'],
              unknownValue: Enum$SortOrder.$unknown),
          emailVerifiedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['emailVerifiedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          phoneNumberVerifiedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['phoneNumberVerifiedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          bimbelApprovedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['bimbelApprovedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          identityNumberVerifiedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['identityNumberVerifiedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          schoolId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['schoolId'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$UserCountOrderByAggregateInputToJson(
        Input$UserCountOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'email': _$Enum$SortOrderEnumMap[instance.email],
      'phoneNumber': _$Enum$SortOrderEnumMap[instance.phoneNumber],
      'address': _$Enum$SortOrderEnumMap[instance.address],
      'profilePicturePath':
          _$Enum$SortOrderEnumMap[instance.profilePicturePath],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      'nisn': _$Enum$SortOrderEnumMap[instance.nisn],
      'nrg': _$Enum$SortOrderEnumMap[instance.nrg],
      'verifykey': _$Enum$SortOrderEnumMap[instance.verifykey],
      'verifyType': _$Enum$SortOrderEnumMap[instance.verifyType],
      'provinceId': _$Enum$SortOrderEnumMap[instance.provinceId],
      'regencyId': _$Enum$SortOrderEnumMap[instance.regencyId],
      'isAdmin': _$Enum$SortOrderEnumMap[instance.isAdmin],
      'isBimbel': _$Enum$SortOrderEnumMap[instance.isBimbel],
      'role': _$Enum$SortOrderEnumMap[instance.role],
      'balance': _$Enum$SortOrderEnumMap[instance.balance],
      'emailVerifiedAt': _$Enum$SortOrderEnumMap[instance.emailVerifiedAt],
      'phoneNumberVerifiedAt':
          _$Enum$SortOrderEnumMap[instance.phoneNumberVerifiedAt],
      'bimbelApprovedAt': _$Enum$SortOrderEnumMap[instance.bimbelApprovedAt],
      'identityNumberVerifiedAt':
          _$Enum$SortOrderEnumMap[instance.identityNumberVerifiedAt],
      'schoolId': _$Enum$SortOrderEnumMap[instance.schoolId],
    };

Input$UserCreateInput _$Input$UserCreateInputFromJson(
        Map<String, dynamic> json) =>
    Input$UserCreateInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      email: json['email'] as String,
      phoneNumber: json['phoneNumber'] as String,
      address: json['address'] as String?,
      profilePicturePath: json['profilePicturePath'] as String?,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
      nisn: json['nisn'] as String?,
      nrg: json['nrg'] as String?,
      verifykey: json['verifykey'] as String?,
      verifyType: $enumDecodeNullable(
          _$Enum$VerifyTypeEnumMap, json['verifyType'],
          unknownValue: Enum$VerifyType.$unknown),
      province: Input$ProvinceCreateNestedOneWithoutUsersInput.fromJson(
          json['province'] as Map<String, dynamic>),
      regency: Input$RegencyCreateNestedOneWithoutUsersInput.fromJson(
          json['regency'] as Map<String, dynamic>),
      isAdmin: json['isAdmin'] as bool?,
      isBimbel: json['isBimbel'] as bool?,
      role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
          unknownValue: Enum$Roles.$unknown),
      balance: (json['balance'] as num?)?.toDouble(),
      emailVerifiedAt: json['emailVerifiedAt'] as String?,
      phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
      bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
      identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
      identityFiles: json['identityFiles'] == null
          ? null
          : Input$IdentityFileCreateNestedManyWithoutUserInput.fromJson(
              json['identityFiles'] as Map<String, dynamic>),
      questions: json['questions'] == null
          ? null
          : Input$QuestionCreateNestedManyWithoutUserInput.fromJson(
              json['questions'] as Map<String, dynamic>),
      examinations: json['examinations'] == null
          ? null
          : Input$ExamCreateNestedManyWithoutUserInput.fromJson(
              json['examinations'] as Map<String, dynamic>),
      examsessions: json['examsessions'] == null
          ? null
          : Input$ExamSessionCreateNestedManyWithoutUserInput.fromJson(
              json['examsessions'] as Map<String, dynamic>),
      myChats: json['myChats'] == null
          ? null
          : Input$ChatCreateNestedManyWithoutFromInput.fromJson(
              json['myChats'] as Map<String, dynamic>),
      classrooms: json['classrooms'] == null
          ? null
          : Input$ClassroomCreateNestedManyWithoutUserInput.fromJson(
              json['classrooms'] as Map<String, dynamic>),
      classroomStudents: json['classroomStudents'] == null
          ? null
          : Input$ClassroomStudentCreateNestedManyWithoutUserInput.fromJson(
              json['classroomStudents'] as Map<String, dynamic>),
      notifications: json['notifications'] == null
          ? null
          : Input$NotificationCreateNestedManyWithoutUserInput.fromJson(
              json['notifications'] as Map<String, dynamic>),
      schoolStaffs: json['schoolStaffs'] == null
          ? null
          : Input$SchoolStaffCreateNestedManyWithoutUserInput.fromJson(
              json['schoolStaffs'] as Map<String, dynamic>),
      school: json['school'] == null
          ? null
          : Input$SchoolCreateNestedOneWithoutStudentsInput.fromJson(
              json['school'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$UserCreateInputToJson(
        Input$UserCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'province': instance.province.toJson(),
      'regency': instance.regency.toJson(),
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'school': instance.school?.toJson(),
    };

Input$UserCreateManyInput _$Input$UserCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    Input$UserCreateManyInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      email: json['email'] as String,
      phoneNumber: json['phoneNumber'] as String,
      address: json['address'] as String?,
      profilePicturePath: json['profilePicturePath'] as String?,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
      nisn: json['nisn'] as String?,
      nrg: json['nrg'] as String?,
      verifykey: json['verifykey'] as String?,
      verifyType: $enumDecodeNullable(
          _$Enum$VerifyTypeEnumMap, json['verifyType'],
          unknownValue: Enum$VerifyType.$unknown),
      provinceId: json['provinceId'] as String,
      regencyId: json['regencyId'] as String,
      isAdmin: json['isAdmin'] as bool?,
      isBimbel: json['isBimbel'] as bool?,
      role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
          unknownValue: Enum$Roles.$unknown),
      balance: (json['balance'] as num?)?.toDouble(),
      emailVerifiedAt: json['emailVerifiedAt'] as String?,
      phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
      bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
      identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
      schoolId: json['schoolId'] as String?,
    );

Map<String, dynamic> _$Input$UserCreateManyInputToJson(
        Input$UserCreateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'provinceId': instance.provinceId,
      'regencyId': instance.regencyId,
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'schoolId': instance.schoolId,
    };

Input$UserCreateManyProvinceInput _$Input$UserCreateManyProvinceInputFromJson(
        Map<String, dynamic> json) =>
    Input$UserCreateManyProvinceInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      email: json['email'] as String,
      phoneNumber: json['phoneNumber'] as String,
      address: json['address'] as String?,
      profilePicturePath: json['profilePicturePath'] as String?,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
      nisn: json['nisn'] as String?,
      nrg: json['nrg'] as String?,
      verifykey: json['verifykey'] as String?,
      verifyType: $enumDecodeNullable(
          _$Enum$VerifyTypeEnumMap, json['verifyType'],
          unknownValue: Enum$VerifyType.$unknown),
      regencyId: json['regencyId'] as String,
      isAdmin: json['isAdmin'] as bool?,
      isBimbel: json['isBimbel'] as bool?,
      role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
          unknownValue: Enum$Roles.$unknown),
      balance: (json['balance'] as num?)?.toDouble(),
      emailVerifiedAt: json['emailVerifiedAt'] as String?,
      phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
      bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
      identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
      schoolId: json['schoolId'] as String?,
    );

Map<String, dynamic> _$Input$UserCreateManyProvinceInputToJson(
        Input$UserCreateManyProvinceInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'regencyId': instance.regencyId,
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'schoolId': instance.schoolId,
    };

Input$UserCreateManyProvinceInputEnvelope
    _$Input$UserCreateManyProvinceInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateManyProvinceInputEnvelope(
          data: Input$UserCreateManyProvinceInput.fromJson(
              json['data'] as Map<String, dynamic>),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$Input$UserCreateManyProvinceInputEnvelopeToJson(
        Input$UserCreateManyProvinceInputEnvelope instance) =>
    <String, dynamic>{
      'data': instance.data.toJson(),
      'skipDuplicates': instance.skipDuplicates,
    };

Input$UserCreateManyRegencyInput _$Input$UserCreateManyRegencyInputFromJson(
        Map<String, dynamic> json) =>
    Input$UserCreateManyRegencyInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      email: json['email'] as String,
      phoneNumber: json['phoneNumber'] as String,
      address: json['address'] as String?,
      profilePicturePath: json['profilePicturePath'] as String?,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
      nisn: json['nisn'] as String?,
      nrg: json['nrg'] as String?,
      verifykey: json['verifykey'] as String?,
      verifyType: $enumDecodeNullable(
          _$Enum$VerifyTypeEnumMap, json['verifyType'],
          unknownValue: Enum$VerifyType.$unknown),
      provinceId: json['provinceId'] as String,
      isAdmin: json['isAdmin'] as bool?,
      isBimbel: json['isBimbel'] as bool?,
      role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
          unknownValue: Enum$Roles.$unknown),
      balance: (json['balance'] as num?)?.toDouble(),
      emailVerifiedAt: json['emailVerifiedAt'] as String?,
      phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
      bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
      identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
      schoolId: json['schoolId'] as String?,
    );

Map<String, dynamic> _$Input$UserCreateManyRegencyInputToJson(
        Input$UserCreateManyRegencyInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'provinceId': instance.provinceId,
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'schoolId': instance.schoolId,
    };

Input$UserCreateManyRegencyInputEnvelope
    _$Input$UserCreateManyRegencyInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateManyRegencyInputEnvelope(
          data: Input$UserCreateManyRegencyInput.fromJson(
              json['data'] as Map<String, dynamic>),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$Input$UserCreateManyRegencyInputEnvelopeToJson(
        Input$UserCreateManyRegencyInputEnvelope instance) =>
    <String, dynamic>{
      'data': instance.data.toJson(),
      'skipDuplicates': instance.skipDuplicates,
    };

Input$UserCreateManySchoolInput _$Input$UserCreateManySchoolInputFromJson(
        Map<String, dynamic> json) =>
    Input$UserCreateManySchoolInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      email: json['email'] as String,
      phoneNumber: json['phoneNumber'] as String,
      address: json['address'] as String?,
      profilePicturePath: json['profilePicturePath'] as String?,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
      nisn: json['nisn'] as String?,
      nrg: json['nrg'] as String?,
      verifykey: json['verifykey'] as String?,
      verifyType: $enumDecodeNullable(
          _$Enum$VerifyTypeEnumMap, json['verifyType'],
          unknownValue: Enum$VerifyType.$unknown),
      provinceId: json['provinceId'] as String,
      regencyId: json['regencyId'] as String,
      isAdmin: json['isAdmin'] as bool?,
      isBimbel: json['isBimbel'] as bool?,
      role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
          unknownValue: Enum$Roles.$unknown),
      balance: (json['balance'] as num?)?.toDouble(),
      emailVerifiedAt: json['emailVerifiedAt'] as String?,
      phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
      bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
      identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
    );

Map<String, dynamic> _$Input$UserCreateManySchoolInputToJson(
        Input$UserCreateManySchoolInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'provinceId': instance.provinceId,
      'regencyId': instance.regencyId,
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
    };

Input$UserCreateManySchoolInputEnvelope
    _$Input$UserCreateManySchoolInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateManySchoolInputEnvelope(
          data: Input$UserCreateManySchoolInput.fromJson(
              json['data'] as Map<String, dynamic>),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$Input$UserCreateManySchoolInputEnvelopeToJson(
        Input$UserCreateManySchoolInputEnvelope instance) =>
    <String, dynamic>{
      'data': instance.data.toJson(),
      'skipDuplicates': instance.skipDuplicates,
    };

Input$UserCreateNestedManyWithoutProvinceInput
    _$Input$UserCreateNestedManyWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateNestedManyWithoutProvinceInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserCreateWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserCreateOrConnectWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$UserCreateManyProvinceInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$UserCreateNestedManyWithoutProvinceInputToJson(
        Input$UserCreateNestedManyWithoutProvinceInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$UserCreateNestedManyWithoutRegencyInput
    _$Input$UserCreateNestedManyWithoutRegencyInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateNestedManyWithoutRegencyInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserCreateWithoutRegencyInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserCreateOrConnectWithoutRegencyInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$UserCreateManyRegencyInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$UserCreateNestedManyWithoutRegencyInputToJson(
        Input$UserCreateNestedManyWithoutRegencyInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$UserCreateNestedManyWithoutSchoolInput
    _$Input$UserCreateNestedManyWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateNestedManyWithoutSchoolInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserCreateWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserCreateOrConnectWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$UserCreateManySchoolInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$UserCreateNestedManyWithoutSchoolInputToJson(
        Input$UserCreateNestedManyWithoutSchoolInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
    };

Input$UserCreateNestedOneWithoutClassroomsInput
    _$Input$UserCreateNestedOneWithoutClassroomsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateNestedOneWithoutClassroomsInput(
          create: json['create'] == null
              ? null
              : Input$UserUncheckedCreateWithoutClassroomsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$UserCreateOrConnectWithoutClassroomsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$UserWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateNestedOneWithoutClassroomsInputToJson(
        Input$UserCreateNestedOneWithoutClassroomsInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'connect': instance.connect?.toJson(),
    };

Input$UserCreateNestedOneWithoutClassroomStudentsInput
    _$Input$UserCreateNestedOneWithoutClassroomStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateNestedOneWithoutClassroomStudentsInput(
          create: json['create'] == null
              ? null
              : Input$UserUncheckedCreateWithoutClassroomStudentsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$UserCreateOrConnectWithoutClassroomStudentsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$UserWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$UserCreateNestedOneWithoutClassroomStudentsInputToJson(
            Input$UserCreateNestedOneWithoutClassroomStudentsInput instance) =>
        <String, dynamic>{
          'create': instance.create?.toJson(),
          'connectOrCreate': instance.connectOrCreate?.toJson(),
          'connect': instance.connect?.toJson(),
        };

Input$UserCreateNestedOneWithoutExaminationsInput
    _$Input$UserCreateNestedOneWithoutExaminationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateNestedOneWithoutExaminationsInput(
          create: json['create'] == null
              ? null
              : Input$UserUncheckedCreateWithoutExaminationsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$UserCreateOrConnectWithoutExaminationsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$UserWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateNestedOneWithoutExaminationsInputToJson(
        Input$UserCreateNestedOneWithoutExaminationsInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'connect': instance.connect?.toJson(),
    };

Input$UserCreateNestedOneWithoutExamsessionsInput
    _$Input$UserCreateNestedOneWithoutExamsessionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateNestedOneWithoutExamsessionsInput(
          create: json['create'] == null
              ? null
              : Input$UserUncheckedCreateWithoutExamsessionsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$UserCreateOrConnectWithoutExamsessionsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$UserWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateNestedOneWithoutExamsessionsInputToJson(
        Input$UserCreateNestedOneWithoutExamsessionsInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'connect': instance.connect?.toJson(),
    };

Input$UserCreateNestedOneWithoutIdentityFilesInput
    _$Input$UserCreateNestedOneWithoutIdentityFilesInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateNestedOneWithoutIdentityFilesInput(
          create: json['create'] == null
              ? null
              : Input$UserUncheckedCreateWithoutIdentityFilesInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$UserCreateOrConnectWithoutIdentityFilesInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$UserWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateNestedOneWithoutIdentityFilesInputToJson(
        Input$UserCreateNestedOneWithoutIdentityFilesInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'connect': instance.connect?.toJson(),
    };

Input$UserCreateNestedOneWithoutMyChatsInput
    _$Input$UserCreateNestedOneWithoutMyChatsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateNestedOneWithoutMyChatsInput(
          create: json['create'] == null
              ? null
              : Input$UserUncheckedCreateWithoutMyChatsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$UserCreateOrConnectWithoutMyChatsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$UserWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateNestedOneWithoutMyChatsInputToJson(
        Input$UserCreateNestedOneWithoutMyChatsInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'connect': instance.connect?.toJson(),
    };

Input$UserCreateNestedOneWithoutNotificationsInput
    _$Input$UserCreateNestedOneWithoutNotificationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateNestedOneWithoutNotificationsInput(
          create: json['create'] == null
              ? null
              : Input$UserUncheckedCreateWithoutNotificationsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$UserCreateOrConnectWithoutNotificationsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$UserWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateNestedOneWithoutNotificationsInputToJson(
        Input$UserCreateNestedOneWithoutNotificationsInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'connect': instance.connect?.toJson(),
    };

Input$UserCreateNestedOneWithoutQuestionsInput
    _$Input$UserCreateNestedOneWithoutQuestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateNestedOneWithoutQuestionsInput(
          create: json['create'] == null
              ? null
              : Input$UserUncheckedCreateWithoutQuestionsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$UserCreateOrConnectWithoutQuestionsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$UserWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateNestedOneWithoutQuestionsInputToJson(
        Input$UserCreateNestedOneWithoutQuestionsInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'connect': instance.connect?.toJson(),
    };

Input$UserCreateNestedOneWithoutSchoolStaffsInput
    _$Input$UserCreateNestedOneWithoutSchoolStaffsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateNestedOneWithoutSchoolStaffsInput(
          create: json['create'] == null
              ? null
              : Input$UserUncheckedCreateWithoutSchoolStaffsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$UserCreateOrConnectWithoutSchoolStaffsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$UserWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateNestedOneWithoutSchoolStaffsInputToJson(
        Input$UserCreateNestedOneWithoutSchoolStaffsInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'connect': instance.connect?.toJson(),
    };

Input$UserCreateOrConnectWithoutClassroomsInput
    _$Input$UserCreateOrConnectWithoutClassroomsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateOrConnectWithoutClassroomsInput(
          where: Input$UserWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$UserUncheckedCreateWithoutClassroomsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateOrConnectWithoutClassroomsInputToJson(
        Input$UserCreateOrConnectWithoutClassroomsInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$UserCreateOrConnectWithoutClassroomStudentsInput
    _$Input$UserCreateOrConnectWithoutClassroomStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateOrConnectWithoutClassroomStudentsInput(
          where: Input$UserWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create:
              Input$UserUncheckedCreateWithoutClassroomStudentsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$UserCreateOrConnectWithoutClassroomStudentsInputToJson(
            Input$UserCreateOrConnectWithoutClassroomStudentsInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'create': instance.create.toJson(),
        };

Input$UserCreateOrConnectWithoutExaminationsInput
    _$Input$UserCreateOrConnectWithoutExaminationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateOrConnectWithoutExaminationsInput(
          where: Input$UserWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$UserUncheckedCreateWithoutExaminationsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateOrConnectWithoutExaminationsInputToJson(
        Input$UserCreateOrConnectWithoutExaminationsInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$UserCreateOrConnectWithoutExamsessionsInput
    _$Input$UserCreateOrConnectWithoutExamsessionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateOrConnectWithoutExamsessionsInput(
          where: Input$UserWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$UserUncheckedCreateWithoutExamsessionsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateOrConnectWithoutExamsessionsInputToJson(
        Input$UserCreateOrConnectWithoutExamsessionsInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$UserCreateOrConnectWithoutIdentityFilesInput
    _$Input$UserCreateOrConnectWithoutIdentityFilesInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateOrConnectWithoutIdentityFilesInput(
          where: Input$UserWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$UserUncheckedCreateWithoutIdentityFilesInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateOrConnectWithoutIdentityFilesInputToJson(
        Input$UserCreateOrConnectWithoutIdentityFilesInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$UserCreateOrConnectWithoutMyChatsInput
    _$Input$UserCreateOrConnectWithoutMyChatsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateOrConnectWithoutMyChatsInput(
          where: Input$UserWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$UserUncheckedCreateWithoutMyChatsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateOrConnectWithoutMyChatsInputToJson(
        Input$UserCreateOrConnectWithoutMyChatsInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$UserCreateOrConnectWithoutNotificationsInput
    _$Input$UserCreateOrConnectWithoutNotificationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateOrConnectWithoutNotificationsInput(
          where: Input$UserWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$UserUncheckedCreateWithoutNotificationsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateOrConnectWithoutNotificationsInputToJson(
        Input$UserCreateOrConnectWithoutNotificationsInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$UserCreateOrConnectWithoutProvinceInput
    _$Input$UserCreateOrConnectWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateOrConnectWithoutProvinceInput(
          where: Input$UserWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$UserUncheckedCreateWithoutProvinceInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateOrConnectWithoutProvinceInputToJson(
        Input$UserCreateOrConnectWithoutProvinceInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$UserCreateOrConnectWithoutQuestionsInput
    _$Input$UserCreateOrConnectWithoutQuestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateOrConnectWithoutQuestionsInput(
          where: Input$UserWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$UserUncheckedCreateWithoutQuestionsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateOrConnectWithoutQuestionsInputToJson(
        Input$UserCreateOrConnectWithoutQuestionsInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$UserCreateOrConnectWithoutRegencyInput
    _$Input$UserCreateOrConnectWithoutRegencyInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateOrConnectWithoutRegencyInput(
          where: Input$UserWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$UserUncheckedCreateWithoutRegencyInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateOrConnectWithoutRegencyInputToJson(
        Input$UserCreateOrConnectWithoutRegencyInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$UserCreateOrConnectWithoutSchoolInput
    _$Input$UserCreateOrConnectWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateOrConnectWithoutSchoolInput(
          where: Input$UserWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$UserUncheckedCreateWithoutSchoolInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateOrConnectWithoutSchoolInputToJson(
        Input$UserCreateOrConnectWithoutSchoolInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$UserCreateOrConnectWithoutSchoolStaffsInput
    _$Input$UserCreateOrConnectWithoutSchoolStaffsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateOrConnectWithoutSchoolStaffsInput(
          where: Input$UserWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: Input$UserUncheckedCreateWithoutSchoolStaffsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateOrConnectWithoutSchoolStaffsInputToJson(
        Input$UserCreateOrConnectWithoutSchoolStaffsInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

Input$UserCreateWithoutClassroomsInput
    _$Input$UserCreateWithoutClassroomsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateWithoutClassroomsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          email: json['email'] as String,
          phoneNumber: json['phoneNumber'] as String,
          address: json['address'] as String?,
          profilePicturePath: json['profilePicturePath'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          nisn: json['nisn'] as String?,
          nrg: json['nrg'] as String?,
          verifykey: json['verifykey'] as String?,
          verifyType: $enumDecodeNullable(
              _$Enum$VerifyTypeEnumMap, json['verifyType'],
              unknownValue: Enum$VerifyType.$unknown),
          province: Input$ProvinceCreateNestedOneWithoutUsersInput.fromJson(
              json['province'] as Map<String, dynamic>),
          regency: Input$RegencyCreateNestedOneWithoutUsersInput.fromJson(
              json['regency'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] as bool?,
          isBimbel: json['isBimbel'] as bool?,
          role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
              unknownValue: Enum$Roles.$unknown),
          balance: (json['balance'] as num?)?.toDouble(),
          emailVerifiedAt: json['emailVerifiedAt'] as String?,
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
          bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileCreateNestedManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionCreateNestedManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamCreateNestedManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionCreateNestedManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatCreateNestedManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentCreateNestedManyWithoutUserInput.fromJson(
                  json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationCreateNestedManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffCreateNestedManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          school: json['school'] == null
              ? null
              : Input$SchoolCreateNestedOneWithoutStudentsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateWithoutClassroomsInputToJson(
        Input$UserCreateWithoutClassroomsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'province': instance.province.toJson(),
      'regency': instance.regency.toJson(),
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'school': instance.school?.toJson(),
    };

Input$UserCreateWithoutClassroomStudentsInput
    _$Input$UserCreateWithoutClassroomStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateWithoutClassroomStudentsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          email: json['email'] as String,
          phoneNumber: json['phoneNumber'] as String,
          address: json['address'] as String?,
          profilePicturePath: json['profilePicturePath'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          nisn: json['nisn'] as String?,
          nrg: json['nrg'] as String?,
          verifykey: json['verifykey'] as String?,
          verifyType: $enumDecodeNullable(
              _$Enum$VerifyTypeEnumMap, json['verifyType'],
              unknownValue: Enum$VerifyType.$unknown),
          province: Input$ProvinceCreateNestedOneWithoutUsersInput.fromJson(
              json['province'] as Map<String, dynamic>),
          regency: Input$RegencyCreateNestedOneWithoutUsersInput.fromJson(
              json['regency'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] as bool?,
          isBimbel: json['isBimbel'] as bool?,
          role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
              unknownValue: Enum$Roles.$unknown),
          balance: (json['balance'] as num?)?.toDouble(),
          emailVerifiedAt: json['emailVerifiedAt'] as String?,
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
          bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileCreateNestedManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionCreateNestedManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamCreateNestedManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionCreateNestedManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatCreateNestedManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomCreateNestedManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationCreateNestedManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffCreateNestedManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          school: json['school'] == null
              ? null
              : Input$SchoolCreateNestedOneWithoutStudentsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateWithoutClassroomStudentsInputToJson(
        Input$UserCreateWithoutClassroomStudentsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'province': instance.province.toJson(),
      'regency': instance.regency.toJson(),
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'school': instance.school?.toJson(),
    };

Input$UserCreateWithoutExaminationsInput
    _$Input$UserCreateWithoutExaminationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateWithoutExaminationsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          email: json['email'] as String,
          phoneNumber: json['phoneNumber'] as String,
          address: json['address'] as String?,
          profilePicturePath: json['profilePicturePath'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          nisn: json['nisn'] as String?,
          nrg: json['nrg'] as String?,
          verifykey: json['verifykey'] as String?,
          verifyType: $enumDecodeNullable(
              _$Enum$VerifyTypeEnumMap, json['verifyType'],
              unknownValue: Enum$VerifyType.$unknown),
          province: Input$ProvinceCreateNestedOneWithoutUsersInput.fromJson(
              json['province'] as Map<String, dynamic>),
          regency: Input$RegencyCreateNestedOneWithoutUsersInput.fromJson(
              json['regency'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] as bool?,
          isBimbel: json['isBimbel'] as bool?,
          role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
              unknownValue: Enum$Roles.$unknown),
          balance: (json['balance'] as num?)?.toDouble(),
          emailVerifiedAt: json['emailVerifiedAt'] as String?,
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
          bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileCreateNestedManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionCreateNestedManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionCreateNestedManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatCreateNestedManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomCreateNestedManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentCreateNestedManyWithoutUserInput.fromJson(
                  json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationCreateNestedManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffCreateNestedManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          school: json['school'] == null
              ? null
              : Input$SchoolCreateNestedOneWithoutStudentsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateWithoutExaminationsInputToJson(
        Input$UserCreateWithoutExaminationsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'province': instance.province.toJson(),
      'regency': instance.regency.toJson(),
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'school': instance.school?.toJson(),
    };

Input$UserCreateWithoutExamsessionsInput
    _$Input$UserCreateWithoutExamsessionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateWithoutExamsessionsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          email: json['email'] as String,
          phoneNumber: json['phoneNumber'] as String,
          address: json['address'] as String?,
          profilePicturePath: json['profilePicturePath'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          nisn: json['nisn'] as String?,
          nrg: json['nrg'] as String?,
          verifykey: json['verifykey'] as String?,
          verifyType: $enumDecodeNullable(
              _$Enum$VerifyTypeEnumMap, json['verifyType'],
              unknownValue: Enum$VerifyType.$unknown),
          province: Input$ProvinceCreateNestedOneWithoutUsersInput.fromJson(
              json['province'] as Map<String, dynamic>),
          regency: Input$RegencyCreateNestedOneWithoutUsersInput.fromJson(
              json['regency'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] as bool?,
          isBimbel: json['isBimbel'] as bool?,
          role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
              unknownValue: Enum$Roles.$unknown),
          balance: (json['balance'] as num?)?.toDouble(),
          emailVerifiedAt: json['emailVerifiedAt'] as String?,
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
          bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileCreateNestedManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionCreateNestedManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamCreateNestedManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatCreateNestedManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomCreateNestedManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentCreateNestedManyWithoutUserInput.fromJson(
                  json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationCreateNestedManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffCreateNestedManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          school: json['school'] == null
              ? null
              : Input$SchoolCreateNestedOneWithoutStudentsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateWithoutExamsessionsInputToJson(
        Input$UserCreateWithoutExamsessionsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'province': instance.province.toJson(),
      'regency': instance.regency.toJson(),
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'school': instance.school?.toJson(),
    };

Input$UserCreateWithoutIdentityFilesInput
    _$Input$UserCreateWithoutIdentityFilesInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateWithoutIdentityFilesInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          email: json['email'] as String,
          phoneNumber: json['phoneNumber'] as String,
          address: json['address'] as String?,
          profilePicturePath: json['profilePicturePath'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          nisn: json['nisn'] as String?,
          nrg: json['nrg'] as String?,
          verifykey: json['verifykey'] as String?,
          verifyType: $enumDecodeNullable(
              _$Enum$VerifyTypeEnumMap, json['verifyType'],
              unknownValue: Enum$VerifyType.$unknown),
          province: Input$ProvinceCreateNestedOneWithoutUsersInput.fromJson(
              json['province'] as Map<String, dynamic>),
          regency: Input$RegencyCreateNestedOneWithoutUsersInput.fromJson(
              json['regency'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] as bool?,
          isBimbel: json['isBimbel'] as bool?,
          role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
              unknownValue: Enum$Roles.$unknown),
          balance: (json['balance'] as num?)?.toDouble(),
          emailVerifiedAt: json['emailVerifiedAt'] as String?,
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
          bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
          questions: json['questions'] == null
              ? null
              : Input$QuestionCreateNestedManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamCreateNestedManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionCreateNestedManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatCreateNestedManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomCreateNestedManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentCreateNestedManyWithoutUserInput.fromJson(
                  json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationCreateNestedManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffCreateNestedManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          school: json['school'] == null
              ? null
              : Input$SchoolCreateNestedOneWithoutStudentsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateWithoutIdentityFilesInputToJson(
        Input$UserCreateWithoutIdentityFilesInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'province': instance.province.toJson(),
      'regency': instance.regency.toJson(),
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'school': instance.school?.toJson(),
    };

Input$UserCreateWithoutMyChatsInput
    _$Input$UserCreateWithoutMyChatsInputFromJson(Map<String, dynamic> json) =>
        Input$UserCreateWithoutMyChatsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          email: json['email'] as String,
          phoneNumber: json['phoneNumber'] as String,
          address: json['address'] as String?,
          profilePicturePath: json['profilePicturePath'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          nisn: json['nisn'] as String?,
          nrg: json['nrg'] as String?,
          verifykey: json['verifykey'] as String?,
          verifyType: $enumDecodeNullable(
              _$Enum$VerifyTypeEnumMap, json['verifyType'],
              unknownValue: Enum$VerifyType.$unknown),
          province: Input$ProvinceCreateNestedOneWithoutUsersInput.fromJson(
              json['province'] as Map<String, dynamic>),
          regency: Input$RegencyCreateNestedOneWithoutUsersInput.fromJson(
              json['regency'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] as bool?,
          isBimbel: json['isBimbel'] as bool?,
          role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
              unknownValue: Enum$Roles.$unknown),
          balance: (json['balance'] as num?)?.toDouble(),
          emailVerifiedAt: json['emailVerifiedAt'] as String?,
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
          bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileCreateNestedManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionCreateNestedManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamCreateNestedManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionCreateNestedManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomCreateNestedManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentCreateNestedManyWithoutUserInput.fromJson(
                  json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationCreateNestedManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffCreateNestedManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          school: json['school'] == null
              ? null
              : Input$SchoolCreateNestedOneWithoutStudentsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateWithoutMyChatsInputToJson(
        Input$UserCreateWithoutMyChatsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'province': instance.province.toJson(),
      'regency': instance.regency.toJson(),
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'school': instance.school?.toJson(),
    };

Input$UserCreateWithoutNotificationsInput
    _$Input$UserCreateWithoutNotificationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateWithoutNotificationsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          email: json['email'] as String,
          phoneNumber: json['phoneNumber'] as String,
          address: json['address'] as String?,
          profilePicturePath: json['profilePicturePath'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          nisn: json['nisn'] as String?,
          nrg: json['nrg'] as String?,
          verifykey: json['verifykey'] as String?,
          verifyType: $enumDecodeNullable(
              _$Enum$VerifyTypeEnumMap, json['verifyType'],
              unknownValue: Enum$VerifyType.$unknown),
          province: Input$ProvinceCreateNestedOneWithoutUsersInput.fromJson(
              json['province'] as Map<String, dynamic>),
          regency: Input$RegencyCreateNestedOneWithoutUsersInput.fromJson(
              json['regency'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] as bool?,
          isBimbel: json['isBimbel'] as bool?,
          role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
              unknownValue: Enum$Roles.$unknown),
          balance: (json['balance'] as num?)?.toDouble(),
          emailVerifiedAt: json['emailVerifiedAt'] as String?,
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
          bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileCreateNestedManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionCreateNestedManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamCreateNestedManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionCreateNestedManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatCreateNestedManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomCreateNestedManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentCreateNestedManyWithoutUserInput.fromJson(
                  json['classroomStudents'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffCreateNestedManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          school: json['school'] == null
              ? null
              : Input$SchoolCreateNestedOneWithoutStudentsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateWithoutNotificationsInputToJson(
        Input$UserCreateWithoutNotificationsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'province': instance.province.toJson(),
      'regency': instance.regency.toJson(),
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'school': instance.school?.toJson(),
    };

Input$UserCreateWithoutProvinceInput
    _$Input$UserCreateWithoutProvinceInputFromJson(Map<String, dynamic> json) =>
        Input$UserCreateWithoutProvinceInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          email: json['email'] as String,
          phoneNumber: json['phoneNumber'] as String,
          address: json['address'] as String?,
          profilePicturePath: json['profilePicturePath'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          nisn: json['nisn'] as String?,
          nrg: json['nrg'] as String?,
          verifykey: json['verifykey'] as String?,
          verifyType: $enumDecodeNullable(
              _$Enum$VerifyTypeEnumMap, json['verifyType'],
              unknownValue: Enum$VerifyType.$unknown),
          regency: Input$RegencyCreateNestedOneWithoutUsersInput.fromJson(
              json['regency'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] as bool?,
          isBimbel: json['isBimbel'] as bool?,
          role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
              unknownValue: Enum$Roles.$unknown),
          balance: (json['balance'] as num?)?.toDouble(),
          emailVerifiedAt: json['emailVerifiedAt'] as String?,
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
          bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileCreateNestedManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionCreateNestedManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamCreateNestedManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionCreateNestedManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatCreateNestedManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomCreateNestedManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentCreateNestedManyWithoutUserInput.fromJson(
                  json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationCreateNestedManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffCreateNestedManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          school: json['school'] == null
              ? null
              : Input$SchoolCreateNestedOneWithoutStudentsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateWithoutProvinceInputToJson(
        Input$UserCreateWithoutProvinceInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'regency': instance.regency.toJson(),
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'school': instance.school?.toJson(),
    };

Input$UserCreateWithoutQuestionsInput
    _$Input$UserCreateWithoutQuestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateWithoutQuestionsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          email: json['email'] as String,
          phoneNumber: json['phoneNumber'] as String,
          address: json['address'] as String?,
          profilePicturePath: json['profilePicturePath'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          nisn: json['nisn'] as String?,
          nrg: json['nrg'] as String?,
          verifykey: json['verifykey'] as String?,
          verifyType: $enumDecodeNullable(
              _$Enum$VerifyTypeEnumMap, json['verifyType'],
              unknownValue: Enum$VerifyType.$unknown),
          province: Input$ProvinceCreateNestedOneWithoutUsersInput.fromJson(
              json['province'] as Map<String, dynamic>),
          regency: Input$RegencyCreateNestedOneWithoutUsersInput.fromJson(
              json['regency'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] as bool?,
          isBimbel: json['isBimbel'] as bool?,
          role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
              unknownValue: Enum$Roles.$unknown),
          balance: (json['balance'] as num?)?.toDouble(),
          emailVerifiedAt: json['emailVerifiedAt'] as String?,
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
          bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileCreateNestedManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamCreateNestedManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionCreateNestedManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatCreateNestedManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomCreateNestedManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentCreateNestedManyWithoutUserInput.fromJson(
                  json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationCreateNestedManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffCreateNestedManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          school: json['school'] == null
              ? null
              : Input$SchoolCreateNestedOneWithoutStudentsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateWithoutQuestionsInputToJson(
        Input$UserCreateWithoutQuestionsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'province': instance.province.toJson(),
      'regency': instance.regency.toJson(),
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'identityFiles': instance.identityFiles?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'school': instance.school?.toJson(),
    };

Input$UserCreateWithoutRegencyInput
    _$Input$UserCreateWithoutRegencyInputFromJson(Map<String, dynamic> json) =>
        Input$UserCreateWithoutRegencyInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          email: json['email'] as String,
          phoneNumber: json['phoneNumber'] as String,
          address: json['address'] as String?,
          profilePicturePath: json['profilePicturePath'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          nisn: json['nisn'] as String?,
          nrg: json['nrg'] as String?,
          verifykey: json['verifykey'] as String?,
          verifyType: $enumDecodeNullable(
              _$Enum$VerifyTypeEnumMap, json['verifyType'],
              unknownValue: Enum$VerifyType.$unknown),
          province: Input$ProvinceCreateNestedOneWithoutUsersInput.fromJson(
              json['province'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] as bool?,
          isBimbel: json['isBimbel'] as bool?,
          role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
              unknownValue: Enum$Roles.$unknown),
          balance: (json['balance'] as num?)?.toDouble(),
          emailVerifiedAt: json['emailVerifiedAt'] as String?,
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
          bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileCreateNestedManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionCreateNestedManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamCreateNestedManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionCreateNestedManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatCreateNestedManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomCreateNestedManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentCreateNestedManyWithoutUserInput.fromJson(
                  json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationCreateNestedManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffCreateNestedManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          school: json['school'] == null
              ? null
              : Input$SchoolCreateNestedOneWithoutStudentsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateWithoutRegencyInputToJson(
        Input$UserCreateWithoutRegencyInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'province': instance.province.toJson(),
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'school': instance.school?.toJson(),
    };

Input$UserCreateWithoutSchoolInput _$Input$UserCreateWithoutSchoolInputFromJson(
        Map<String, dynamic> json) =>
    Input$UserCreateWithoutSchoolInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      email: json['email'] as String,
      phoneNumber: json['phoneNumber'] as String,
      address: json['address'] as String?,
      profilePicturePath: json['profilePicturePath'] as String?,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
      nisn: json['nisn'] as String?,
      nrg: json['nrg'] as String?,
      verifykey: json['verifykey'] as String?,
      verifyType: $enumDecodeNullable(
          _$Enum$VerifyTypeEnumMap, json['verifyType'],
          unknownValue: Enum$VerifyType.$unknown),
      province: Input$ProvinceCreateNestedOneWithoutUsersInput.fromJson(
          json['province'] as Map<String, dynamic>),
      regency: Input$RegencyCreateNestedOneWithoutUsersInput.fromJson(
          json['regency'] as Map<String, dynamic>),
      isAdmin: json['isAdmin'] as bool?,
      isBimbel: json['isBimbel'] as bool?,
      role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
          unknownValue: Enum$Roles.$unknown),
      balance: (json['balance'] as num?)?.toDouble(),
      emailVerifiedAt: json['emailVerifiedAt'] as String?,
      phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
      bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
      identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
      identityFiles: json['identityFiles'] == null
          ? null
          : Input$IdentityFileCreateNestedManyWithoutUserInput.fromJson(
              json['identityFiles'] as Map<String, dynamic>),
      questions: json['questions'] == null
          ? null
          : Input$QuestionCreateNestedManyWithoutUserInput.fromJson(
              json['questions'] as Map<String, dynamic>),
      examinations: json['examinations'] == null
          ? null
          : Input$ExamCreateNestedManyWithoutUserInput.fromJson(
              json['examinations'] as Map<String, dynamic>),
      examsessions: json['examsessions'] == null
          ? null
          : Input$ExamSessionCreateNestedManyWithoutUserInput.fromJson(
              json['examsessions'] as Map<String, dynamic>),
      myChats: json['myChats'] == null
          ? null
          : Input$ChatCreateNestedManyWithoutFromInput.fromJson(
              json['myChats'] as Map<String, dynamic>),
      classrooms: json['classrooms'] == null
          ? null
          : Input$ClassroomCreateNestedManyWithoutUserInput.fromJson(
              json['classrooms'] as Map<String, dynamic>),
      classroomStudents: json['classroomStudents'] == null
          ? null
          : Input$ClassroomStudentCreateNestedManyWithoutUserInput.fromJson(
              json['classroomStudents'] as Map<String, dynamic>),
      notifications: json['notifications'] == null
          ? null
          : Input$NotificationCreateNestedManyWithoutUserInput.fromJson(
              json['notifications'] as Map<String, dynamic>),
      schoolStaffs: json['schoolStaffs'] == null
          ? null
          : Input$SchoolStaffCreateNestedManyWithoutUserInput.fromJson(
              json['schoolStaffs'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$UserCreateWithoutSchoolInputToJson(
        Input$UserCreateWithoutSchoolInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'province': instance.province.toJson(),
      'regency': instance.regency.toJson(),
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
    };

Input$UserCreateWithoutSchoolStaffsInput
    _$Input$UserCreateWithoutSchoolStaffsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserCreateWithoutSchoolStaffsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          email: json['email'] as String,
          phoneNumber: json['phoneNumber'] as String,
          address: json['address'] as String?,
          profilePicturePath: json['profilePicturePath'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          nisn: json['nisn'] as String?,
          nrg: json['nrg'] as String?,
          verifykey: json['verifykey'] as String?,
          verifyType: $enumDecodeNullable(
              _$Enum$VerifyTypeEnumMap, json['verifyType'],
              unknownValue: Enum$VerifyType.$unknown),
          province: Input$ProvinceCreateNestedOneWithoutUsersInput.fromJson(
              json['province'] as Map<String, dynamic>),
          regency: Input$RegencyCreateNestedOneWithoutUsersInput.fromJson(
              json['regency'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] as bool?,
          isBimbel: json['isBimbel'] as bool?,
          role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
              unknownValue: Enum$Roles.$unknown),
          balance: (json['balance'] as num?)?.toDouble(),
          emailVerifiedAt: json['emailVerifiedAt'] as String?,
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
          bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileCreateNestedManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionCreateNestedManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamCreateNestedManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionCreateNestedManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatCreateNestedManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomCreateNestedManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentCreateNestedManyWithoutUserInput.fromJson(
                  json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationCreateNestedManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          school: json['school'] == null
              ? null
              : Input$SchoolCreateNestedOneWithoutStudentsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserCreateWithoutSchoolStaffsInputToJson(
        Input$UserCreateWithoutSchoolStaffsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'province': instance.province.toJson(),
      'regency': instance.regency.toJson(),
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'school': instance.school?.toJson(),
    };

Input$UserListRelationFilter _$Input$UserListRelationFilterFromJson(
        Map<String, dynamic> json) =>
    Input$UserListRelationFilter(
      every: json['every'] == null
          ? null
          : Input$UserWhereInput.fromJson(
              json['every'] as Map<String, dynamic>),
      some: json['some'] == null
          ? null
          : Input$UserWhereInput.fromJson(json['some'] as Map<String, dynamic>),
      none: json['none'] == null
          ? null
          : Input$UserWhereInput.fromJson(json['none'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$UserListRelationFilterToJson(
        Input$UserListRelationFilter instance) =>
    <String, dynamic>{
      'every': instance.every?.toJson(),
      'some': instance.some?.toJson(),
      'none': instance.none?.toJson(),
    };

Input$UserMaxOrderByAggregateInput _$Input$UserMaxOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    Input$UserMaxOrderByAggregateInput(
      id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
          unknownValue: Enum$SortOrder.$unknown),
      name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
          unknownValue: Enum$SortOrder.$unknown),
      email: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['email'],
          unknownValue: Enum$SortOrder.$unknown),
      phoneNumber: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['phoneNumber'],
          unknownValue: Enum$SortOrder.$unknown),
      address: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['address'],
          unknownValue: Enum$SortOrder.$unknown),
      profilePicturePath: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['profilePicturePath'],
          unknownValue: Enum$SortOrder.$unknown),
      createdAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['createdAt'],
          unknownValue: Enum$SortOrder.$unknown),
      updatedAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['updatedAt'],
          unknownValue: Enum$SortOrder.$unknown),
      nisn: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['nisn'],
          unknownValue: Enum$SortOrder.$unknown),
      nrg: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['nrg'],
          unknownValue: Enum$SortOrder.$unknown),
      verifykey: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['verifykey'],
          unknownValue: Enum$SortOrder.$unknown),
      verifyType: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['verifyType'],
          unknownValue: Enum$SortOrder.$unknown),
      provinceId: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['provinceId'],
          unknownValue: Enum$SortOrder.$unknown),
      regencyId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['regencyId'],
          unknownValue: Enum$SortOrder.$unknown),
      isAdmin: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['isAdmin'],
          unknownValue: Enum$SortOrder.$unknown),
      isBimbel: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['isBimbel'],
          unknownValue: Enum$SortOrder.$unknown),
      role: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['role'],
          unknownValue: Enum$SortOrder.$unknown),
      balance: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['balance'],
          unknownValue: Enum$SortOrder.$unknown),
      emailVerifiedAt: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['emailVerifiedAt'],
          unknownValue: Enum$SortOrder.$unknown),
      phoneNumberVerifiedAt: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['phoneNumberVerifiedAt'],
          unknownValue: Enum$SortOrder.$unknown),
      bimbelApprovedAt: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['bimbelApprovedAt'],
          unknownValue: Enum$SortOrder.$unknown),
      identityNumberVerifiedAt: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['identityNumberVerifiedAt'],
          unknownValue: Enum$SortOrder.$unknown),
      schoolId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['schoolId'],
          unknownValue: Enum$SortOrder.$unknown),
    );

Map<String, dynamic> _$Input$UserMaxOrderByAggregateInputToJson(
        Input$UserMaxOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'email': _$Enum$SortOrderEnumMap[instance.email],
      'phoneNumber': _$Enum$SortOrderEnumMap[instance.phoneNumber],
      'address': _$Enum$SortOrderEnumMap[instance.address],
      'profilePicturePath':
          _$Enum$SortOrderEnumMap[instance.profilePicturePath],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      'nisn': _$Enum$SortOrderEnumMap[instance.nisn],
      'nrg': _$Enum$SortOrderEnumMap[instance.nrg],
      'verifykey': _$Enum$SortOrderEnumMap[instance.verifykey],
      'verifyType': _$Enum$SortOrderEnumMap[instance.verifyType],
      'provinceId': _$Enum$SortOrderEnumMap[instance.provinceId],
      'regencyId': _$Enum$SortOrderEnumMap[instance.regencyId],
      'isAdmin': _$Enum$SortOrderEnumMap[instance.isAdmin],
      'isBimbel': _$Enum$SortOrderEnumMap[instance.isBimbel],
      'role': _$Enum$SortOrderEnumMap[instance.role],
      'balance': _$Enum$SortOrderEnumMap[instance.balance],
      'emailVerifiedAt': _$Enum$SortOrderEnumMap[instance.emailVerifiedAt],
      'phoneNumberVerifiedAt':
          _$Enum$SortOrderEnumMap[instance.phoneNumberVerifiedAt],
      'bimbelApprovedAt': _$Enum$SortOrderEnumMap[instance.bimbelApprovedAt],
      'identityNumberVerifiedAt':
          _$Enum$SortOrderEnumMap[instance.identityNumberVerifiedAt],
      'schoolId': _$Enum$SortOrderEnumMap[instance.schoolId],
    };

Input$UserMinOrderByAggregateInput _$Input$UserMinOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    Input$UserMinOrderByAggregateInput(
      id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
          unknownValue: Enum$SortOrder.$unknown),
      name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
          unknownValue: Enum$SortOrder.$unknown),
      email: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['email'],
          unknownValue: Enum$SortOrder.$unknown),
      phoneNumber: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['phoneNumber'],
          unknownValue: Enum$SortOrder.$unknown),
      address: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['address'],
          unknownValue: Enum$SortOrder.$unknown),
      profilePicturePath: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['profilePicturePath'],
          unknownValue: Enum$SortOrder.$unknown),
      createdAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['createdAt'],
          unknownValue: Enum$SortOrder.$unknown),
      updatedAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['updatedAt'],
          unknownValue: Enum$SortOrder.$unknown),
      nisn: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['nisn'],
          unknownValue: Enum$SortOrder.$unknown),
      nrg: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['nrg'],
          unknownValue: Enum$SortOrder.$unknown),
      verifykey: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['verifykey'],
          unknownValue: Enum$SortOrder.$unknown),
      verifyType: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['verifyType'],
          unknownValue: Enum$SortOrder.$unknown),
      provinceId: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['provinceId'],
          unknownValue: Enum$SortOrder.$unknown),
      regencyId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['regencyId'],
          unknownValue: Enum$SortOrder.$unknown),
      isAdmin: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['isAdmin'],
          unknownValue: Enum$SortOrder.$unknown),
      isBimbel: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['isBimbel'],
          unknownValue: Enum$SortOrder.$unknown),
      role: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['role'],
          unknownValue: Enum$SortOrder.$unknown),
      balance: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['balance'],
          unknownValue: Enum$SortOrder.$unknown),
      emailVerifiedAt: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['emailVerifiedAt'],
          unknownValue: Enum$SortOrder.$unknown),
      phoneNumberVerifiedAt: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['phoneNumberVerifiedAt'],
          unknownValue: Enum$SortOrder.$unknown),
      bimbelApprovedAt: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['bimbelApprovedAt'],
          unknownValue: Enum$SortOrder.$unknown),
      identityNumberVerifiedAt: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['identityNumberVerifiedAt'],
          unknownValue: Enum$SortOrder.$unknown),
      schoolId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['schoolId'],
          unknownValue: Enum$SortOrder.$unknown),
    );

Map<String, dynamic> _$Input$UserMinOrderByAggregateInputToJson(
        Input$UserMinOrderByAggregateInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'email': _$Enum$SortOrderEnumMap[instance.email],
      'phoneNumber': _$Enum$SortOrderEnumMap[instance.phoneNumber],
      'address': _$Enum$SortOrderEnumMap[instance.address],
      'profilePicturePath':
          _$Enum$SortOrderEnumMap[instance.profilePicturePath],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      'nisn': _$Enum$SortOrderEnumMap[instance.nisn],
      'nrg': _$Enum$SortOrderEnumMap[instance.nrg],
      'verifykey': _$Enum$SortOrderEnumMap[instance.verifykey],
      'verifyType': _$Enum$SortOrderEnumMap[instance.verifyType],
      'provinceId': _$Enum$SortOrderEnumMap[instance.provinceId],
      'regencyId': _$Enum$SortOrderEnumMap[instance.regencyId],
      'isAdmin': _$Enum$SortOrderEnumMap[instance.isAdmin],
      'isBimbel': _$Enum$SortOrderEnumMap[instance.isBimbel],
      'role': _$Enum$SortOrderEnumMap[instance.role],
      'balance': _$Enum$SortOrderEnumMap[instance.balance],
      'emailVerifiedAt': _$Enum$SortOrderEnumMap[instance.emailVerifiedAt],
      'phoneNumberVerifiedAt':
          _$Enum$SortOrderEnumMap[instance.phoneNumberVerifiedAt],
      'bimbelApprovedAt': _$Enum$SortOrderEnumMap[instance.bimbelApprovedAt],
      'identityNumberVerifiedAt':
          _$Enum$SortOrderEnumMap[instance.identityNumberVerifiedAt],
      'schoolId': _$Enum$SortOrderEnumMap[instance.schoolId],
    };

Input$UserOrderByRelationAggregateInput
    _$Input$UserOrderByRelationAggregateInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserOrderByRelationAggregateInput(
          $_count: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['_count'],
              unknownValue: Enum$SortOrder.$unknown),
        );

Map<String, dynamic> _$Input$UserOrderByRelationAggregateInputToJson(
        Input$UserOrderByRelationAggregateInput instance) =>
    <String, dynamic>{
      '_count': _$Enum$SortOrderEnumMap[instance.$_count],
    };

Input$UserOrderByWithAggregationInput
    _$Input$UserOrderByWithAggregationInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserOrderByWithAggregationInput(
          id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
              unknownValue: Enum$SortOrder.$unknown),
          name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
              unknownValue: Enum$SortOrder.$unknown),
          email: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['email'],
              unknownValue: Enum$SortOrder.$unknown),
          phoneNumber: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['phoneNumber'],
              unknownValue: Enum$SortOrder.$unknown),
          address: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['address'],
              unknownValue: Enum$SortOrder.$unknown),
          profilePicturePath: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['profilePicturePath'],
              unknownValue: Enum$SortOrder.$unknown),
          createdAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['createdAt'],
              unknownValue: Enum$SortOrder.$unknown),
          updatedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['updatedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          nisn: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['nisn'],
              unknownValue: Enum$SortOrder.$unknown),
          nrg: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['nrg'],
              unknownValue: Enum$SortOrder.$unknown),
          verifykey: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['verifykey'],
              unknownValue: Enum$SortOrder.$unknown),
          verifyType: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['verifyType'],
              unknownValue: Enum$SortOrder.$unknown),
          provinceId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['provinceId'],
              unknownValue: Enum$SortOrder.$unknown),
          regencyId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['regencyId'],
              unknownValue: Enum$SortOrder.$unknown),
          isAdmin: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['isAdmin'],
              unknownValue: Enum$SortOrder.$unknown),
          isBimbel: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['isBimbel'],
              unknownValue: Enum$SortOrder.$unknown),
          role: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['role'],
              unknownValue: Enum$SortOrder.$unknown),
          balance: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['balance'],
              unknownValue: Enum$SortOrder.$unknown),
          emailVerifiedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['emailVerifiedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          phoneNumberVerifiedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['phoneNumberVerifiedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          bimbelApprovedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['bimbelApprovedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          identityNumberVerifiedAt: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['identityNumberVerifiedAt'],
              unknownValue: Enum$SortOrder.$unknown),
          schoolId: $enumDecodeNullable(
              _$Enum$SortOrderEnumMap, json['schoolId'],
              unknownValue: Enum$SortOrder.$unknown),
          $_count: json['_count'] == null
              ? null
              : Input$UserCountOrderByAggregateInput.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $_avg: json['_avg'] == null
              ? null
              : Input$UserAvgOrderByAggregateInput.fromJson(
                  json['_avg'] as Map<String, dynamic>),
          $_max: json['_max'] == null
              ? null
              : Input$UserMaxOrderByAggregateInput.fromJson(
                  json['_max'] as Map<String, dynamic>),
          $_min: json['_min'] == null
              ? null
              : Input$UserMinOrderByAggregateInput.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $_sum: json['_sum'] == null
              ? null
              : Input$UserSumOrderByAggregateInput.fromJson(
                  json['_sum'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserOrderByWithAggregationInputToJson(
        Input$UserOrderByWithAggregationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'email': _$Enum$SortOrderEnumMap[instance.email],
      'phoneNumber': _$Enum$SortOrderEnumMap[instance.phoneNumber],
      'address': _$Enum$SortOrderEnumMap[instance.address],
      'profilePicturePath':
          _$Enum$SortOrderEnumMap[instance.profilePicturePath],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      'nisn': _$Enum$SortOrderEnumMap[instance.nisn],
      'nrg': _$Enum$SortOrderEnumMap[instance.nrg],
      'verifykey': _$Enum$SortOrderEnumMap[instance.verifykey],
      'verifyType': _$Enum$SortOrderEnumMap[instance.verifyType],
      'provinceId': _$Enum$SortOrderEnumMap[instance.provinceId],
      'regencyId': _$Enum$SortOrderEnumMap[instance.regencyId],
      'isAdmin': _$Enum$SortOrderEnumMap[instance.isAdmin],
      'isBimbel': _$Enum$SortOrderEnumMap[instance.isBimbel],
      'role': _$Enum$SortOrderEnumMap[instance.role],
      'balance': _$Enum$SortOrderEnumMap[instance.balance],
      'emailVerifiedAt': _$Enum$SortOrderEnumMap[instance.emailVerifiedAt],
      'phoneNumberVerifiedAt':
          _$Enum$SortOrderEnumMap[instance.phoneNumberVerifiedAt],
      'bimbelApprovedAt': _$Enum$SortOrderEnumMap[instance.bimbelApprovedAt],
      'identityNumberVerifiedAt':
          _$Enum$SortOrderEnumMap[instance.identityNumberVerifiedAt],
      'schoolId': _$Enum$SortOrderEnumMap[instance.schoolId],
      '_count': instance.$_count?.toJson(),
      '_avg': instance.$_avg?.toJson(),
      '_max': instance.$_max?.toJson(),
      '_min': instance.$_min?.toJson(),
      '_sum': instance.$_sum?.toJson(),
    };

Input$UserOrderByWithRelationInput _$Input$UserOrderByWithRelationInputFromJson(
        Map<String, dynamic> json) =>
    Input$UserOrderByWithRelationInput(
      id: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['id'],
          unknownValue: Enum$SortOrder.$unknown),
      name: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['name'],
          unknownValue: Enum$SortOrder.$unknown),
      email: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['email'],
          unknownValue: Enum$SortOrder.$unknown),
      phoneNumber: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['phoneNumber'],
          unknownValue: Enum$SortOrder.$unknown),
      address: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['address'],
          unknownValue: Enum$SortOrder.$unknown),
      profilePicturePath: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['profilePicturePath'],
          unknownValue: Enum$SortOrder.$unknown),
      createdAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['createdAt'],
          unknownValue: Enum$SortOrder.$unknown),
      updatedAt: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['updatedAt'],
          unknownValue: Enum$SortOrder.$unknown),
      nisn: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['nisn'],
          unknownValue: Enum$SortOrder.$unknown),
      nrg: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['nrg'],
          unknownValue: Enum$SortOrder.$unknown),
      verifykey: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['verifykey'],
          unknownValue: Enum$SortOrder.$unknown),
      verifyType: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['verifyType'],
          unknownValue: Enum$SortOrder.$unknown),
      provinceId: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['provinceId'],
          unknownValue: Enum$SortOrder.$unknown),
      province: json['province'] == null
          ? null
          : Input$ProvinceOrderByWithRelationInput.fromJson(
              json['province'] as Map<String, dynamic>),
      regencyId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['regencyId'],
          unknownValue: Enum$SortOrder.$unknown),
      regency: json['regency'] == null
          ? null
          : Input$RegencyOrderByWithRelationInput.fromJson(
              json['regency'] as Map<String, dynamic>),
      isAdmin: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['isAdmin'],
          unknownValue: Enum$SortOrder.$unknown),
      isBimbel: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['isBimbel'],
          unknownValue: Enum$SortOrder.$unknown),
      role: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['role'],
          unknownValue: Enum$SortOrder.$unknown),
      balance: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['balance'],
          unknownValue: Enum$SortOrder.$unknown),
      emailVerifiedAt: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['emailVerifiedAt'],
          unknownValue: Enum$SortOrder.$unknown),
      phoneNumberVerifiedAt: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['phoneNumberVerifiedAt'],
          unknownValue: Enum$SortOrder.$unknown),
      bimbelApprovedAt: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['bimbelApprovedAt'],
          unknownValue: Enum$SortOrder.$unknown),
      identityNumberVerifiedAt: $enumDecodeNullable(
          _$Enum$SortOrderEnumMap, json['identityNumberVerifiedAt'],
          unknownValue: Enum$SortOrder.$unknown),
      identityFiles: json['identityFiles'] == null
          ? null
          : Input$IdentityFileOrderByRelationAggregateInput.fromJson(
              json['identityFiles'] as Map<String, dynamic>),
      questions: json['questions'] == null
          ? null
          : Input$QuestionOrderByRelationAggregateInput.fromJson(
              json['questions'] as Map<String, dynamic>),
      examinations: json['examinations'] == null
          ? null
          : Input$ExamOrderByRelationAggregateInput.fromJson(
              json['examinations'] as Map<String, dynamic>),
      examsessions: json['examsessions'] == null
          ? null
          : Input$ExamSessionOrderByRelationAggregateInput.fromJson(
              json['examsessions'] as Map<String, dynamic>),
      myChats: json['myChats'] == null
          ? null
          : Input$ChatOrderByRelationAggregateInput.fromJson(
              json['myChats'] as Map<String, dynamic>),
      classrooms: json['classrooms'] == null
          ? null
          : Input$ClassroomOrderByRelationAggregateInput.fromJson(
              json['classrooms'] as Map<String, dynamic>),
      classroomStudents: json['classroomStudents'] == null
          ? null
          : Input$ClassroomStudentOrderByRelationAggregateInput.fromJson(
              json['classroomStudents'] as Map<String, dynamic>),
      notifications: json['notifications'] == null
          ? null
          : Input$NotificationOrderByRelationAggregateInput.fromJson(
              json['notifications'] as Map<String, dynamic>),
      schoolStaffs: json['schoolStaffs'] == null
          ? null
          : Input$SchoolStaffOrderByRelationAggregateInput.fromJson(
              json['schoolStaffs'] as Map<String, dynamic>),
      schoolId: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['schoolId'],
          unknownValue: Enum$SortOrder.$unknown),
      school: json['school'] == null
          ? null
          : Input$SchoolOrderByWithRelationInput.fromJson(
              json['school'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$UserOrderByWithRelationInputToJson(
        Input$UserOrderByWithRelationInput instance) =>
    <String, dynamic>{
      'id': _$Enum$SortOrderEnumMap[instance.id],
      'name': _$Enum$SortOrderEnumMap[instance.name],
      'email': _$Enum$SortOrderEnumMap[instance.email],
      'phoneNumber': _$Enum$SortOrderEnumMap[instance.phoneNumber],
      'address': _$Enum$SortOrderEnumMap[instance.address],
      'profilePicturePath':
          _$Enum$SortOrderEnumMap[instance.profilePicturePath],
      'createdAt': _$Enum$SortOrderEnumMap[instance.createdAt],
      'updatedAt': _$Enum$SortOrderEnumMap[instance.updatedAt],
      'nisn': _$Enum$SortOrderEnumMap[instance.nisn],
      'nrg': _$Enum$SortOrderEnumMap[instance.nrg],
      'verifykey': _$Enum$SortOrderEnumMap[instance.verifykey],
      'verifyType': _$Enum$SortOrderEnumMap[instance.verifyType],
      'provinceId': _$Enum$SortOrderEnumMap[instance.provinceId],
      'province': instance.province?.toJson(),
      'regencyId': _$Enum$SortOrderEnumMap[instance.regencyId],
      'regency': instance.regency?.toJson(),
      'isAdmin': _$Enum$SortOrderEnumMap[instance.isAdmin],
      'isBimbel': _$Enum$SortOrderEnumMap[instance.isBimbel],
      'role': _$Enum$SortOrderEnumMap[instance.role],
      'balance': _$Enum$SortOrderEnumMap[instance.balance],
      'emailVerifiedAt': _$Enum$SortOrderEnumMap[instance.emailVerifiedAt],
      'phoneNumberVerifiedAt':
          _$Enum$SortOrderEnumMap[instance.phoneNumberVerifiedAt],
      'bimbelApprovedAt': _$Enum$SortOrderEnumMap[instance.bimbelApprovedAt],
      'identityNumberVerifiedAt':
          _$Enum$SortOrderEnumMap[instance.identityNumberVerifiedAt],
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'schoolId': _$Enum$SortOrderEnumMap[instance.schoolId],
      'school': instance.school?.toJson(),
    };

Input$UserRelationFilter _$Input$UserRelationFilterFromJson(
        Map<String, dynamic> json) =>
    Input$UserRelationFilter(
      $is: json['is'] == null
          ? null
          : Input$UserWhereInput.fromJson(json['is'] as Map<String, dynamic>),
      isNot: json['isNot'] == null
          ? null
          : Input$UserWhereInput.fromJson(
              json['isNot'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$UserRelationFilterToJson(
        Input$UserRelationFilter instance) =>
    <String, dynamic>{
      'is': instance.$is?.toJson(),
      'isNot': instance.isNot?.toJson(),
    };

Input$UserScalarWhereInput _$Input$UserScalarWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$UserScalarWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$UserScalarWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$UserScalarWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$UserScalarWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      email: json['email'] == null
          ? null
          : Input$StringFilter.fromJson(json['email'] as Map<String, dynamic>),
      phoneNumber: json['phoneNumber'] == null
          ? null
          : Input$StringFilter.fromJson(
              json['phoneNumber'] as Map<String, dynamic>),
      address: json['address'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['address'] as Map<String, dynamic>),
      profilePicturePath: json['profilePicturePath'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['profilePicturePath'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      nisn: json['nisn'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['nisn'] as Map<String, dynamic>),
      nrg: json['nrg'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['nrg'] as Map<String, dynamic>),
      verifykey: json['verifykey'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['verifykey'] as Map<String, dynamic>),
      verifyType: json['verifyType'] == null
          ? null
          : Input$EnumVerifyTypeNullableFilter.fromJson(
              json['verifyType'] as Map<String, dynamic>),
      provinceId: json['provinceId'] == null
          ? null
          : Input$StringFilter.fromJson(
              json['provinceId'] as Map<String, dynamic>),
      regencyId: json['regencyId'] == null
          ? null
          : Input$StringFilter.fromJson(
              json['regencyId'] as Map<String, dynamic>),
      isAdmin: json['isAdmin'] == null
          ? null
          : Input$BoolFilter.fromJson(json['isAdmin'] as Map<String, dynamic>),
      isBimbel: json['isBimbel'] == null
          ? null
          : Input$BoolFilter.fromJson(json['isBimbel'] as Map<String, dynamic>),
      role: json['role'] == null
          ? null
          : Input$EnumRolesFilter.fromJson(
              json['role'] as Map<String, dynamic>),
      balance: json['balance'] == null
          ? null
          : Input$FloatFilter.fromJson(json['balance'] as Map<String, dynamic>),
      emailVerifiedAt: json['emailVerifiedAt'] == null
          ? null
          : Input$DateTimeNullableFilter.fromJson(
              json['emailVerifiedAt'] as Map<String, dynamic>),
      phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
          ? null
          : Input$DateTimeNullableFilter.fromJson(
              json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
      bimbelApprovedAt: json['bimbelApprovedAt'] == null
          ? null
          : Input$DateTimeNullableFilter.fromJson(
              json['bimbelApprovedAt'] as Map<String, dynamic>),
      identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
          ? null
          : Input$DateTimeNullableFilter.fromJson(
              json['identityNumberVerifiedAt'] as Map<String, dynamic>),
      schoolId: json['schoolId'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['schoolId'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$UserScalarWhereInputToJson(
        Input$UserScalarWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
    };

Input$UserScalarWhereWithAggregatesInput
    _$Input$UserScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          OR: (json['OR'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          NOT: (json['NOT'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserScalarWhereWithAggregatesInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          id: json['id'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$StringNullableWithAggregatesFilter.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$StringNullableWithAggregatesFilter.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeWithAggregatesFilter.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$StringNullableWithAggregatesFilter.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$StringNullableWithAggregatesFilter.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$StringNullableWithAggregatesFilter.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$EnumVerifyTypeNullableWithAggregatesFilter.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          provinceId: json['provinceId'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['provinceId'] as Map<String, dynamic>),
          regencyId: json['regencyId'] == null
              ? null
              : Input$StringWithAggregatesFilter.fromJson(
                  json['regencyId'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolWithAggregatesFilter.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolWithAggregatesFilter.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesWithAggregatesFilter.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatWithAggregatesFilter.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$DateTimeNullableWithAggregatesFilter.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$DateTimeNullableWithAggregatesFilter.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$DateTimeNullableWithAggregatesFilter.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$DateTimeNullableWithAggregatesFilter.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
          schoolId: json['schoolId'] == null
              ? null
              : Input$StringNullableWithAggregatesFilter.fromJson(
                  json['schoolId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserScalarWhereWithAggregatesInputToJson(
        Input$UserScalarWhereWithAggregatesInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
    };

Input$UserSumOrderByAggregateInput _$Input$UserSumOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    Input$UserSumOrderByAggregateInput(
      balance: $enumDecodeNullable(_$Enum$SortOrderEnumMap, json['balance'],
          unknownValue: Enum$SortOrder.$unknown),
    );

Map<String, dynamic> _$Input$UserSumOrderByAggregateInputToJson(
        Input$UserSumOrderByAggregateInput instance) =>
    <String, dynamic>{
      'balance': _$Enum$SortOrderEnumMap[instance.balance],
    };

Input$UserUncheckedCreateInput _$Input$UserUncheckedCreateInputFromJson(
        Map<String, dynamic> json) =>
    Input$UserUncheckedCreateInput(
      id: json['id'] as String?,
      name: json['name'] as String,
      email: json['email'] as String,
      phoneNumber: json['phoneNumber'] as String,
      address: json['address'] as String?,
      profilePicturePath: json['profilePicturePath'] as String?,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
      nisn: json['nisn'] as String?,
      nrg: json['nrg'] as String?,
      verifykey: json['verifykey'] as String?,
      verifyType: $enumDecodeNullable(
          _$Enum$VerifyTypeEnumMap, json['verifyType'],
          unknownValue: Enum$VerifyType.$unknown),
      provinceId: json['provinceId'] as String,
      regencyId: json['regencyId'] as String,
      isAdmin: json['isAdmin'] as bool?,
      isBimbel: json['isBimbel'] as bool?,
      role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
          unknownValue: Enum$Roles.$unknown),
      balance: (json['balance'] as num?)?.toDouble(),
      emailVerifiedAt: json['emailVerifiedAt'] as String?,
      phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
      bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
      identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
      identityFiles: json['identityFiles'] == null
          ? null
          : Input$IdentityFileUncheckedCreateNestedManyWithoutUserInput
              .fromJson(json['identityFiles'] as Map<String, dynamic>),
      questions: json['questions'] == null
          ? null
          : Input$QuestionUncheckedCreateNestedManyWithoutUserInput.fromJson(
              json['questions'] as Map<String, dynamic>),
      examinations: json['examinations'] == null
          ? null
          : Input$ExamUncheckedCreateNestedManyWithoutUserInput.fromJson(
              json['examinations'] as Map<String, dynamic>),
      examsessions: json['examsessions'] == null
          ? null
          : Input$ExamSessionUncheckedCreateNestedManyWithoutUserInput.fromJson(
              json['examsessions'] as Map<String, dynamic>),
      myChats: json['myChats'] == null
          ? null
          : Input$ChatUncheckedCreateNestedManyWithoutFromInput.fromJson(
              json['myChats'] as Map<String, dynamic>),
      classrooms: json['classrooms'] == null
          ? null
          : Input$ClassroomUncheckedCreateNestedManyWithoutUserInput.fromJson(
              json['classrooms'] as Map<String, dynamic>),
      classroomStudents: json['classroomStudents'] == null
          ? null
          : Input$ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
              .fromJson(json['classroomStudents'] as Map<String, dynamic>),
      notifications: json['notifications'] == null
          ? null
          : Input$NotificationUncheckedCreateNestedManyWithoutUserInput
              .fromJson(json['notifications'] as Map<String, dynamic>),
      schoolStaffs: json['schoolStaffs'] == null
          ? null
          : Input$SchoolStaffUncheckedCreateNestedManyWithoutUserInput.fromJson(
              json['schoolStaffs'] as Map<String, dynamic>),
      schoolId: json['schoolId'] as String?,
    );

Map<String, dynamic> _$Input$UserUncheckedCreateInputToJson(
        Input$UserUncheckedCreateInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'provinceId': instance.provinceId,
      'regencyId': instance.regencyId,
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'schoolId': instance.schoolId,
    };

Input$UserUncheckedCreateNestedManyWithoutProvinceInput
    _$Input$UserUncheckedCreateNestedManyWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedCreateNestedManyWithoutProvinceInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserCreateWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserCreateOrConnectWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$UserCreateManyProvinceInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$UserUncheckedCreateNestedManyWithoutProvinceInputToJson(
            Input$UserUncheckedCreateNestedManyWithoutProvinceInput instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
        };

Input$UserUncheckedCreateNestedManyWithoutRegencyInput
    _$Input$UserUncheckedCreateNestedManyWithoutRegencyInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedCreateNestedManyWithoutRegencyInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserCreateWithoutRegencyInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserCreateOrConnectWithoutRegencyInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$UserCreateManyRegencyInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$UserUncheckedCreateNestedManyWithoutRegencyInputToJson(
            Input$UserUncheckedCreateNestedManyWithoutRegencyInput instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
        };

Input$UserUncheckedCreateNestedManyWithoutSchoolInput
    _$Input$UserUncheckedCreateNestedManyWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedCreateNestedManyWithoutSchoolInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserCreateWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserCreateOrConnectWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$UserCreateManySchoolInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic>
    _$Input$UserUncheckedCreateNestedManyWithoutSchoolInputToJson(
            Input$UserUncheckedCreateNestedManyWithoutSchoolInput instance) =>
        <String, dynamic>{
          'create': instance.create?.map((e) => e?.toJson()).toList(),
          'connectOrCreate':
              instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
          'createMany': instance.createMany?.toJson(),
          'connect': instance.connect?.map((e) => e?.toJson()).toList(),
        };

Input$UserUncheckedCreateWithoutClassroomsInput
    _$Input$UserUncheckedCreateWithoutClassroomsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedCreateWithoutClassroomsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          email: json['email'] as String,
          phoneNumber: json['phoneNumber'] as String,
          address: json['address'] as String?,
          profilePicturePath: json['profilePicturePath'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          nisn: json['nisn'] as String?,
          nrg: json['nrg'] as String?,
          verifykey: json['verifykey'] as String?,
          verifyType: $enumDecodeNullable(
              _$Enum$VerifyTypeEnumMap, json['verifyType'],
              unknownValue: Enum$VerifyType.$unknown),
          provinceId: json['provinceId'] as String,
          regencyId: json['regencyId'] as String,
          isAdmin: json['isAdmin'] as bool?,
          isBimbel: json['isBimbel'] as bool?,
          role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
              unknownValue: Enum$Roles.$unknown),
          balance: (json['balance'] as num?)?.toDouble(),
          emailVerifiedAt: json['emailVerifiedAt'] as String?,
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
          bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUncheckedCreateNestedManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUncheckedCreateNestedManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['schoolStaffs'] as Map<String, dynamic>),
          schoolId: json['schoolId'] as String?,
        );

Map<String, dynamic> _$Input$UserUncheckedCreateWithoutClassroomsInputToJson(
        Input$UserUncheckedCreateWithoutClassroomsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'provinceId': instance.provinceId,
      'regencyId': instance.regencyId,
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'schoolId': instance.schoolId,
    };

Input$UserUncheckedCreateWithoutClassroomStudentsInput
    _$Input$UserUncheckedCreateWithoutClassroomStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedCreateWithoutClassroomStudentsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          email: json['email'] as String,
          phoneNumber: json['phoneNumber'] as String,
          address: json['address'] as String?,
          profilePicturePath: json['profilePicturePath'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          nisn: json['nisn'] as String?,
          nrg: json['nrg'] as String?,
          verifykey: json['verifykey'] as String?,
          verifyType: $enumDecodeNullable(
              _$Enum$VerifyTypeEnumMap, json['verifyType'],
              unknownValue: Enum$VerifyType.$unknown),
          provinceId: json['provinceId'] as String,
          regencyId: json['regencyId'] as String,
          isAdmin: json['isAdmin'] as bool?,
          isBimbel: json['isBimbel'] as bool?,
          role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
              unknownValue: Enum$Roles.$unknown),
          balance: (json['balance'] as num?)?.toDouble(),
          emailVerifiedAt: json['emailVerifiedAt'] as String?,
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
          bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUncheckedCreateNestedManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUncheckedCreateNestedManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['classrooms'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['schoolStaffs'] as Map<String, dynamic>),
          schoolId: json['schoolId'] as String?,
        );

Map<String, dynamic>
    _$Input$UserUncheckedCreateWithoutClassroomStudentsInputToJson(
            Input$UserUncheckedCreateWithoutClassroomStudentsInput instance) =>
        <String, dynamic>{
          'id': instance.id,
          'name': instance.name,
          'email': instance.email,
          'phoneNumber': instance.phoneNumber,
          'address': instance.address,
          'profilePicturePath': instance.profilePicturePath,
          'createdAt': instance.createdAt,
          'updatedAt': instance.updatedAt,
          'nisn': instance.nisn,
          'nrg': instance.nrg,
          'verifykey': instance.verifykey,
          'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
          'provinceId': instance.provinceId,
          'regencyId': instance.regencyId,
          'isAdmin': instance.isAdmin,
          'isBimbel': instance.isBimbel,
          'role': _$Enum$RolesEnumMap[instance.role],
          'balance': instance.balance,
          'emailVerifiedAt': instance.emailVerifiedAt,
          'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
          'bimbelApprovedAt': instance.bimbelApprovedAt,
          'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
          'identityFiles': instance.identityFiles?.toJson(),
          'questions': instance.questions?.toJson(),
          'examinations': instance.examinations?.toJson(),
          'examsessions': instance.examsessions?.toJson(),
          'myChats': instance.myChats?.toJson(),
          'classrooms': instance.classrooms?.toJson(),
          'notifications': instance.notifications?.toJson(),
          'schoolStaffs': instance.schoolStaffs?.toJson(),
          'schoolId': instance.schoolId,
        };

Input$UserUncheckedCreateWithoutExaminationsInput
    _$Input$UserUncheckedCreateWithoutExaminationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedCreateWithoutExaminationsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          email: json['email'] as String,
          phoneNumber: json['phoneNumber'] as String,
          address: json['address'] as String?,
          profilePicturePath: json['profilePicturePath'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          nisn: json['nisn'] as String?,
          nrg: json['nrg'] as String?,
          verifykey: json['verifykey'] as String?,
          verifyType: $enumDecodeNullable(
              _$Enum$VerifyTypeEnumMap, json['verifyType'],
              unknownValue: Enum$VerifyType.$unknown),
          provinceId: json['provinceId'] as String,
          regencyId: json['regencyId'] as String,
          isAdmin: json['isAdmin'] as bool?,
          isBimbel: json['isBimbel'] as bool?,
          role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
              unknownValue: Enum$Roles.$unknown),
          balance: (json['balance'] as num?)?.toDouble(),
          emailVerifiedAt: json['emailVerifiedAt'] as String?,
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
          bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['questions'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUncheckedCreateNestedManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['schoolStaffs'] as Map<String, dynamic>),
          schoolId: json['schoolId'] as String?,
        );

Map<String, dynamic> _$Input$UserUncheckedCreateWithoutExaminationsInputToJson(
        Input$UserUncheckedCreateWithoutExaminationsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'provinceId': instance.provinceId,
      'regencyId': instance.regencyId,
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'schoolId': instance.schoolId,
    };

Input$UserUncheckedCreateWithoutExamsessionsInput
    _$Input$UserUncheckedCreateWithoutExamsessionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedCreateWithoutExamsessionsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          email: json['email'] as String,
          phoneNumber: json['phoneNumber'] as String,
          address: json['address'] as String?,
          profilePicturePath: json['profilePicturePath'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          nisn: json['nisn'] as String?,
          nrg: json['nrg'] as String?,
          verifykey: json['verifykey'] as String?,
          verifyType: $enumDecodeNullable(
              _$Enum$VerifyTypeEnumMap, json['verifyType'],
              unknownValue: Enum$VerifyType.$unknown),
          provinceId: json['provinceId'] as String,
          regencyId: json['regencyId'] as String,
          isAdmin: json['isAdmin'] as bool?,
          isBimbel: json['isBimbel'] as bool?,
          role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
              unknownValue: Enum$Roles.$unknown),
          balance: (json['balance'] as num?)?.toDouble(),
          emailVerifiedAt: json['emailVerifiedAt'] as String?,
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
          bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUncheckedCreateNestedManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUncheckedCreateNestedManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['schoolStaffs'] as Map<String, dynamic>),
          schoolId: json['schoolId'] as String?,
        );

Map<String, dynamic> _$Input$UserUncheckedCreateWithoutExamsessionsInputToJson(
        Input$UserUncheckedCreateWithoutExamsessionsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'provinceId': instance.provinceId,
      'regencyId': instance.regencyId,
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'schoolId': instance.schoolId,
    };

Input$UserUncheckedCreateWithoutIdentityFilesInput
    _$Input$UserUncheckedCreateWithoutIdentityFilesInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedCreateWithoutIdentityFilesInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          email: json['email'] as String,
          phoneNumber: json['phoneNumber'] as String,
          address: json['address'] as String?,
          profilePicturePath: json['profilePicturePath'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          nisn: json['nisn'] as String?,
          nrg: json['nrg'] as String?,
          verifykey: json['verifykey'] as String?,
          verifyType: $enumDecodeNullable(
              _$Enum$VerifyTypeEnumMap, json['verifyType'],
              unknownValue: Enum$VerifyType.$unknown),
          provinceId: json['provinceId'] as String,
          regencyId: json['regencyId'] as String,
          isAdmin: json['isAdmin'] as bool?,
          isBimbel: json['isBimbel'] as bool?,
          role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
              unknownValue: Enum$Roles.$unknown),
          balance: (json['balance'] as num?)?.toDouble(),
          emailVerifiedAt: json['emailVerifiedAt'] as String?,
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
          bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
          questions: json['questions'] == null
              ? null
              : Input$QuestionUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUncheckedCreateNestedManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUncheckedCreateNestedManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['schoolStaffs'] as Map<String, dynamic>),
          schoolId: json['schoolId'] as String?,
        );

Map<String, dynamic> _$Input$UserUncheckedCreateWithoutIdentityFilesInputToJson(
        Input$UserUncheckedCreateWithoutIdentityFilesInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'provinceId': instance.provinceId,
      'regencyId': instance.regencyId,
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'schoolId': instance.schoolId,
    };

Input$UserUncheckedCreateWithoutMyChatsInput
    _$Input$UserUncheckedCreateWithoutMyChatsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedCreateWithoutMyChatsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          email: json['email'] as String,
          phoneNumber: json['phoneNumber'] as String,
          address: json['address'] as String?,
          profilePicturePath: json['profilePicturePath'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          nisn: json['nisn'] as String?,
          nrg: json['nrg'] as String?,
          verifykey: json['verifykey'] as String?,
          verifyType: $enumDecodeNullable(
              _$Enum$VerifyTypeEnumMap, json['verifyType'],
              unknownValue: Enum$VerifyType.$unknown),
          provinceId: json['provinceId'] as String,
          regencyId: json['regencyId'] as String,
          isAdmin: json['isAdmin'] as bool?,
          isBimbel: json['isBimbel'] as bool?,
          role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
              unknownValue: Enum$Roles.$unknown),
          balance: (json['balance'] as num?)?.toDouble(),
          emailVerifiedAt: json['emailVerifiedAt'] as String?,
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
          bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUncheckedCreateNestedManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['examsessions'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['schoolStaffs'] as Map<String, dynamic>),
          schoolId: json['schoolId'] as String?,
        );

Map<String, dynamic> _$Input$UserUncheckedCreateWithoutMyChatsInputToJson(
        Input$UserUncheckedCreateWithoutMyChatsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'provinceId': instance.provinceId,
      'regencyId': instance.regencyId,
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'schoolId': instance.schoolId,
    };

Input$UserUncheckedCreateWithoutNotificationsInput
    _$Input$UserUncheckedCreateWithoutNotificationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedCreateWithoutNotificationsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          email: json['email'] as String,
          phoneNumber: json['phoneNumber'] as String,
          address: json['address'] as String?,
          profilePicturePath: json['profilePicturePath'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          nisn: json['nisn'] as String?,
          nrg: json['nrg'] as String?,
          verifykey: json['verifykey'] as String?,
          verifyType: $enumDecodeNullable(
              _$Enum$VerifyTypeEnumMap, json['verifyType'],
              unknownValue: Enum$VerifyType.$unknown),
          provinceId: json['provinceId'] as String,
          regencyId: json['regencyId'] as String,
          isAdmin: json['isAdmin'] as bool?,
          isBimbel: json['isBimbel'] as bool?,
          role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
              unknownValue: Enum$Roles.$unknown),
          balance: (json['balance'] as num?)?.toDouble(),
          emailVerifiedAt: json['emailVerifiedAt'] as String?,
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
          bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUncheckedCreateNestedManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUncheckedCreateNestedManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['classroomStudents'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['schoolStaffs'] as Map<String, dynamic>),
          schoolId: json['schoolId'] as String?,
        );

Map<String, dynamic> _$Input$UserUncheckedCreateWithoutNotificationsInputToJson(
        Input$UserUncheckedCreateWithoutNotificationsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'provinceId': instance.provinceId,
      'regencyId': instance.regencyId,
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'schoolId': instance.schoolId,
    };

Input$UserUncheckedCreateWithoutProvinceInput
    _$Input$UserUncheckedCreateWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedCreateWithoutProvinceInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          email: json['email'] as String,
          phoneNumber: json['phoneNumber'] as String,
          address: json['address'] as String?,
          profilePicturePath: json['profilePicturePath'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          nisn: json['nisn'] as String?,
          nrg: json['nrg'] as String?,
          verifykey: json['verifykey'] as String?,
          verifyType: $enumDecodeNullable(
              _$Enum$VerifyTypeEnumMap, json['verifyType'],
              unknownValue: Enum$VerifyType.$unknown),
          regencyId: json['regencyId'] as String,
          isAdmin: json['isAdmin'] as bool?,
          isBimbel: json['isBimbel'] as bool?,
          role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
              unknownValue: Enum$Roles.$unknown),
          balance: (json['balance'] as num?)?.toDouble(),
          emailVerifiedAt: json['emailVerifiedAt'] as String?,
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
          bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUncheckedCreateNestedManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUncheckedCreateNestedManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['schoolStaffs'] as Map<String, dynamic>),
          schoolId: json['schoolId'] as String?,
        );

Map<String, dynamic> _$Input$UserUncheckedCreateWithoutProvinceInputToJson(
        Input$UserUncheckedCreateWithoutProvinceInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'regencyId': instance.regencyId,
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'schoolId': instance.schoolId,
    };

Input$UserUncheckedCreateWithoutQuestionsInput
    _$Input$UserUncheckedCreateWithoutQuestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedCreateWithoutQuestionsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          email: json['email'] as String,
          phoneNumber: json['phoneNumber'] as String,
          address: json['address'] as String?,
          profilePicturePath: json['profilePicturePath'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          nisn: json['nisn'] as String?,
          nrg: json['nrg'] as String?,
          verifykey: json['verifykey'] as String?,
          verifyType: $enumDecodeNullable(
              _$Enum$VerifyTypeEnumMap, json['verifyType'],
              unknownValue: Enum$VerifyType.$unknown),
          provinceId: json['provinceId'] as String,
          regencyId: json['regencyId'] as String,
          isAdmin: json['isAdmin'] as bool?,
          isBimbel: json['isBimbel'] as bool?,
          role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
              unknownValue: Enum$Roles.$unknown),
          balance: (json['balance'] as num?)?.toDouble(),
          emailVerifiedAt: json['emailVerifiedAt'] as String?,
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
          bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['identityFiles'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUncheckedCreateNestedManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUncheckedCreateNestedManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['schoolStaffs'] as Map<String, dynamic>),
          schoolId: json['schoolId'] as String?,
        );

Map<String, dynamic> _$Input$UserUncheckedCreateWithoutQuestionsInputToJson(
        Input$UserUncheckedCreateWithoutQuestionsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'provinceId': instance.provinceId,
      'regencyId': instance.regencyId,
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'identityFiles': instance.identityFiles?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'schoolId': instance.schoolId,
    };

Input$UserUncheckedCreateWithoutRegencyInput
    _$Input$UserUncheckedCreateWithoutRegencyInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedCreateWithoutRegencyInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          email: json['email'] as String,
          phoneNumber: json['phoneNumber'] as String,
          address: json['address'] as String?,
          profilePicturePath: json['profilePicturePath'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          nisn: json['nisn'] as String?,
          nrg: json['nrg'] as String?,
          verifykey: json['verifykey'] as String?,
          verifyType: $enumDecodeNullable(
              _$Enum$VerifyTypeEnumMap, json['verifyType'],
              unknownValue: Enum$VerifyType.$unknown),
          provinceId: json['provinceId'] as String,
          isAdmin: json['isAdmin'] as bool?,
          isBimbel: json['isBimbel'] as bool?,
          role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
              unknownValue: Enum$Roles.$unknown),
          balance: (json['balance'] as num?)?.toDouble(),
          emailVerifiedAt: json['emailVerifiedAt'] as String?,
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
          bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUncheckedCreateNestedManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUncheckedCreateNestedManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['schoolStaffs'] as Map<String, dynamic>),
          schoolId: json['schoolId'] as String?,
        );

Map<String, dynamic> _$Input$UserUncheckedCreateWithoutRegencyInputToJson(
        Input$UserUncheckedCreateWithoutRegencyInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'provinceId': instance.provinceId,
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'schoolId': instance.schoolId,
    };

Input$UserUncheckedCreateWithoutSchoolInput
    _$Input$UserUncheckedCreateWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedCreateWithoutSchoolInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          email: json['email'] as String,
          phoneNumber: json['phoneNumber'] as String,
          address: json['address'] as String?,
          profilePicturePath: json['profilePicturePath'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          nisn: json['nisn'] as String?,
          nrg: json['nrg'] as String?,
          verifykey: json['verifykey'] as String?,
          verifyType: $enumDecodeNullable(
              _$Enum$VerifyTypeEnumMap, json['verifyType'],
              unknownValue: Enum$VerifyType.$unknown),
          provinceId: json['provinceId'] as String,
          regencyId: json['regencyId'] as String,
          isAdmin: json['isAdmin'] as bool?,
          isBimbel: json['isBimbel'] as bool?,
          role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
              unknownValue: Enum$Roles.$unknown),
          balance: (json['balance'] as num?)?.toDouble(),
          emailVerifiedAt: json['emailVerifiedAt'] as String?,
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
          bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUncheckedCreateNestedManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUncheckedCreateNestedManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['schoolStaffs'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUncheckedCreateWithoutSchoolInputToJson(
        Input$UserUncheckedCreateWithoutSchoolInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'provinceId': instance.provinceId,
      'regencyId': instance.regencyId,
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
    };

Input$UserUncheckedCreateWithoutSchoolStaffsInput
    _$Input$UserUncheckedCreateWithoutSchoolStaffsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedCreateWithoutSchoolStaffsInput(
          id: json['id'] as String?,
          name: json['name'] as String,
          email: json['email'] as String,
          phoneNumber: json['phoneNumber'] as String,
          address: json['address'] as String?,
          profilePicturePath: json['profilePicturePath'] as String?,
          createdAt: json['createdAt'] as String?,
          updatedAt: json['updatedAt'] as String?,
          nisn: json['nisn'] as String?,
          nrg: json['nrg'] as String?,
          verifykey: json['verifykey'] as String?,
          verifyType: $enumDecodeNullable(
              _$Enum$VerifyTypeEnumMap, json['verifyType'],
              unknownValue: Enum$VerifyType.$unknown),
          provinceId: json['provinceId'] as String,
          regencyId: json['regencyId'] as String,
          isAdmin: json['isAdmin'] as bool?,
          isBimbel: json['isBimbel'] as bool?,
          role: $enumDecode(_$Enum$RolesEnumMap, json['role'],
              unknownValue: Enum$Roles.$unknown),
          balance: (json['balance'] as num?)?.toDouble(),
          emailVerifiedAt: json['emailVerifiedAt'] as String?,
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] as String?,
          bimbelApprovedAt: json['bimbelApprovedAt'] as String?,
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] as String?,
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUncheckedCreateNestedManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUncheckedCreateNestedManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUncheckedCreateNestedManyWithoutUserInput
                  .fromJson(json['notifications'] as Map<String, dynamic>),
          schoolId: json['schoolId'] as String?,
        );

Map<String, dynamic> _$Input$UserUncheckedCreateWithoutSchoolStaffsInputToJson(
        Input$UserUncheckedCreateWithoutSchoolStaffsInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'email': instance.email,
      'phoneNumber': instance.phoneNumber,
      'address': instance.address,
      'profilePicturePath': instance.profilePicturePath,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'nisn': instance.nisn,
      'nrg': instance.nrg,
      'verifykey': instance.verifykey,
      'verifyType': _$Enum$VerifyTypeEnumMap[instance.verifyType],
      'provinceId': instance.provinceId,
      'regencyId': instance.regencyId,
      'isAdmin': instance.isAdmin,
      'isBimbel': instance.isBimbel,
      'role': _$Enum$RolesEnumMap[instance.role],
      'balance': instance.balance,
      'emailVerifiedAt': instance.emailVerifiedAt,
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt,
      'bimbelApprovedAt': instance.bimbelApprovedAt,
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt,
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolId': instance.schoolId,
    };

Input$UserUncheckedUpdateInput _$Input$UserUncheckedUpdateInputFromJson(
        Map<String, dynamic> json) =>
    Input$UserUncheckedUpdateInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      email: json['email'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['email'] as Map<String, dynamic>),
      phoneNumber: json['phoneNumber'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['phoneNumber'] as Map<String, dynamic>),
      address: json['address'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['address'] as Map<String, dynamic>),
      profilePicturePath: json['profilePicturePath'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['profilePicturePath'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      nisn: json['nisn'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['nisn'] as Map<String, dynamic>),
      nrg: json['nrg'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['nrg'] as Map<String, dynamic>),
      verifykey: json['verifykey'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['verifykey'] as Map<String, dynamic>),
      verifyType: json['verifyType'] == null
          ? null
          : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
              json['verifyType'] as Map<String, dynamic>),
      provinceId: json['provinceId'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['provinceId'] as Map<String, dynamic>),
      regencyId: json['regencyId'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['regencyId'] as Map<String, dynamic>),
      isAdmin: json['isAdmin'] == null
          ? null
          : Input$BoolFieldUpdateOperationsInput.fromJson(
              json['isAdmin'] as Map<String, dynamic>),
      isBimbel: json['isBimbel'] == null
          ? null
          : Input$BoolFieldUpdateOperationsInput.fromJson(
              json['isBimbel'] as Map<String, dynamic>),
      role: json['role'] == null
          ? null
          : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
              json['role'] as Map<String, dynamic>),
      balance: json['balance'] == null
          ? null
          : Input$FloatFieldUpdateOperationsInput.fromJson(
              json['balance'] as Map<String, dynamic>),
      emailVerifiedAt: json['emailVerifiedAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['emailVerifiedAt'] as Map<String, dynamic>),
      phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
      bimbelApprovedAt: json['bimbelApprovedAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['bimbelApprovedAt'] as Map<String, dynamic>),
      identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['identityNumberVerifiedAt'] as Map<String, dynamic>),
      identityFiles: json['identityFiles'] == null
          ? null
          : Input$IdentityFileUncheckedUpdateManyWithoutUserInput.fromJson(
              json['identityFiles'] as Map<String, dynamic>),
      questions: json['questions'] == null
          ? null
          : Input$QuestionUncheckedUpdateManyWithoutUserInput.fromJson(
              json['questions'] as Map<String, dynamic>),
      examinations: json['examinations'] == null
          ? null
          : Input$ExamUncheckedUpdateManyWithoutUserInput.fromJson(
              json['examinations'] as Map<String, dynamic>),
      examsessions: json['examsessions'] == null
          ? null
          : Input$ExamSessionUncheckedUpdateManyWithoutUserInput.fromJson(
              json['examsessions'] as Map<String, dynamic>),
      myChats: json['myChats'] == null
          ? null
          : Input$ChatUncheckedUpdateManyWithoutFromInput.fromJson(
              json['myChats'] as Map<String, dynamic>),
      classrooms: json['classrooms'] == null
          ? null
          : Input$ClassroomUncheckedUpdateManyWithoutUserInput.fromJson(
              json['classrooms'] as Map<String, dynamic>),
      classroomStudents: json['classroomStudents'] == null
          ? null
          : Input$ClassroomStudentUncheckedUpdateManyWithoutUserInput.fromJson(
              json['classroomStudents'] as Map<String, dynamic>),
      notifications: json['notifications'] == null
          ? null
          : Input$NotificationUncheckedUpdateManyWithoutUserInput.fromJson(
              json['notifications'] as Map<String, dynamic>),
      schoolStaffs: json['schoolStaffs'] == null
          ? null
          : Input$SchoolStaffUncheckedUpdateManyWithoutUserInput.fromJson(
              json['schoolStaffs'] as Map<String, dynamic>),
      schoolId: json['schoolId'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['schoolId'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$UserUncheckedUpdateInputToJson(
        Input$UserUncheckedUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
    };

Input$UserUncheckedUpdateManyInput _$Input$UserUncheckedUpdateManyInputFromJson(
        Map<String, dynamic> json) =>
    Input$UserUncheckedUpdateManyInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      email: json['email'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['email'] as Map<String, dynamic>),
      phoneNumber: json['phoneNumber'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['phoneNumber'] as Map<String, dynamic>),
      address: json['address'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['address'] as Map<String, dynamic>),
      profilePicturePath: json['profilePicturePath'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['profilePicturePath'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      nisn: json['nisn'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['nisn'] as Map<String, dynamic>),
      nrg: json['nrg'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['nrg'] as Map<String, dynamic>),
      verifykey: json['verifykey'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['verifykey'] as Map<String, dynamic>),
      verifyType: json['verifyType'] == null
          ? null
          : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
              json['verifyType'] as Map<String, dynamic>),
      provinceId: json['provinceId'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['provinceId'] as Map<String, dynamic>),
      regencyId: json['regencyId'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['regencyId'] as Map<String, dynamic>),
      isAdmin: json['isAdmin'] == null
          ? null
          : Input$BoolFieldUpdateOperationsInput.fromJson(
              json['isAdmin'] as Map<String, dynamic>),
      isBimbel: json['isBimbel'] == null
          ? null
          : Input$BoolFieldUpdateOperationsInput.fromJson(
              json['isBimbel'] as Map<String, dynamic>),
      role: json['role'] == null
          ? null
          : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
              json['role'] as Map<String, dynamic>),
      balance: json['balance'] == null
          ? null
          : Input$FloatFieldUpdateOperationsInput.fromJson(
              json['balance'] as Map<String, dynamic>),
      emailVerifiedAt: json['emailVerifiedAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['emailVerifiedAt'] as Map<String, dynamic>),
      phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
      bimbelApprovedAt: json['bimbelApprovedAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['bimbelApprovedAt'] as Map<String, dynamic>),
      identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['identityNumberVerifiedAt'] as Map<String, dynamic>),
      schoolId: json['schoolId'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['schoolId'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$UserUncheckedUpdateManyInputToJson(
        Input$UserUncheckedUpdateManyInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
    };

Input$UserUncheckedUpdateManyWithoutProvinceInput
    _$Input$UserUncheckedUpdateManyWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedUpdateManyWithoutProvinceInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserCreateWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserCreateOrConnectWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserUpsertWithWhereUniqueWithoutProvinceInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$UserCreateManyProvinceInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserUpdateWithWhereUniqueWithoutProvinceInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserUpdateManyWithWhereWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$UserUncheckedUpdateManyWithoutProvinceInputToJson(
        Input$UserUncheckedUpdateManyWithoutProvinceInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$UserUncheckedUpdateManyWithoutRegencyInput
    _$Input$UserUncheckedUpdateManyWithoutRegencyInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedUpdateManyWithoutRegencyInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserCreateWithoutRegencyInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserCreateOrConnectWithoutRegencyInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserUpsertWithWhereUniqueWithoutRegencyInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$UserCreateManyRegencyInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserUpdateWithWhereUniqueWithoutRegencyInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserUpdateManyWithWhereWithoutRegencyInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$UserUncheckedUpdateManyWithoutRegencyInputToJson(
        Input$UserUncheckedUpdateManyWithoutRegencyInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$UserUncheckedUpdateManyWithoutSchoolInput
    _$Input$UserUncheckedUpdateManyWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedUpdateManyWithoutSchoolInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserCreateWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserCreateOrConnectWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserUpsertWithWhereUniqueWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$UserCreateManySchoolInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserUpdateWithWhereUniqueWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserUpdateManyWithWhereWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$UserUncheckedUpdateManyWithoutSchoolInputToJson(
        Input$UserUncheckedUpdateManyWithoutSchoolInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$UserUncheckedUpdateManyWithoutStudentsInput
    _$Input$UserUncheckedUpdateManyWithoutStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedUpdateManyWithoutStudentsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          provinceId: json['provinceId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['provinceId'] as Map<String, dynamic>),
          regencyId: json['regencyId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['regencyId'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUncheckedUpdateManyWithoutStudentsInputToJson(
        Input$UserUncheckedUpdateManyWithoutStudentsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
    };

Input$UserUncheckedUpdateManyWithoutUsersInput
    _$Input$UserUncheckedUpdateManyWithoutUsersInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedUpdateManyWithoutUsersInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          regencyId: json['regencyId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['regencyId'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
          schoolId: json['schoolId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['schoolId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUncheckedUpdateManyWithoutUsersInputToJson(
        Input$UserUncheckedUpdateManyWithoutUsersInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
    };

Input$UserUncheckedUpdateWithoutClassroomsInput
    _$Input$UserUncheckedUpdateWithoutClassroomsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedUpdateWithoutClassroomsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          provinceId: json['provinceId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['provinceId'] as Map<String, dynamic>),
          regencyId: json['regencyId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['regencyId'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUncheckedUpdateManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUncheckedUpdateManyWithoutUserInput
                  .fromJson(json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          schoolId: json['schoolId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['schoolId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUncheckedUpdateWithoutClassroomsInputToJson(
        Input$UserUncheckedUpdateWithoutClassroomsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
    };

Input$UserUncheckedUpdateWithoutClassroomStudentsInput
    _$Input$UserUncheckedUpdateWithoutClassroomStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedUpdateWithoutClassroomStudentsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          provinceId: json['provinceId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['provinceId'] as Map<String, dynamic>),
          regencyId: json['regencyId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['regencyId'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUncheckedUpdateManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          schoolId: json['schoolId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['schoolId'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$UserUncheckedUpdateWithoutClassroomStudentsInputToJson(
            Input$UserUncheckedUpdateWithoutClassroomStudentsInput instance) =>
        <String, dynamic>{
          'id': instance.id?.toJson(),
          'name': instance.name?.toJson(),
          'email': instance.email?.toJson(),
          'phoneNumber': instance.phoneNumber?.toJson(),
          'address': instance.address?.toJson(),
          'profilePicturePath': instance.profilePicturePath?.toJson(),
          'createdAt': instance.createdAt?.toJson(),
          'updatedAt': instance.updatedAt?.toJson(),
          'nisn': instance.nisn?.toJson(),
          'nrg': instance.nrg?.toJson(),
          'verifykey': instance.verifykey?.toJson(),
          'verifyType': instance.verifyType?.toJson(),
          'provinceId': instance.provinceId?.toJson(),
          'regencyId': instance.regencyId?.toJson(),
          'isAdmin': instance.isAdmin?.toJson(),
          'isBimbel': instance.isBimbel?.toJson(),
          'role': instance.role?.toJson(),
          'balance': instance.balance?.toJson(),
          'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
          'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
          'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
          'identityNumberVerifiedAt':
              instance.identityNumberVerifiedAt?.toJson(),
          'identityFiles': instance.identityFiles?.toJson(),
          'questions': instance.questions?.toJson(),
          'examinations': instance.examinations?.toJson(),
          'examsessions': instance.examsessions?.toJson(),
          'myChats': instance.myChats?.toJson(),
          'classrooms': instance.classrooms?.toJson(),
          'notifications': instance.notifications?.toJson(),
          'schoolStaffs': instance.schoolStaffs?.toJson(),
          'schoolId': instance.schoolId?.toJson(),
        };

Input$UserUncheckedUpdateWithoutExaminationsInput
    _$Input$UserUncheckedUpdateWithoutExaminationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedUpdateWithoutExaminationsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          provinceId: json['provinceId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['provinceId'] as Map<String, dynamic>),
          regencyId: json['regencyId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['regencyId'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUncheckedUpdateManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUncheckedUpdateManyWithoutUserInput
                  .fromJson(json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          schoolId: json['schoolId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['schoolId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUncheckedUpdateWithoutExaminationsInputToJson(
        Input$UserUncheckedUpdateWithoutExaminationsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
    };

Input$UserUncheckedUpdateWithoutExamsessionsInput
    _$Input$UserUncheckedUpdateWithoutExamsessionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedUpdateWithoutExamsessionsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          provinceId: json['provinceId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['provinceId'] as Map<String, dynamic>),
          regencyId: json['regencyId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['regencyId'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUncheckedUpdateManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUncheckedUpdateManyWithoutUserInput
                  .fromJson(json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          schoolId: json['schoolId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['schoolId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUncheckedUpdateWithoutExamsessionsInputToJson(
        Input$UserUncheckedUpdateWithoutExamsessionsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
    };

Input$UserUncheckedUpdateWithoutIdentityFilesInput
    _$Input$UserUncheckedUpdateWithoutIdentityFilesInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedUpdateWithoutIdentityFilesInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          provinceId: json['provinceId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['provinceId'] as Map<String, dynamic>),
          regencyId: json['regencyId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['regencyId'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUncheckedUpdateManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUncheckedUpdateManyWithoutUserInput
                  .fromJson(json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          schoolId: json['schoolId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['schoolId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUncheckedUpdateWithoutIdentityFilesInputToJson(
        Input$UserUncheckedUpdateWithoutIdentityFilesInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
    };

Input$UserUncheckedUpdateWithoutMyChatsInput
    _$Input$UserUncheckedUpdateWithoutMyChatsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedUpdateWithoutMyChatsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          provinceId: json['provinceId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['provinceId'] as Map<String, dynamic>),
          regencyId: json['regencyId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['regencyId'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUncheckedUpdateManyWithoutUserInput
                  .fromJson(json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          schoolId: json['schoolId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['schoolId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUncheckedUpdateWithoutMyChatsInputToJson(
        Input$UserUncheckedUpdateWithoutMyChatsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
    };

Input$UserUncheckedUpdateWithoutNotificationsInput
    _$Input$UserUncheckedUpdateWithoutNotificationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedUpdateWithoutNotificationsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          provinceId: json['provinceId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['provinceId'] as Map<String, dynamic>),
          regencyId: json['regencyId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['regencyId'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUncheckedUpdateManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUncheckedUpdateManyWithoutUserInput
                  .fromJson(json['classroomStudents'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          schoolId: json['schoolId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['schoolId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUncheckedUpdateWithoutNotificationsInputToJson(
        Input$UserUncheckedUpdateWithoutNotificationsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
    };

Input$UserUncheckedUpdateWithoutProvinceInput
    _$Input$UserUncheckedUpdateWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedUpdateWithoutProvinceInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          regencyId: json['regencyId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['regencyId'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUncheckedUpdateManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUncheckedUpdateManyWithoutUserInput
                  .fromJson(json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          schoolId: json['schoolId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['schoolId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUncheckedUpdateWithoutProvinceInputToJson(
        Input$UserUncheckedUpdateWithoutProvinceInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
    };

Input$UserUncheckedUpdateWithoutQuestionsInput
    _$Input$UserUncheckedUpdateWithoutQuestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedUpdateWithoutQuestionsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          provinceId: json['provinceId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['provinceId'] as Map<String, dynamic>),
          regencyId: json['regencyId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['regencyId'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUncheckedUpdateManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUncheckedUpdateManyWithoutUserInput
                  .fromJson(json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          schoolId: json['schoolId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['schoolId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUncheckedUpdateWithoutQuestionsInputToJson(
        Input$UserUncheckedUpdateWithoutQuestionsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'identityFiles': instance.identityFiles?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
    };

Input$UserUncheckedUpdateWithoutRegencyInput
    _$Input$UserUncheckedUpdateWithoutRegencyInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedUpdateWithoutRegencyInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          provinceId: json['provinceId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['provinceId'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUncheckedUpdateManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUncheckedUpdateManyWithoutUserInput
                  .fromJson(json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          schoolId: json['schoolId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['schoolId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUncheckedUpdateWithoutRegencyInputToJson(
        Input$UserUncheckedUpdateWithoutRegencyInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
    };

Input$UserUncheckedUpdateWithoutSchoolInput
    _$Input$UserUncheckedUpdateWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedUpdateWithoutSchoolInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          provinceId: json['provinceId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['provinceId'] as Map<String, dynamic>),
          regencyId: json['regencyId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['regencyId'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUncheckedUpdateManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUncheckedUpdateManyWithoutUserInput
                  .fromJson(json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUncheckedUpdateWithoutSchoolInputToJson(
        Input$UserUncheckedUpdateWithoutSchoolInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
    };

Input$UserUncheckedUpdateWithoutSchoolStaffsInput
    _$Input$UserUncheckedUpdateWithoutSchoolStaffsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUncheckedUpdateWithoutSchoolStaffsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          provinceId: json['provinceId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['provinceId'] as Map<String, dynamic>),
          regencyId: json['regencyId'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['regencyId'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUncheckedUpdateManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUncheckedUpdateManyWithoutUserInput
                  .fromJson(json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUncheckedUpdateManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolId: json['schoolId'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['schoolId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUncheckedUpdateWithoutSchoolStaffsInputToJson(
        Input$UserUncheckedUpdateWithoutSchoolStaffsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
    };

Input$UserUpdateInput _$Input$UserUpdateInputFromJson(
        Map<String, dynamic> json) =>
    Input$UserUpdateInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      email: json['email'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['email'] as Map<String, dynamic>),
      phoneNumber: json['phoneNumber'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['phoneNumber'] as Map<String, dynamic>),
      address: json['address'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['address'] as Map<String, dynamic>),
      profilePicturePath: json['profilePicturePath'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['profilePicturePath'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      nisn: json['nisn'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['nisn'] as Map<String, dynamic>),
      nrg: json['nrg'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['nrg'] as Map<String, dynamic>),
      verifykey: json['verifykey'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['verifykey'] as Map<String, dynamic>),
      verifyType: json['verifyType'] == null
          ? null
          : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
              json['verifyType'] as Map<String, dynamic>),
      province: json['province'] == null
          ? null
          : Input$ProvinceUpdateOneRequiredWithoutUsersInput.fromJson(
              json['province'] as Map<String, dynamic>),
      regency: json['regency'] == null
          ? null
          : Input$RegencyUpdateOneRequiredWithoutUsersInput.fromJson(
              json['regency'] as Map<String, dynamic>),
      isAdmin: json['isAdmin'] == null
          ? null
          : Input$BoolFieldUpdateOperationsInput.fromJson(
              json['isAdmin'] as Map<String, dynamic>),
      isBimbel: json['isBimbel'] == null
          ? null
          : Input$BoolFieldUpdateOperationsInput.fromJson(
              json['isBimbel'] as Map<String, dynamic>),
      role: json['role'] == null
          ? null
          : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
              json['role'] as Map<String, dynamic>),
      balance: json['balance'] == null
          ? null
          : Input$FloatFieldUpdateOperationsInput.fromJson(
              json['balance'] as Map<String, dynamic>),
      emailVerifiedAt: json['emailVerifiedAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['emailVerifiedAt'] as Map<String, dynamic>),
      phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
      bimbelApprovedAt: json['bimbelApprovedAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['bimbelApprovedAt'] as Map<String, dynamic>),
      identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['identityNumberVerifiedAt'] as Map<String, dynamic>),
      identityFiles: json['identityFiles'] == null
          ? null
          : Input$IdentityFileUpdateManyWithoutUserInput.fromJson(
              json['identityFiles'] as Map<String, dynamic>),
      questions: json['questions'] == null
          ? null
          : Input$QuestionUpdateManyWithoutUserInput.fromJson(
              json['questions'] as Map<String, dynamic>),
      examinations: json['examinations'] == null
          ? null
          : Input$ExamUpdateManyWithoutUserInput.fromJson(
              json['examinations'] as Map<String, dynamic>),
      examsessions: json['examsessions'] == null
          ? null
          : Input$ExamSessionUpdateManyWithoutUserInput.fromJson(
              json['examsessions'] as Map<String, dynamic>),
      myChats: json['myChats'] == null
          ? null
          : Input$ChatUpdateManyWithoutFromInput.fromJson(
              json['myChats'] as Map<String, dynamic>),
      classrooms: json['classrooms'] == null
          ? null
          : Input$ClassroomUpdateManyWithoutUserInput.fromJson(
              json['classrooms'] as Map<String, dynamic>),
      classroomStudents: json['classroomStudents'] == null
          ? null
          : Input$ClassroomStudentUpdateManyWithoutUserInput.fromJson(
              json['classroomStudents'] as Map<String, dynamic>),
      notifications: json['notifications'] == null
          ? null
          : Input$NotificationUpdateManyWithoutUserInput.fromJson(
              json['notifications'] as Map<String, dynamic>),
      schoolStaffs: json['schoolStaffs'] == null
          ? null
          : Input$SchoolStaffUpdateManyWithoutUserInput.fromJson(
              json['schoolStaffs'] as Map<String, dynamic>),
      school: json['school'] == null
          ? null
          : Input$SchoolUpdateOneWithoutStudentsInput.fromJson(
              json['school'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$UserUpdateInputToJson(
        Input$UserUpdateInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'province': instance.province?.toJson(),
      'regency': instance.regency?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'school': instance.school?.toJson(),
    };

Input$UserUpdateManyMutationInput _$Input$UserUpdateManyMutationInputFromJson(
        Map<String, dynamic> json) =>
    Input$UserUpdateManyMutationInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      email: json['email'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['email'] as Map<String, dynamic>),
      phoneNumber: json['phoneNumber'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['phoneNumber'] as Map<String, dynamic>),
      address: json['address'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['address'] as Map<String, dynamic>),
      profilePicturePath: json['profilePicturePath'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['profilePicturePath'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      nisn: json['nisn'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['nisn'] as Map<String, dynamic>),
      nrg: json['nrg'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['nrg'] as Map<String, dynamic>),
      verifykey: json['verifykey'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['verifykey'] as Map<String, dynamic>),
      verifyType: json['verifyType'] == null
          ? null
          : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
              json['verifyType'] as Map<String, dynamic>),
      isAdmin: json['isAdmin'] == null
          ? null
          : Input$BoolFieldUpdateOperationsInput.fromJson(
              json['isAdmin'] as Map<String, dynamic>),
      isBimbel: json['isBimbel'] == null
          ? null
          : Input$BoolFieldUpdateOperationsInput.fromJson(
              json['isBimbel'] as Map<String, dynamic>),
      role: json['role'] == null
          ? null
          : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
              json['role'] as Map<String, dynamic>),
      balance: json['balance'] == null
          ? null
          : Input$FloatFieldUpdateOperationsInput.fromJson(
              json['balance'] as Map<String, dynamic>),
      emailVerifiedAt: json['emailVerifiedAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['emailVerifiedAt'] as Map<String, dynamic>),
      phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
      bimbelApprovedAt: json['bimbelApprovedAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['bimbelApprovedAt'] as Map<String, dynamic>),
      identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['identityNumberVerifiedAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$UserUpdateManyMutationInputToJson(
        Input$UserUpdateManyMutationInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
    };

Input$UserUpdateManyWithoutProvinceInput
    _$Input$UserUpdateManyWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateManyWithoutProvinceInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserCreateWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserCreateOrConnectWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserUpsertWithWhereUniqueWithoutProvinceInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$UserCreateManyProvinceInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserUpdateWithWhereUniqueWithoutProvinceInput
                      .fromJson(e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserUpdateManyWithWhereWithoutProvinceInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$UserUpdateManyWithoutProvinceInputToJson(
        Input$UserUpdateManyWithoutProvinceInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$UserUpdateManyWithoutRegencyInput
    _$Input$UserUpdateManyWithoutRegencyInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateManyWithoutRegencyInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserCreateWithoutRegencyInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserCreateOrConnectWithoutRegencyInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserUpsertWithWhereUniqueWithoutRegencyInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$UserCreateManyRegencyInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserUpdateWithWhereUniqueWithoutRegencyInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserUpdateManyWithWhereWithoutRegencyInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$UserUpdateManyWithoutRegencyInputToJson(
        Input$UserUpdateManyWithoutRegencyInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$UserUpdateManyWithoutSchoolInput
    _$Input$UserUpdateManyWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateManyWithoutSchoolInput(
          create: (json['create'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserCreateWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserCreateOrConnectWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          upsert: (json['upsert'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserUpsertWithWhereUniqueWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          createMany: json['createMany'] == null
              ? null
              : Input$UserCreateManySchoolInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          $set: (json['set'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          disconnect: (json['disconnect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          delete: (json['delete'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          connect: (json['connect'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserWhereUniqueInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          update: (json['update'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserUpdateWithWhereUniqueWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          updateMany: (json['updateMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserUpdateManyWithWhereWithoutSchoolInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
          deleteMany: (json['deleteMany'] as List<dynamic>?)
              ?.map((e) => e == null
                  ? null
                  : Input$UserScalarWhereInput.fromJson(
                      e as Map<String, dynamic>))
              .toList(),
        );

Map<String, dynamic> _$Input$UserUpdateManyWithoutSchoolInputToJson(
        Input$UserUpdateManyWithoutSchoolInput instance) =>
    <String, dynamic>{
      'create': instance.create?.map((e) => e?.toJson()).toList(),
      'connectOrCreate':
          instance.connectOrCreate?.map((e) => e?.toJson()).toList(),
      'upsert': instance.upsert?.map((e) => e?.toJson()).toList(),
      'createMany': instance.createMany?.toJson(),
      'set': instance.$set?.map((e) => e?.toJson()).toList(),
      'disconnect': instance.disconnect?.map((e) => e?.toJson()).toList(),
      'delete': instance.delete?.map((e) => e?.toJson()).toList(),
      'connect': instance.connect?.map((e) => e?.toJson()).toList(),
      'update': instance.update?.map((e) => e?.toJson()).toList(),
      'updateMany': instance.updateMany?.map((e) => e?.toJson()).toList(),
      'deleteMany': instance.deleteMany?.map((e) => e?.toJson()).toList(),
    };

Input$UserUpdateManyWithWhereWithoutProvinceInput
    _$Input$UserUpdateManyWithWhereWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateManyWithWhereWithoutProvinceInput(
          where: Input$UserScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$UserUncheckedUpdateManyWithoutUsersInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpdateManyWithWhereWithoutProvinceInputToJson(
        Input$UserUpdateManyWithWhereWithoutProvinceInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

Input$UserUpdateManyWithWhereWithoutRegencyInput
    _$Input$UserUpdateManyWithWhereWithoutRegencyInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateManyWithWhereWithoutRegencyInput(
          where: Input$UserScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$UserUncheckedUpdateManyWithoutUsersInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpdateManyWithWhereWithoutRegencyInputToJson(
        Input$UserUpdateManyWithWhereWithoutRegencyInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

Input$UserUpdateManyWithWhereWithoutSchoolInput
    _$Input$UserUpdateManyWithWhereWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateManyWithWhereWithoutSchoolInput(
          where: Input$UserScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$UserUncheckedUpdateManyWithoutStudentsInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpdateManyWithWhereWithoutSchoolInputToJson(
        Input$UserUpdateManyWithWhereWithoutSchoolInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

Input$UserUpdateOneRequiredWithoutClassroomsInput
    _$Input$UserUpdateOneRequiredWithoutClassroomsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateOneRequiredWithoutClassroomsInput(
          create: json['create'] == null
              ? null
              : Input$UserUncheckedCreateWithoutClassroomsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$UserCreateOrConnectWithoutClassroomsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : Input$UserUpsertWithoutClassroomsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$UserWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : Input$UserUncheckedUpdateWithoutClassroomsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpdateOneRequiredWithoutClassroomsInputToJson(
        Input$UserUpdateOneRequiredWithoutClassroomsInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'upsert': instance.upsert?.toJson(),
      'connect': instance.connect?.toJson(),
      'update': instance.update?.toJson(),
    };

Input$UserUpdateOneRequiredWithoutClassroomStudentsInput
    _$Input$UserUpdateOneRequiredWithoutClassroomStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateOneRequiredWithoutClassroomStudentsInput(
          create: json['create'] == null
              ? null
              : Input$UserUncheckedCreateWithoutClassroomStudentsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$UserCreateOrConnectWithoutClassroomStudentsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : Input$UserUpsertWithoutClassroomStudentsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$UserWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : Input$UserUncheckedUpdateWithoutClassroomStudentsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String,
    dynamic> _$Input$UserUpdateOneRequiredWithoutClassroomStudentsInputToJson(
        Input$UserUpdateOneRequiredWithoutClassroomStudentsInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'upsert': instance.upsert?.toJson(),
      'connect': instance.connect?.toJson(),
      'update': instance.update?.toJson(),
    };

Input$UserUpdateOneRequiredWithoutExaminationsInput
    _$Input$UserUpdateOneRequiredWithoutExaminationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateOneRequiredWithoutExaminationsInput(
          create: json['create'] == null
              ? null
              : Input$UserUncheckedCreateWithoutExaminationsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$UserCreateOrConnectWithoutExaminationsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : Input$UserUpsertWithoutExaminationsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$UserWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : Input$UserUncheckedUpdateWithoutExaminationsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$UserUpdateOneRequiredWithoutExaminationsInputToJson(
            Input$UserUpdateOneRequiredWithoutExaminationsInput instance) =>
        <String, dynamic>{
          'create': instance.create?.toJson(),
          'connectOrCreate': instance.connectOrCreate?.toJson(),
          'upsert': instance.upsert?.toJson(),
          'connect': instance.connect?.toJson(),
          'update': instance.update?.toJson(),
        };

Input$UserUpdateOneRequiredWithoutExamsessionsInput
    _$Input$UserUpdateOneRequiredWithoutExamsessionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateOneRequiredWithoutExamsessionsInput(
          create: json['create'] == null
              ? null
              : Input$UserUncheckedCreateWithoutExamsessionsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$UserCreateOrConnectWithoutExamsessionsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : Input$UserUpsertWithoutExamsessionsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$UserWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : Input$UserUncheckedUpdateWithoutExamsessionsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$UserUpdateOneRequiredWithoutExamsessionsInputToJson(
            Input$UserUpdateOneRequiredWithoutExamsessionsInput instance) =>
        <String, dynamic>{
          'create': instance.create?.toJson(),
          'connectOrCreate': instance.connectOrCreate?.toJson(),
          'upsert': instance.upsert?.toJson(),
          'connect': instance.connect?.toJson(),
          'update': instance.update?.toJson(),
        };

Input$UserUpdateOneRequiredWithoutIdentityFilesInput
    _$Input$UserUpdateOneRequiredWithoutIdentityFilesInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateOneRequiredWithoutIdentityFilesInput(
          create: json['create'] == null
              ? null
              : Input$UserUncheckedCreateWithoutIdentityFilesInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$UserCreateOrConnectWithoutIdentityFilesInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : Input$UserUpsertWithoutIdentityFilesInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$UserWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : Input$UserUncheckedUpdateWithoutIdentityFilesInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$UserUpdateOneRequiredWithoutIdentityFilesInputToJson(
            Input$UserUpdateOneRequiredWithoutIdentityFilesInput instance) =>
        <String, dynamic>{
          'create': instance.create?.toJson(),
          'connectOrCreate': instance.connectOrCreate?.toJson(),
          'upsert': instance.upsert?.toJson(),
          'connect': instance.connect?.toJson(),
          'update': instance.update?.toJson(),
        };

Input$UserUpdateOneRequiredWithoutMyChatsInput
    _$Input$UserUpdateOneRequiredWithoutMyChatsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateOneRequiredWithoutMyChatsInput(
          create: json['create'] == null
              ? null
              : Input$UserUncheckedCreateWithoutMyChatsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$UserCreateOrConnectWithoutMyChatsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : Input$UserUpsertWithoutMyChatsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$UserWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : Input$UserUncheckedUpdateWithoutMyChatsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpdateOneRequiredWithoutMyChatsInputToJson(
        Input$UserUpdateOneRequiredWithoutMyChatsInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'upsert': instance.upsert?.toJson(),
      'connect': instance.connect?.toJson(),
      'update': instance.update?.toJson(),
    };

Input$UserUpdateOneRequiredWithoutNotificationsInput
    _$Input$UserUpdateOneRequiredWithoutNotificationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateOneRequiredWithoutNotificationsInput(
          create: json['create'] == null
              ? null
              : Input$UserUncheckedCreateWithoutNotificationsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$UserCreateOrConnectWithoutNotificationsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : Input$UserUpsertWithoutNotificationsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$UserWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : Input$UserUncheckedUpdateWithoutNotificationsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$UserUpdateOneRequiredWithoutNotificationsInputToJson(
            Input$UserUpdateOneRequiredWithoutNotificationsInput instance) =>
        <String, dynamic>{
          'create': instance.create?.toJson(),
          'connectOrCreate': instance.connectOrCreate?.toJson(),
          'upsert': instance.upsert?.toJson(),
          'connect': instance.connect?.toJson(),
          'update': instance.update?.toJson(),
        };

Input$UserUpdateOneRequiredWithoutQuestionsInput
    _$Input$UserUpdateOneRequiredWithoutQuestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateOneRequiredWithoutQuestionsInput(
          create: json['create'] == null
              ? null
              : Input$UserUncheckedCreateWithoutQuestionsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$UserCreateOrConnectWithoutQuestionsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : Input$UserUpsertWithoutQuestionsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$UserWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : Input$UserUncheckedUpdateWithoutQuestionsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpdateOneRequiredWithoutQuestionsInputToJson(
        Input$UserUpdateOneRequiredWithoutQuestionsInput instance) =>
    <String, dynamic>{
      'create': instance.create?.toJson(),
      'connectOrCreate': instance.connectOrCreate?.toJson(),
      'upsert': instance.upsert?.toJson(),
      'connect': instance.connect?.toJson(),
      'update': instance.update?.toJson(),
    };

Input$UserUpdateOneRequiredWithoutSchoolStaffsInput
    _$Input$UserUpdateOneRequiredWithoutSchoolStaffsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateOneRequiredWithoutSchoolStaffsInput(
          create: json['create'] == null
              ? null
              : Input$UserUncheckedCreateWithoutSchoolStaffsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : Input$UserCreateOrConnectWithoutSchoolStaffsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : Input$UserUpsertWithoutSchoolStaffsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : Input$UserWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : Input$UserUncheckedUpdateWithoutSchoolStaffsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$UserUpdateOneRequiredWithoutSchoolStaffsInputToJson(
            Input$UserUpdateOneRequiredWithoutSchoolStaffsInput instance) =>
        <String, dynamic>{
          'create': instance.create?.toJson(),
          'connectOrCreate': instance.connectOrCreate?.toJson(),
          'upsert': instance.upsert?.toJson(),
          'connect': instance.connect?.toJson(),
          'update': instance.update?.toJson(),
        };

Input$UserUpdateWithoutClassroomsInput
    _$Input$UserUpdateWithoutClassroomsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateWithoutClassroomsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          province: json['province'] == null
              ? null
              : Input$ProvinceUpdateOneRequiredWithoutUsersInput.fromJson(
                  json['province'] as Map<String, dynamic>),
          regency: json['regency'] == null
              ? null
              : Input$RegencyUpdateOneRequiredWithoutUsersInput.fromJson(
                  json['regency'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUpdateManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUpdateManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUpdateManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUpdateManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUpdateManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUpdateManyWithoutUserInput.fromJson(
                  json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUpdateManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUpdateManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          school: json['school'] == null
              ? null
              : Input$SchoolUpdateOneWithoutStudentsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpdateWithoutClassroomsInputToJson(
        Input$UserUpdateWithoutClassroomsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'province': instance.province?.toJson(),
      'regency': instance.regency?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'school': instance.school?.toJson(),
    };

Input$UserUpdateWithoutClassroomStudentsInput
    _$Input$UserUpdateWithoutClassroomStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateWithoutClassroomStudentsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          province: json['province'] == null
              ? null
              : Input$ProvinceUpdateOneRequiredWithoutUsersInput.fromJson(
                  json['province'] as Map<String, dynamic>),
          regency: json['regency'] == null
              ? null
              : Input$RegencyUpdateOneRequiredWithoutUsersInput.fromJson(
                  json['regency'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUpdateManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUpdateManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUpdateManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUpdateManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUpdateManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUpdateManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUpdateManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUpdateManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          school: json['school'] == null
              ? null
              : Input$SchoolUpdateOneWithoutStudentsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpdateWithoutClassroomStudentsInputToJson(
        Input$UserUpdateWithoutClassroomStudentsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'province': instance.province?.toJson(),
      'regency': instance.regency?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'school': instance.school?.toJson(),
    };

Input$UserUpdateWithoutExaminationsInput
    _$Input$UserUpdateWithoutExaminationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateWithoutExaminationsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          province: json['province'] == null
              ? null
              : Input$ProvinceUpdateOneRequiredWithoutUsersInput.fromJson(
                  json['province'] as Map<String, dynamic>),
          regency: json['regency'] == null
              ? null
              : Input$RegencyUpdateOneRequiredWithoutUsersInput.fromJson(
                  json['regency'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUpdateManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUpdateManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUpdateManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUpdateManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUpdateManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUpdateManyWithoutUserInput.fromJson(
                  json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUpdateManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUpdateManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          school: json['school'] == null
              ? null
              : Input$SchoolUpdateOneWithoutStudentsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpdateWithoutExaminationsInputToJson(
        Input$UserUpdateWithoutExaminationsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'province': instance.province?.toJson(),
      'regency': instance.regency?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'school': instance.school?.toJson(),
    };

Input$UserUpdateWithoutExamsessionsInput
    _$Input$UserUpdateWithoutExamsessionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateWithoutExamsessionsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          province: json['province'] == null
              ? null
              : Input$ProvinceUpdateOneRequiredWithoutUsersInput.fromJson(
                  json['province'] as Map<String, dynamic>),
          regency: json['regency'] == null
              ? null
              : Input$RegencyUpdateOneRequiredWithoutUsersInput.fromJson(
                  json['regency'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUpdateManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUpdateManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUpdateManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUpdateManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUpdateManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUpdateManyWithoutUserInput.fromJson(
                  json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUpdateManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUpdateManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          school: json['school'] == null
              ? null
              : Input$SchoolUpdateOneWithoutStudentsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpdateWithoutExamsessionsInputToJson(
        Input$UserUpdateWithoutExamsessionsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'province': instance.province?.toJson(),
      'regency': instance.regency?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'school': instance.school?.toJson(),
    };

Input$UserUpdateWithoutIdentityFilesInput
    _$Input$UserUpdateWithoutIdentityFilesInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateWithoutIdentityFilesInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          province: json['province'] == null
              ? null
              : Input$ProvinceUpdateOneRequiredWithoutUsersInput.fromJson(
                  json['province'] as Map<String, dynamic>),
          regency: json['regency'] == null
              ? null
              : Input$RegencyUpdateOneRequiredWithoutUsersInput.fromJson(
                  json['regency'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUpdateManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUpdateManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUpdateManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUpdateManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUpdateManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUpdateManyWithoutUserInput.fromJson(
                  json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUpdateManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUpdateManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          school: json['school'] == null
              ? null
              : Input$SchoolUpdateOneWithoutStudentsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpdateWithoutIdentityFilesInputToJson(
        Input$UserUpdateWithoutIdentityFilesInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'province': instance.province?.toJson(),
      'regency': instance.regency?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'school': instance.school?.toJson(),
    };

Input$UserUpdateWithoutMyChatsInput
    _$Input$UserUpdateWithoutMyChatsInputFromJson(Map<String, dynamic> json) =>
        Input$UserUpdateWithoutMyChatsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          province: json['province'] == null
              ? null
              : Input$ProvinceUpdateOneRequiredWithoutUsersInput.fromJson(
                  json['province'] as Map<String, dynamic>),
          regency: json['regency'] == null
              ? null
              : Input$RegencyUpdateOneRequiredWithoutUsersInput.fromJson(
                  json['regency'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUpdateManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUpdateManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUpdateManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUpdateManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUpdateManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUpdateManyWithoutUserInput.fromJson(
                  json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUpdateManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUpdateManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          school: json['school'] == null
              ? null
              : Input$SchoolUpdateOneWithoutStudentsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpdateWithoutMyChatsInputToJson(
        Input$UserUpdateWithoutMyChatsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'province': instance.province?.toJson(),
      'regency': instance.regency?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'school': instance.school?.toJson(),
    };

Input$UserUpdateWithoutNotificationsInput
    _$Input$UserUpdateWithoutNotificationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateWithoutNotificationsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          province: json['province'] == null
              ? null
              : Input$ProvinceUpdateOneRequiredWithoutUsersInput.fromJson(
                  json['province'] as Map<String, dynamic>),
          regency: json['regency'] == null
              ? null
              : Input$RegencyUpdateOneRequiredWithoutUsersInput.fromJson(
                  json['regency'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUpdateManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUpdateManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUpdateManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUpdateManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUpdateManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUpdateManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUpdateManyWithoutUserInput.fromJson(
                  json['classroomStudents'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUpdateManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          school: json['school'] == null
              ? null
              : Input$SchoolUpdateOneWithoutStudentsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpdateWithoutNotificationsInputToJson(
        Input$UserUpdateWithoutNotificationsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'province': instance.province?.toJson(),
      'regency': instance.regency?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'school': instance.school?.toJson(),
    };

Input$UserUpdateWithoutProvinceInput
    _$Input$UserUpdateWithoutProvinceInputFromJson(Map<String, dynamic> json) =>
        Input$UserUpdateWithoutProvinceInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          regency: json['regency'] == null
              ? null
              : Input$RegencyUpdateOneRequiredWithoutUsersInput.fromJson(
                  json['regency'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUpdateManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUpdateManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUpdateManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUpdateManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUpdateManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUpdateManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUpdateManyWithoutUserInput.fromJson(
                  json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUpdateManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUpdateManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          school: json['school'] == null
              ? null
              : Input$SchoolUpdateOneWithoutStudentsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpdateWithoutProvinceInputToJson(
        Input$UserUpdateWithoutProvinceInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'regency': instance.regency?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'school': instance.school?.toJson(),
    };

Input$UserUpdateWithoutQuestionsInput
    _$Input$UserUpdateWithoutQuestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateWithoutQuestionsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          province: json['province'] == null
              ? null
              : Input$ProvinceUpdateOneRequiredWithoutUsersInput.fromJson(
                  json['province'] as Map<String, dynamic>),
          regency: json['regency'] == null
              ? null
              : Input$RegencyUpdateOneRequiredWithoutUsersInput.fromJson(
                  json['regency'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUpdateManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUpdateManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUpdateManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUpdateManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUpdateManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUpdateManyWithoutUserInput.fromJson(
                  json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUpdateManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUpdateManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          school: json['school'] == null
              ? null
              : Input$SchoolUpdateOneWithoutStudentsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpdateWithoutQuestionsInputToJson(
        Input$UserUpdateWithoutQuestionsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'province': instance.province?.toJson(),
      'regency': instance.regency?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'identityFiles': instance.identityFiles?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'school': instance.school?.toJson(),
    };

Input$UserUpdateWithoutRegencyInput
    _$Input$UserUpdateWithoutRegencyInputFromJson(Map<String, dynamic> json) =>
        Input$UserUpdateWithoutRegencyInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          province: json['province'] == null
              ? null
              : Input$ProvinceUpdateOneRequiredWithoutUsersInput.fromJson(
                  json['province'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUpdateManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUpdateManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUpdateManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUpdateManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUpdateManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUpdateManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUpdateManyWithoutUserInput.fromJson(
                  json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUpdateManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          schoolStaffs: json['schoolStaffs'] == null
              ? null
              : Input$SchoolStaffUpdateManyWithoutUserInput.fromJson(
                  json['schoolStaffs'] as Map<String, dynamic>),
          school: json['school'] == null
              ? null
              : Input$SchoolUpdateOneWithoutStudentsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpdateWithoutRegencyInputToJson(
        Input$UserUpdateWithoutRegencyInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'province': instance.province?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'school': instance.school?.toJson(),
    };

Input$UserUpdateWithoutSchoolInput _$Input$UserUpdateWithoutSchoolInputFromJson(
        Map<String, dynamic> json) =>
    Input$UserUpdateWithoutSchoolInput(
      id: json['id'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      email: json['email'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['email'] as Map<String, dynamic>),
      phoneNumber: json['phoneNumber'] == null
          ? null
          : Input$StringFieldUpdateOperationsInput.fromJson(
              json['phoneNumber'] as Map<String, dynamic>),
      address: json['address'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['address'] as Map<String, dynamic>),
      profilePicturePath: json['profilePicturePath'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['profilePicturePath'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFieldUpdateOperationsInput.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      nisn: json['nisn'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['nisn'] as Map<String, dynamic>),
      nrg: json['nrg'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['nrg'] as Map<String, dynamic>),
      verifykey: json['verifykey'] == null
          ? null
          : Input$NullableStringFieldUpdateOperationsInput.fromJson(
              json['verifykey'] as Map<String, dynamic>),
      verifyType: json['verifyType'] == null
          ? null
          : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
              json['verifyType'] as Map<String, dynamic>),
      province: json['province'] == null
          ? null
          : Input$ProvinceUpdateOneRequiredWithoutUsersInput.fromJson(
              json['province'] as Map<String, dynamic>),
      regency: json['regency'] == null
          ? null
          : Input$RegencyUpdateOneRequiredWithoutUsersInput.fromJson(
              json['regency'] as Map<String, dynamic>),
      isAdmin: json['isAdmin'] == null
          ? null
          : Input$BoolFieldUpdateOperationsInput.fromJson(
              json['isAdmin'] as Map<String, dynamic>),
      isBimbel: json['isBimbel'] == null
          ? null
          : Input$BoolFieldUpdateOperationsInput.fromJson(
              json['isBimbel'] as Map<String, dynamic>),
      role: json['role'] == null
          ? null
          : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
              json['role'] as Map<String, dynamic>),
      balance: json['balance'] == null
          ? null
          : Input$FloatFieldUpdateOperationsInput.fromJson(
              json['balance'] as Map<String, dynamic>),
      emailVerifiedAt: json['emailVerifiedAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['emailVerifiedAt'] as Map<String, dynamic>),
      phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
      bimbelApprovedAt: json['bimbelApprovedAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['bimbelApprovedAt'] as Map<String, dynamic>),
      identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
          ? null
          : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
              json['identityNumberVerifiedAt'] as Map<String, dynamic>),
      identityFiles: json['identityFiles'] == null
          ? null
          : Input$IdentityFileUpdateManyWithoutUserInput.fromJson(
              json['identityFiles'] as Map<String, dynamic>),
      questions: json['questions'] == null
          ? null
          : Input$QuestionUpdateManyWithoutUserInput.fromJson(
              json['questions'] as Map<String, dynamic>),
      examinations: json['examinations'] == null
          ? null
          : Input$ExamUpdateManyWithoutUserInput.fromJson(
              json['examinations'] as Map<String, dynamic>),
      examsessions: json['examsessions'] == null
          ? null
          : Input$ExamSessionUpdateManyWithoutUserInput.fromJson(
              json['examsessions'] as Map<String, dynamic>),
      myChats: json['myChats'] == null
          ? null
          : Input$ChatUpdateManyWithoutFromInput.fromJson(
              json['myChats'] as Map<String, dynamic>),
      classrooms: json['classrooms'] == null
          ? null
          : Input$ClassroomUpdateManyWithoutUserInput.fromJson(
              json['classrooms'] as Map<String, dynamic>),
      classroomStudents: json['classroomStudents'] == null
          ? null
          : Input$ClassroomStudentUpdateManyWithoutUserInput.fromJson(
              json['classroomStudents'] as Map<String, dynamic>),
      notifications: json['notifications'] == null
          ? null
          : Input$NotificationUpdateManyWithoutUserInput.fromJson(
              json['notifications'] as Map<String, dynamic>),
      schoolStaffs: json['schoolStaffs'] == null
          ? null
          : Input$SchoolStaffUpdateManyWithoutUserInput.fromJson(
              json['schoolStaffs'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$UserUpdateWithoutSchoolInputToJson(
        Input$UserUpdateWithoutSchoolInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'province': instance.province?.toJson(),
      'regency': instance.regency?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
    };

Input$UserUpdateWithoutSchoolStaffsInput
    _$Input$UserUpdateWithoutSchoolStaffsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateWithoutSchoolStaffsInput(
          id: json['id'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phoneNumber: json['phoneNumber'] == null
              ? null
              : Input$StringFieldUpdateOperationsInput.fromJson(
                  json['phoneNumber'] as Map<String, dynamic>),
          address: json['address'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['address'] as Map<String, dynamic>),
          profilePicturePath: json['profilePicturePath'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['profilePicturePath'] as Map<String, dynamic>),
          createdAt: json['createdAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['createdAt'] as Map<String, dynamic>),
          updatedAt: json['updatedAt'] == null
              ? null
              : Input$DateTimeFieldUpdateOperationsInput.fromJson(
                  json['updatedAt'] as Map<String, dynamic>),
          nisn: json['nisn'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nisn'] as Map<String, dynamic>),
          nrg: json['nrg'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['nrg'] as Map<String, dynamic>),
          verifykey: json['verifykey'] == null
              ? null
              : Input$NullableStringFieldUpdateOperationsInput.fromJson(
                  json['verifykey'] as Map<String, dynamic>),
          verifyType: json['verifyType'] == null
              ? null
              : Input$NullableEnumVerifyTypeFieldUpdateOperationsInput.fromJson(
                  json['verifyType'] as Map<String, dynamic>),
          province: json['province'] == null
              ? null
              : Input$ProvinceUpdateOneRequiredWithoutUsersInput.fromJson(
                  json['province'] as Map<String, dynamic>),
          regency: json['regency'] == null
              ? null
              : Input$RegencyUpdateOneRequiredWithoutUsersInput.fromJson(
                  json['regency'] as Map<String, dynamic>),
          isAdmin: json['isAdmin'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isAdmin'] as Map<String, dynamic>),
          isBimbel: json['isBimbel'] == null
              ? null
              : Input$BoolFieldUpdateOperationsInput.fromJson(
                  json['isBimbel'] as Map<String, dynamic>),
          role: json['role'] == null
              ? null
              : Input$EnumRolesFieldUpdateOperationsInput.fromJson(
                  json['role'] as Map<String, dynamic>),
          balance: json['balance'] == null
              ? null
              : Input$FloatFieldUpdateOperationsInput.fromJson(
                  json['balance'] as Map<String, dynamic>),
          emailVerifiedAt: json['emailVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['emailVerifiedAt'] as Map<String, dynamic>),
          phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
          bimbelApprovedAt: json['bimbelApprovedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['bimbelApprovedAt'] as Map<String, dynamic>),
          identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
              ? null
              : Input$NullableDateTimeFieldUpdateOperationsInput.fromJson(
                  json['identityNumberVerifiedAt'] as Map<String, dynamic>),
          identityFiles: json['identityFiles'] == null
              ? null
              : Input$IdentityFileUpdateManyWithoutUserInput.fromJson(
                  json['identityFiles'] as Map<String, dynamic>),
          questions: json['questions'] == null
              ? null
              : Input$QuestionUpdateManyWithoutUserInput.fromJson(
                  json['questions'] as Map<String, dynamic>),
          examinations: json['examinations'] == null
              ? null
              : Input$ExamUpdateManyWithoutUserInput.fromJson(
                  json['examinations'] as Map<String, dynamic>),
          examsessions: json['examsessions'] == null
              ? null
              : Input$ExamSessionUpdateManyWithoutUserInput.fromJson(
                  json['examsessions'] as Map<String, dynamic>),
          myChats: json['myChats'] == null
              ? null
              : Input$ChatUpdateManyWithoutFromInput.fromJson(
                  json['myChats'] as Map<String, dynamic>),
          classrooms: json['classrooms'] == null
              ? null
              : Input$ClassroomUpdateManyWithoutUserInput.fromJson(
                  json['classrooms'] as Map<String, dynamic>),
          classroomStudents: json['classroomStudents'] == null
              ? null
              : Input$ClassroomStudentUpdateManyWithoutUserInput.fromJson(
                  json['classroomStudents'] as Map<String, dynamic>),
          notifications: json['notifications'] == null
              ? null
              : Input$NotificationUpdateManyWithoutUserInput.fromJson(
                  json['notifications'] as Map<String, dynamic>),
          school: json['school'] == null
              ? null
              : Input$SchoolUpdateOneWithoutStudentsInput.fromJson(
                  json['school'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpdateWithoutSchoolStaffsInputToJson(
        Input$UserUpdateWithoutSchoolStaffsInput instance) =>
    <String, dynamic>{
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'province': instance.province?.toJson(),
      'regency': instance.regency?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'school': instance.school?.toJson(),
    };

Input$UserUpdateWithWhereUniqueWithoutProvinceInput
    _$Input$UserUpdateWithWhereUniqueWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateWithWhereUniqueWithoutProvinceInput(
          where: Input$UserWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$UserUncheckedUpdateWithoutProvinceInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$UserUpdateWithWhereUniqueWithoutProvinceInputToJson(
            Input$UserUpdateWithWhereUniqueWithoutProvinceInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

Input$UserUpdateWithWhereUniqueWithoutRegencyInput
    _$Input$UserUpdateWithWhereUniqueWithoutRegencyInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateWithWhereUniqueWithoutRegencyInput(
          where: Input$UserWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$UserUncheckedUpdateWithoutRegencyInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpdateWithWhereUniqueWithoutRegencyInputToJson(
        Input$UserUpdateWithWhereUniqueWithoutRegencyInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

Input$UserUpdateWithWhereUniqueWithoutSchoolInput
    _$Input$UserUpdateWithWhereUniqueWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpdateWithWhereUniqueWithoutSchoolInput(
          where: Input$UserWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: Input$UserUncheckedUpdateWithoutSchoolInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpdateWithWhereUniqueWithoutSchoolInputToJson(
        Input$UserUpdateWithWhereUniqueWithoutSchoolInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

Input$UserUpsertWithoutClassroomsInput
    _$Input$UserUpsertWithoutClassroomsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpsertWithoutClassroomsInput(
          update: Input$UserUncheckedUpdateWithoutClassroomsInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$UserUncheckedCreateWithoutClassroomsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpsertWithoutClassroomsInputToJson(
        Input$UserUpsertWithoutClassroomsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$UserUpsertWithoutClassroomStudentsInput
    _$Input$UserUpsertWithoutClassroomStudentsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpsertWithoutClassroomStudentsInput(
          update:
              Input$UserUncheckedUpdateWithoutClassroomStudentsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
          create:
              Input$UserUncheckedCreateWithoutClassroomStudentsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpsertWithoutClassroomStudentsInputToJson(
        Input$UserUpsertWithoutClassroomStudentsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$UserUpsertWithoutExaminationsInput
    _$Input$UserUpsertWithoutExaminationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpsertWithoutExaminationsInput(
          update: Input$UserUncheckedUpdateWithoutExaminationsInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$UserUncheckedCreateWithoutExaminationsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpsertWithoutExaminationsInputToJson(
        Input$UserUpsertWithoutExaminationsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$UserUpsertWithoutExamsessionsInput
    _$Input$UserUpsertWithoutExamsessionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpsertWithoutExamsessionsInput(
          update: Input$UserUncheckedUpdateWithoutExamsessionsInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$UserUncheckedCreateWithoutExamsessionsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpsertWithoutExamsessionsInputToJson(
        Input$UserUpsertWithoutExamsessionsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$UserUpsertWithoutIdentityFilesInput
    _$Input$UserUpsertWithoutIdentityFilesInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpsertWithoutIdentityFilesInput(
          update: Input$UserUncheckedUpdateWithoutIdentityFilesInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$UserUncheckedCreateWithoutIdentityFilesInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpsertWithoutIdentityFilesInputToJson(
        Input$UserUpsertWithoutIdentityFilesInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$UserUpsertWithoutMyChatsInput
    _$Input$UserUpsertWithoutMyChatsInputFromJson(Map<String, dynamic> json) =>
        Input$UserUpsertWithoutMyChatsInput(
          update: Input$UserUncheckedUpdateWithoutMyChatsInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$UserUncheckedCreateWithoutMyChatsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpsertWithoutMyChatsInputToJson(
        Input$UserUpsertWithoutMyChatsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$UserUpsertWithoutNotificationsInput
    _$Input$UserUpsertWithoutNotificationsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpsertWithoutNotificationsInput(
          update: Input$UserUncheckedUpdateWithoutNotificationsInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$UserUncheckedCreateWithoutNotificationsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpsertWithoutNotificationsInputToJson(
        Input$UserUpsertWithoutNotificationsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$UserUpsertWithoutQuestionsInput
    _$Input$UserUpsertWithoutQuestionsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpsertWithoutQuestionsInput(
          update: Input$UserUncheckedUpdateWithoutQuestionsInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$UserUncheckedCreateWithoutQuestionsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpsertWithoutQuestionsInputToJson(
        Input$UserUpsertWithoutQuestionsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$UserUpsertWithoutSchoolStaffsInput
    _$Input$UserUpsertWithoutSchoolStaffsInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpsertWithoutSchoolStaffsInput(
          update: Input$UserUncheckedUpdateWithoutSchoolStaffsInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$UserUncheckedCreateWithoutSchoolStaffsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpsertWithoutSchoolStaffsInputToJson(
        Input$UserUpsertWithoutSchoolStaffsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$UserUpsertWithWhereUniqueWithoutProvinceInput
    _$Input$UserUpsertWithWhereUniqueWithoutProvinceInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpsertWithWhereUniqueWithoutProvinceInput(
          where: Input$UserWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: Input$UserUncheckedUpdateWithoutProvinceInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$UserUncheckedCreateWithoutProvinceInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$Input$UserUpsertWithWhereUniqueWithoutProvinceInputToJson(
            Input$UserUpsertWithWhereUniqueWithoutProvinceInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

Input$UserUpsertWithWhereUniqueWithoutRegencyInput
    _$Input$UserUpsertWithWhereUniqueWithoutRegencyInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpsertWithWhereUniqueWithoutRegencyInput(
          where: Input$UserWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: Input$UserUncheckedUpdateWithoutRegencyInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$UserUncheckedCreateWithoutRegencyInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpsertWithWhereUniqueWithoutRegencyInputToJson(
        Input$UserUpsertWithWhereUniqueWithoutRegencyInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$UserUpsertWithWhereUniqueWithoutSchoolInput
    _$Input$UserUpsertWithWhereUniqueWithoutSchoolInputFromJson(
            Map<String, dynamic> json) =>
        Input$UserUpsertWithWhereUniqueWithoutSchoolInput(
          where: Input$UserWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: Input$UserUncheckedUpdateWithoutSchoolInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: Input$UserUncheckedCreateWithoutSchoolInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$Input$UserUpsertWithWhereUniqueWithoutSchoolInputToJson(
        Input$UserUpsertWithWhereUniqueWithoutSchoolInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

Input$UserWhereInput _$Input$UserWhereInputFromJson(
        Map<String, dynamic> json) =>
    Input$UserWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$UserWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$UserWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$UserWhereInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      id: json['id'] == null
          ? null
          : Input$StringFilter.fromJson(json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : Input$StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      email: json['email'] == null
          ? null
          : Input$StringFilter.fromJson(json['email'] as Map<String, dynamic>),
      phoneNumber: json['phoneNumber'] == null
          ? null
          : Input$StringFilter.fromJson(
              json['phoneNumber'] as Map<String, dynamic>),
      address: json['address'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['address'] as Map<String, dynamic>),
      profilePicturePath: json['profilePicturePath'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['profilePicturePath'] as Map<String, dynamic>),
      createdAt: json['createdAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['createdAt'] as Map<String, dynamic>),
      updatedAt: json['updatedAt'] == null
          ? null
          : Input$DateTimeFilter.fromJson(
              json['updatedAt'] as Map<String, dynamic>),
      nisn: json['nisn'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['nisn'] as Map<String, dynamic>),
      nrg: json['nrg'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['nrg'] as Map<String, dynamic>),
      verifykey: json['verifykey'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['verifykey'] as Map<String, dynamic>),
      verifyType: json['verifyType'] == null
          ? null
          : Input$EnumVerifyTypeNullableFilter.fromJson(
              json['verifyType'] as Map<String, dynamic>),
      provinceId: json['provinceId'] == null
          ? null
          : Input$StringFilter.fromJson(
              json['provinceId'] as Map<String, dynamic>),
      province: json['province'] == null
          ? null
          : Input$ProvinceWhereInput.fromJson(
              json['province'] as Map<String, dynamic>),
      regencyId: json['regencyId'] == null
          ? null
          : Input$StringFilter.fromJson(
              json['regencyId'] as Map<String, dynamic>),
      regency: json['regency'] == null
          ? null
          : Input$RegencyWhereInput.fromJson(
              json['regency'] as Map<String, dynamic>),
      isAdmin: json['isAdmin'] == null
          ? null
          : Input$BoolFilter.fromJson(json['isAdmin'] as Map<String, dynamic>),
      isBimbel: json['isBimbel'] == null
          ? null
          : Input$BoolFilter.fromJson(json['isBimbel'] as Map<String, dynamic>),
      role: json['role'] == null
          ? null
          : Input$EnumRolesFilter.fromJson(
              json['role'] as Map<String, dynamic>),
      balance: json['balance'] == null
          ? null
          : Input$FloatFilter.fromJson(json['balance'] as Map<String, dynamic>),
      emailVerifiedAt: json['emailVerifiedAt'] == null
          ? null
          : Input$DateTimeNullableFilter.fromJson(
              json['emailVerifiedAt'] as Map<String, dynamic>),
      phoneNumberVerifiedAt: json['phoneNumberVerifiedAt'] == null
          ? null
          : Input$DateTimeNullableFilter.fromJson(
              json['phoneNumberVerifiedAt'] as Map<String, dynamic>),
      bimbelApprovedAt: json['bimbelApprovedAt'] == null
          ? null
          : Input$DateTimeNullableFilter.fromJson(
              json['bimbelApprovedAt'] as Map<String, dynamic>),
      identityNumberVerifiedAt: json['identityNumberVerifiedAt'] == null
          ? null
          : Input$DateTimeNullableFilter.fromJson(
              json['identityNumberVerifiedAt'] as Map<String, dynamic>),
      identityFiles: json['identityFiles'] == null
          ? null
          : Input$IdentityFileListRelationFilter.fromJson(
              json['identityFiles'] as Map<String, dynamic>),
      questions: json['questions'] == null
          ? null
          : Input$QuestionListRelationFilter.fromJson(
              json['questions'] as Map<String, dynamic>),
      examinations: json['examinations'] == null
          ? null
          : Input$ExamListRelationFilter.fromJson(
              json['examinations'] as Map<String, dynamic>),
      examsessions: json['examsessions'] == null
          ? null
          : Input$ExamSessionListRelationFilter.fromJson(
              json['examsessions'] as Map<String, dynamic>),
      myChats: json['myChats'] == null
          ? null
          : Input$ChatListRelationFilter.fromJson(
              json['myChats'] as Map<String, dynamic>),
      classrooms: json['classrooms'] == null
          ? null
          : Input$ClassroomListRelationFilter.fromJson(
              json['classrooms'] as Map<String, dynamic>),
      classroomStudents: json['classroomStudents'] == null
          ? null
          : Input$ClassroomStudentListRelationFilter.fromJson(
              json['classroomStudents'] as Map<String, dynamic>),
      notifications: json['notifications'] == null
          ? null
          : Input$NotificationListRelationFilter.fromJson(
              json['notifications'] as Map<String, dynamic>),
      schoolStaffs: json['schoolStaffs'] == null
          ? null
          : Input$SchoolStaffListRelationFilter.fromJson(
              json['schoolStaffs'] as Map<String, dynamic>),
      schoolId: json['schoolId'] == null
          ? null
          : Input$StringNullableFilter.fromJson(
              json['schoolId'] as Map<String, dynamic>),
      school: json['school'] == null
          ? null
          : Input$SchoolWhereInput.fromJson(
              json['school'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$Input$UserWhereInputToJson(
        Input$UserWhereInput instance) =>
    <String, dynamic>{
      'AND': instance.AND?.map((e) => e?.toJson()).toList(),
      'OR': instance.OR?.map((e) => e?.toJson()).toList(),
      'NOT': instance.NOT?.map((e) => e?.toJson()).toList(),
      'id': instance.id?.toJson(),
      'name': instance.name?.toJson(),
      'email': instance.email?.toJson(),
      'phoneNumber': instance.phoneNumber?.toJson(),
      'address': instance.address?.toJson(),
      'profilePicturePath': instance.profilePicturePath?.toJson(),
      'createdAt': instance.createdAt?.toJson(),
      'updatedAt': instance.updatedAt?.toJson(),
      'nisn': instance.nisn?.toJson(),
      'nrg': instance.nrg?.toJson(),
      'verifykey': instance.verifykey?.toJson(),
      'verifyType': instance.verifyType?.toJson(),
      'provinceId': instance.provinceId?.toJson(),
      'province': instance.province?.toJson(),
      'regencyId': instance.regencyId?.toJson(),
      'regency': instance.regency?.toJson(),
      'isAdmin': instance.isAdmin?.toJson(),
      'isBimbel': instance.isBimbel?.toJson(),
      'role': instance.role?.toJson(),
      'balance': instance.balance?.toJson(),
      'emailVerifiedAt': instance.emailVerifiedAt?.toJson(),
      'phoneNumberVerifiedAt': instance.phoneNumberVerifiedAt?.toJson(),
      'bimbelApprovedAt': instance.bimbelApprovedAt?.toJson(),
      'identityNumberVerifiedAt': instance.identityNumberVerifiedAt?.toJson(),
      'identityFiles': instance.identityFiles?.toJson(),
      'questions': instance.questions?.toJson(),
      'examinations': instance.examinations?.toJson(),
      'examsessions': instance.examsessions?.toJson(),
      'myChats': instance.myChats?.toJson(),
      'classrooms': instance.classrooms?.toJson(),
      'classroomStudents': instance.classroomStudents?.toJson(),
      'notifications': instance.notifications?.toJson(),
      'schoolStaffs': instance.schoolStaffs?.toJson(),
      'schoolId': instance.schoolId?.toJson(),
      'school': instance.school?.toJson(),
    };

Input$UserWhereUniqueInput _$Input$UserWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    Input$UserWhereUniqueInput(
      id: json['id'] as String?,
      verifykey: json['verifykey'] as String?,
    );

Map<String, dynamic> _$Input$UserWhereUniqueInputToJson(
        Input$UserWhereUniqueInput instance) =>
    <String, dynamic>{
      'id': instance.id,
      'verifykey': instance.verifykey,
    };
